
Zoetrop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035b0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003788  08003788  00013788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037b0  080037b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080037b0  080037b0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037b0  080037b0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037b0  080037b0  000137b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037b4  080037b4  000137b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080037b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  080037c4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  080037c4  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b350  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f38  00000000  00000000  0002b38c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  0002d2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  0002dd88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003f47  00000000  00000000  0002e750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a447  00000000  00000000  00032697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf375  00000000  00000000  0003cade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010be53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ae0  00000000  00000000  0010bea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003770 	.word	0x08003770

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003770 	.word	0x08003770

08000218 <encoder_measureVelocity>:
	LL_EXTI_EnableIT_0_31 (ENC_EXTI);
}

//measures velocity in rad/s
void encoder_measureVelocity()
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
	uint32_t time = timers_getVelocityTimer();
 800021e:	f000 ffc1 	bl	80011a4 <timers_getVelocityTimer>
 8000222:	6078      	str	r0, [r7, #4]
	timers_resetVeloctiyTimer();
 8000224:	f000 ffc7 	bl	80011b6 <timers_resetVeloctiyTimer>
	currentVelocity = (float)time;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	ee07 3a90 	vmov	s15, r3
 800022e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000232:	4b0a      	ldr	r3, [pc, #40]	; (800025c <encoder_measureVelocity+0x44>)
 8000234:	edc3 7a00 	vstr	s15, [r3]
	currentVelocity = PULSE_NUMBER * PIx2 / (currentVelocity * TIMER_FREQUENCY);
 8000238:	4b08      	ldr	r3, [pc, #32]	; (800025c <encoder_measureVelocity+0x44>)
 800023a:	edd3 7a00 	vldr	s15, [r3]
 800023e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000260 <encoder_measureVelocity+0x48>
 8000242:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000246:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000264 <encoder_measureVelocity+0x4c>
 800024a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800024e:	4b03      	ldr	r3, [pc, #12]	; (800025c <encoder_measureVelocity+0x44>)
 8000250:	edc3 7a00 	vstr	s15, [r3]
}
 8000254:	bf00      	nop
 8000256:	3708      	adds	r7, #8
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	20000028 	.word	0x20000028
 8000260:	47c35000 	.word	0x47c35000
 8000264:	4316cbe4 	.word	0x4316cbe4

08000268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800026c:	4b04      	ldr	r3, [pc, #16]	; (8000280 <__NVIC_GetPriorityGrouping+0x18>)
 800026e:	68db      	ldr	r3, [r3, #12]
 8000270:	0a1b      	lsrs	r3, r3, #8
 8000272:	f003 0307 	and.w	r3, r3, #7
}
 8000276:	4618      	mov	r0, r3
 8000278:	46bd      	mov	sp, r7
 800027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027e:	4770      	bx	lr
 8000280:	e000ed00 	.word	0xe000ed00

08000284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000292:	2b00      	cmp	r3, #0
 8000294:	db0b      	blt.n	80002ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	f003 021f 	and.w	r2, r3, #31
 800029c:	4907      	ldr	r1, [pc, #28]	; (80002bc <__NVIC_EnableIRQ+0x38>)
 800029e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a2:	095b      	lsrs	r3, r3, #5
 80002a4:	2001      	movs	r0, #1
 80002a6:	fa00 f202 	lsl.w	r2, r0, r2
 80002aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002ae:	bf00      	nop
 80002b0:	370c      	adds	r7, #12
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	e000e100 	.word	0xe000e100

080002c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	6039      	str	r1, [r7, #0]
 80002ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	db0a      	blt.n	80002ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d4:	683b      	ldr	r3, [r7, #0]
 80002d6:	b2da      	uxtb	r2, r3
 80002d8:	490c      	ldr	r1, [pc, #48]	; (800030c <__NVIC_SetPriority+0x4c>)
 80002da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002de:	0112      	lsls	r2, r2, #4
 80002e0:	b2d2      	uxtb	r2, r2
 80002e2:	440b      	add	r3, r1
 80002e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002e8:	e00a      	b.n	8000300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	b2da      	uxtb	r2, r3
 80002ee:	4908      	ldr	r1, [pc, #32]	; (8000310 <__NVIC_SetPriority+0x50>)
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	f003 030f 	and.w	r3, r3, #15
 80002f6:	3b04      	subs	r3, #4
 80002f8:	0112      	lsls	r2, r2, #4
 80002fa:	b2d2      	uxtb	r2, r2
 80002fc:	440b      	add	r3, r1
 80002fe:	761a      	strb	r2, [r3, #24]
}
 8000300:	bf00      	nop
 8000302:	370c      	adds	r7, #12
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr
 800030c:	e000e100 	.word	0xe000e100
 8000310:	e000ed00 	.word	0xe000ed00

08000314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000314:	b480      	push	{r7}
 8000316:	b089      	sub	sp, #36	; 0x24
 8000318:	af00      	add	r7, sp, #0
 800031a:	60f8      	str	r0, [r7, #12]
 800031c:	60b9      	str	r1, [r7, #8]
 800031e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	f003 0307 	and.w	r3, r3, #7
 8000326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000328:	69fb      	ldr	r3, [r7, #28]
 800032a:	f1c3 0307 	rsb	r3, r3, #7
 800032e:	2b04      	cmp	r3, #4
 8000330:	bf28      	it	cs
 8000332:	2304      	movcs	r3, #4
 8000334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000336:	69fb      	ldr	r3, [r7, #28]
 8000338:	3304      	adds	r3, #4
 800033a:	2b06      	cmp	r3, #6
 800033c:	d902      	bls.n	8000344 <NVIC_EncodePriority+0x30>
 800033e:	69fb      	ldr	r3, [r7, #28]
 8000340:	3b03      	subs	r3, #3
 8000342:	e000      	b.n	8000346 <NVIC_EncodePriority+0x32>
 8000344:	2300      	movs	r3, #0
 8000346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000348:	f04f 32ff 	mov.w	r2, #4294967295
 800034c:	69bb      	ldr	r3, [r7, #24]
 800034e:	fa02 f303 	lsl.w	r3, r2, r3
 8000352:	43da      	mvns	r2, r3
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	401a      	ands	r2, r3
 8000358:	697b      	ldr	r3, [r7, #20]
 800035a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800035c:	f04f 31ff 	mov.w	r1, #4294967295
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	fa01 f303 	lsl.w	r3, r1, r3
 8000366:	43d9      	mvns	r1, r3
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800036c:	4313      	orrs	r3, r2
         );
}
 800036e:	4618      	mov	r0, r3
 8000370:	3724      	adds	r7, #36	; 0x24
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr

0800037a <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 800037a:	b480      	push	{r7}
 800037c:	b083      	sub	sp, #12
 800037e:	af00      	add	r7, sp, #0
 8000380:	6078      	str	r0, [r7, #4]
 8000382:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800038a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800038e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000392:	683a      	ldr	r2, [r7, #0]
 8000394:	431a      	orrs	r2, r3
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_CFGR2_GCOMP_Pos);
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	691b      	ldr	r3, [r3, #16]
 80003a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003a4:	683a      	ldr	r2, [r7, #0]
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d002      	beq.n	80003b0 <LL_ADC_SetGainCompensation+0x36>
 80003aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80003ae:	e000      	b.n	80003b2 <LL_ADC_SetGainCompensation+0x38>
 80003b0:	2200      	movs	r2, #0
 80003b2:	431a      	orrs	r2, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	611a      	str	r2, [r3, #16]
}
 80003b8:	bf00      	nop
 80003ba:	370c      	adds	r7, #12
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr

080003c4 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b087      	sub	sp, #28
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	60f8      	str	r0, [r7, #12]
 80003cc:	60b9      	str	r1, [r7, #8]
 80003ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	3330      	adds	r3, #48	; 0x30
 80003d4:	461a      	mov	r2, r3
 80003d6:	68bb      	ldr	r3, [r7, #8]
 80003d8:	0a1b      	lsrs	r3, r3, #8
 80003da:	009b      	lsls	r3, r3, #2
 80003dc:	f003 030c 	and.w	r3, r3, #12
 80003e0:	4413      	add	r3, r2
 80003e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	681a      	ldr	r2, [r3, #0]
 80003e8:	68bb      	ldr	r3, [r7, #8]
 80003ea:	f003 031f 	and.w	r3, r3, #31
 80003ee:	211f      	movs	r1, #31
 80003f0:	fa01 f303 	lsl.w	r3, r1, r3
 80003f4:	43db      	mvns	r3, r3
 80003f6:	401a      	ands	r2, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	0e9b      	lsrs	r3, r3, #26
 80003fc:	f003 011f 	and.w	r1, r3, #31
 8000400:	68bb      	ldr	r3, [r7, #8]
 8000402:	f003 031f 	and.w	r3, r3, #31
 8000406:	fa01 f303 	lsl.w	r3, r1, r3
 800040a:	431a      	orrs	r2, r3
 800040c:	697b      	ldr	r3, [r7, #20]
 800040e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000410:	bf00      	nop
 8000412:	371c      	adds	r7, #28
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr

0800041c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800041c:	b480      	push	{r7}
 800041e:	b087      	sub	sp, #28
 8000420:	af00      	add	r7, sp, #0
 8000422:	60f8      	str	r0, [r7, #12]
 8000424:	60b9      	str	r1, [r7, #8]
 8000426:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	3314      	adds	r3, #20
 800042c:	461a      	mov	r2, r3
 800042e:	68bb      	ldr	r3, [r7, #8]
 8000430:	0e5b      	lsrs	r3, r3, #25
 8000432:	009b      	lsls	r3, r3, #2
 8000434:	f003 0304 	and.w	r3, r3, #4
 8000438:	4413      	add	r3, r2
 800043a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800043c:	697b      	ldr	r3, [r7, #20]
 800043e:	681a      	ldr	r2, [r3, #0]
 8000440:	68bb      	ldr	r3, [r7, #8]
 8000442:	0d1b      	lsrs	r3, r3, #20
 8000444:	f003 031f 	and.w	r3, r3, #31
 8000448:	2107      	movs	r1, #7
 800044a:	fa01 f303 	lsl.w	r3, r1, r3
 800044e:	43db      	mvns	r3, r3
 8000450:	401a      	ands	r2, r3
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	0d1b      	lsrs	r3, r3, #20
 8000456:	f003 031f 	and.w	r3, r3, #31
 800045a:	6879      	ldr	r1, [r7, #4]
 800045c:	fa01 f303 	lsl.w	r3, r1, r3
 8000460:	431a      	orrs	r2, r3
 8000462:	697b      	ldr	r3, [r7, #20]
 8000464:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000466:	bf00      	nop
 8000468:	371c      	adds	r7, #28
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
	...

08000474 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	60f8      	str	r0, [r7, #12]
 800047c:	60b9      	str	r1, [r7, #8]
 800047e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4a0f      	ldr	r2, [pc, #60]	; (80004c0 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d10a      	bne.n	800049e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800048e:	68bb      	ldr	r3, [r7, #8]
 8000490:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000494:	431a      	orrs	r2, r3
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 800049c:	e00a      	b.n	80004b4 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80004aa:	43db      	mvns	r3, r3
 80004ac:	401a      	ands	r2, r3
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80004b4:	bf00      	nop
 80004b6:	3714      	adds	r7, #20
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr
 80004c0:	407f0000 	.word	0x407f0000

080004c4 <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_GRP_INJECTED
  *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	691b      	ldr	r3, [r3, #16]
 80004d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80004d6:	f023 0303 	bic.w	r3, r3, #3
 80004da:	683a      	ldr	r2, [r7, #0]
 80004dc:	431a      	orrs	r2, r3
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	611a      	str	r2, [r3, #16]
}
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr

080004ee <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80004ee:	b480      	push	{r7}
 80004f0:	b083      	sub	sp, #12
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	689b      	ldr	r3, [r3, #8]
 80004fa:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80004fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	6093      	str	r3, [r2, #8]
}
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr

08000512 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000512:	b480      	push	{r7}
 8000514:	b083      	sub	sp, #12
 8000516:	af00      	add	r7, sp, #0
 8000518:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	689b      	ldr	r3, [r3, #8]
 800051e:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000522:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000526:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr

0800053a <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 800053a:	b480      	push	{r7}
 800053c:	b083      	sub	sp, #12
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	601a      	str	r2, [r3, #0]
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
	...

0800055c <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	2b01      	cmp	r3, #1
 800056a:	d02e      	beq.n	80005ca <LL_TIM_OC_DisableFast+0x6e>
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	2b04      	cmp	r3, #4
 8000570:	d029      	beq.n	80005c6 <LL_TIM_OC_DisableFast+0x6a>
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	2b10      	cmp	r3, #16
 8000576:	d024      	beq.n	80005c2 <LL_TIM_OC_DisableFast+0x66>
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	2b40      	cmp	r3, #64	; 0x40
 800057c:	d01f      	beq.n	80005be <LL_TIM_OC_DisableFast+0x62>
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000584:	d019      	beq.n	80005ba <LL_TIM_OC_DisableFast+0x5e>
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800058c:	d013      	beq.n	80005b6 <LL_TIM_OC_DisableFast+0x5a>
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000594:	d00d      	beq.n	80005b2 <LL_TIM_OC_DisableFast+0x56>
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800059c:	d007      	beq.n	80005ae <LL_TIM_OC_DisableFast+0x52>
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005a4:	d101      	bne.n	80005aa <LL_TIM_OC_DisableFast+0x4e>
 80005a6:	2308      	movs	r3, #8
 80005a8:	e010      	b.n	80005cc <LL_TIM_OC_DisableFast+0x70>
 80005aa:	2309      	movs	r3, #9
 80005ac:	e00e      	b.n	80005cc <LL_TIM_OC_DisableFast+0x70>
 80005ae:	2307      	movs	r3, #7
 80005b0:	e00c      	b.n	80005cc <LL_TIM_OC_DisableFast+0x70>
 80005b2:	2306      	movs	r3, #6
 80005b4:	e00a      	b.n	80005cc <LL_TIM_OC_DisableFast+0x70>
 80005b6:	2305      	movs	r3, #5
 80005b8:	e008      	b.n	80005cc <LL_TIM_OC_DisableFast+0x70>
 80005ba:	2304      	movs	r3, #4
 80005bc:	e006      	b.n	80005cc <LL_TIM_OC_DisableFast+0x70>
 80005be:	2303      	movs	r3, #3
 80005c0:	e004      	b.n	80005cc <LL_TIM_OC_DisableFast+0x70>
 80005c2:	2302      	movs	r3, #2
 80005c4:	e002      	b.n	80005cc <LL_TIM_OC_DisableFast+0x70>
 80005c6:	2301      	movs	r3, #1
 80005c8:	e000      	b.n	80005cc <LL_TIM_OC_DisableFast+0x70>
 80005ca:	2300      	movs	r3, #0
 80005cc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	3318      	adds	r3, #24
 80005d2:	4619      	mov	r1, r3
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	4a0b      	ldr	r2, [pc, #44]	; (8000604 <LL_TIM_OC_DisableFast+0xa8>)
 80005d8:	5cd3      	ldrb	r3, [r2, r3]
 80005da:	440b      	add	r3, r1
 80005dc:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	4908      	ldr	r1, [pc, #32]	; (8000608 <LL_TIM_OC_DisableFast+0xac>)
 80005e6:	5ccb      	ldrb	r3, [r1, r3]
 80005e8:	4619      	mov	r1, r3
 80005ea:	2304      	movs	r3, #4
 80005ec:	408b      	lsls	r3, r1
 80005ee:	43db      	mvns	r3, r3
 80005f0:	401a      	ands	r2, r3
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	601a      	str	r2, [r3, #0]

}
 80005f6:	bf00      	nop
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	08003788 	.word	0x08003788
 8000608:	08003794 	.word	0x08003794

0800060c <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d02e      	beq.n	800067a <LL_TIM_OC_EnablePreload+0x6e>
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	2b04      	cmp	r3, #4
 8000620:	d029      	beq.n	8000676 <LL_TIM_OC_EnablePreload+0x6a>
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	2b10      	cmp	r3, #16
 8000626:	d024      	beq.n	8000672 <LL_TIM_OC_EnablePreload+0x66>
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	2b40      	cmp	r3, #64	; 0x40
 800062c:	d01f      	beq.n	800066e <LL_TIM_OC_EnablePreload+0x62>
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000634:	d019      	beq.n	800066a <LL_TIM_OC_EnablePreload+0x5e>
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800063c:	d013      	beq.n	8000666 <LL_TIM_OC_EnablePreload+0x5a>
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000644:	d00d      	beq.n	8000662 <LL_TIM_OC_EnablePreload+0x56>
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800064c:	d007      	beq.n	800065e <LL_TIM_OC_EnablePreload+0x52>
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000654:	d101      	bne.n	800065a <LL_TIM_OC_EnablePreload+0x4e>
 8000656:	2308      	movs	r3, #8
 8000658:	e010      	b.n	800067c <LL_TIM_OC_EnablePreload+0x70>
 800065a:	2309      	movs	r3, #9
 800065c:	e00e      	b.n	800067c <LL_TIM_OC_EnablePreload+0x70>
 800065e:	2307      	movs	r3, #7
 8000660:	e00c      	b.n	800067c <LL_TIM_OC_EnablePreload+0x70>
 8000662:	2306      	movs	r3, #6
 8000664:	e00a      	b.n	800067c <LL_TIM_OC_EnablePreload+0x70>
 8000666:	2305      	movs	r3, #5
 8000668:	e008      	b.n	800067c <LL_TIM_OC_EnablePreload+0x70>
 800066a:	2304      	movs	r3, #4
 800066c:	e006      	b.n	800067c <LL_TIM_OC_EnablePreload+0x70>
 800066e:	2303      	movs	r3, #3
 8000670:	e004      	b.n	800067c <LL_TIM_OC_EnablePreload+0x70>
 8000672:	2302      	movs	r3, #2
 8000674:	e002      	b.n	800067c <LL_TIM_OC_EnablePreload+0x70>
 8000676:	2301      	movs	r3, #1
 8000678:	e000      	b.n	800067c <LL_TIM_OC_EnablePreload+0x70>
 800067a:	2300      	movs	r3, #0
 800067c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	3318      	adds	r3, #24
 8000682:	4619      	mov	r1, r3
 8000684:	7bfb      	ldrb	r3, [r7, #15]
 8000686:	4a0a      	ldr	r2, [pc, #40]	; (80006b0 <LL_TIM_OC_EnablePreload+0xa4>)
 8000688:	5cd3      	ldrb	r3, [r2, r3]
 800068a:	440b      	add	r3, r1
 800068c:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	7bfb      	ldrb	r3, [r7, #15]
 8000694:	4907      	ldr	r1, [pc, #28]	; (80006b4 <LL_TIM_OC_EnablePreload+0xa8>)
 8000696:	5ccb      	ldrb	r3, [r1, r3]
 8000698:	4619      	mov	r1, r3
 800069a:	2308      	movs	r3, #8
 800069c:	408b      	lsls	r3, r1
 800069e:	431a      	orrs	r2, r3
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	601a      	str	r2, [r3, #0]
}
 80006a4:	bf00      	nop
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	08003788 	.word	0x08003788
 80006b4:	08003794 	.word	0x08003794

080006b8 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	689b      	ldr	r3, [r3, #8]
 80006c6:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80006ca:	f023 0307 	bic.w	r3, r3, #7
 80006ce:	683a      	ldr	r2, [r7, #0]
 80006d0:	431a      	orrs	r2, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	609a      	str	r2, [r3, #8]
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr

080006e2 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC4REF
  *         @arg @ref LL_TIM_TRGO_ENCODERCLK
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80006e2:	b480      	push	{r7}
 80006e4:	b083      	sub	sp, #12
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
 80006ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80006f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80006f8:	683a      	ldr	r2, [r7, #0]
 80006fa:	431a      	orrs	r2, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	605a      	str	r2, [r3, #4]
}
 8000700:	bf00      	nop
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <LL_TIM_SetTriggerOutput2>:
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_RISING
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	685b      	ldr	r3, [r3, #4]
 800071a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	431a      	orrs	r2, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	605a      	str	r2, [r3, #4]
}
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000732:	b480      	push	{r7}
 8000734:	b083      	sub	sp, #12
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	689b      	ldr	r3, [r3, #8]
 800073e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	609a      	str	r2, [r3, #8]
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
	...

08000754 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000754:	b480      	push	{r7}
 8000756:	b087      	sub	sp, #28
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 800075e:	4a18      	ldr	r2, [pc, #96]	; (80007c0 <LL_SYSCFG_SetEXTISource+0x6c>)
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	f003 0303 	and.w	r3, r3, #3
 8000766:	3302      	adds	r3, #2
 8000768:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	0c1b      	lsrs	r3, r3, #16
 8000770:	43db      	mvns	r3, r3
 8000772:	ea02 0103 	and.w	r1, r2, r3
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	0c1b      	lsrs	r3, r3, #16
 800077a:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800077c:	693b      	ldr	r3, [r7, #16]
 800077e:	fa93 f3a3 	rbit	r3, r3
 8000782:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d101      	bne.n	8000792 <LL_SYSCFG_SetEXTISource+0x3e>
  {
    return 32U;
 800078e:	2320      	movs	r3, #32
 8000790:	e003      	b.n	800079a <LL_SYSCFG_SetEXTISource+0x46>
  }
  return __builtin_clz(value);
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	fab3 f383 	clz	r3, r3
 8000798:	b2db      	uxtb	r3, r3
 800079a:	f003 031f 	and.w	r3, r3, #31
 800079e:	687a      	ldr	r2, [r7, #4]
 80007a0:	409a      	lsls	r2, r3
 80007a2:	4807      	ldr	r0, [pc, #28]	; (80007c0 <LL_SYSCFG_SetEXTISource+0x6c>)
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	f003 0303 	and.w	r3, r3, #3
 80007aa:	430a      	orrs	r2, r1
 80007ac:	3302      	adds	r3, #2
 80007ae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80007b2:	bf00      	nop
 80007b4:	371c      	adds	r7, #28
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	40010000 	.word	0x40010000

080007c4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b08b      	sub	sp, #44	; 0x2c
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	fa93 f3a3 	rbit	r3, r3
 80007de:	613b      	str	r3, [r7, #16]
  return result;
 80007e0:	693b      	ldr	r3, [r7, #16]
 80007e2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d101      	bne.n	80007ee <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80007ea:	2320      	movs	r3, #32
 80007ec:	e003      	b.n	80007f6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80007ee:	69bb      	ldr	r3, [r7, #24]
 80007f0:	fab3 f383 	clz	r3, r3
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	005b      	lsls	r3, r3, #1
 80007f8:	2103      	movs	r1, #3
 80007fa:	fa01 f303 	lsl.w	r3, r1, r3
 80007fe:	43db      	mvns	r3, r3
 8000800:	401a      	ands	r2, r3
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000806:	6a3b      	ldr	r3, [r7, #32]
 8000808:	fa93 f3a3 	rbit	r3, r3
 800080c:	61fb      	str	r3, [r7, #28]
  return result;
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000814:	2b00      	cmp	r3, #0
 8000816:	d101      	bne.n	800081c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000818:	2320      	movs	r3, #32
 800081a:	e003      	b.n	8000824 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800081c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081e:	fab3 f383 	clz	r3, r3
 8000822:	b2db      	uxtb	r3, r3
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	6879      	ldr	r1, [r7, #4]
 8000828:	fa01 f303 	lsl.w	r3, r1, r3
 800082c:	431a      	orrs	r2, r3
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	601a      	str	r2, [r3, #0]
}
 8000832:	bf00      	nop
 8000834:	372c      	adds	r7, #44	; 0x2c
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800083e:	b480      	push	{r7}
 8000840:	b08b      	sub	sp, #44	; 0x2c
 8000842:	af00      	add	r7, sp, #0
 8000844:	60f8      	str	r0, [r7, #12]
 8000846:	60b9      	str	r1, [r7, #8]
 8000848:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	68da      	ldr	r2, [r3, #12]
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	fa93 f3a3 	rbit	r3, r3
 8000858:	613b      	str	r3, [r7, #16]
  return result;
 800085a:	693b      	ldr	r3, [r7, #16]
 800085c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800085e:	69bb      	ldr	r3, [r7, #24]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d101      	bne.n	8000868 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000864:	2320      	movs	r3, #32
 8000866:	e003      	b.n	8000870 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000868:	69bb      	ldr	r3, [r7, #24]
 800086a:	fab3 f383 	clz	r3, r3
 800086e:	b2db      	uxtb	r3, r3
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	2103      	movs	r1, #3
 8000874:	fa01 f303 	lsl.w	r3, r1, r3
 8000878:	43db      	mvns	r3, r3
 800087a:	401a      	ands	r2, r3
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000880:	6a3b      	ldr	r3, [r7, #32]
 8000882:	fa93 f3a3 	rbit	r3, r3
 8000886:	61fb      	str	r3, [r7, #28]
  return result;
 8000888:	69fb      	ldr	r3, [r7, #28]
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800088c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088e:	2b00      	cmp	r3, #0
 8000890:	d101      	bne.n	8000896 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000892:	2320      	movs	r3, #32
 8000894:	e003      	b.n	800089e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000898:	fab3 f383 	clz	r3, r3
 800089c:	b2db      	uxtb	r3, r3
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	6879      	ldr	r1, [r7, #4]
 80008a2:	fa01 f303 	lsl.w	r3, r1, r3
 80008a6:	431a      	orrs	r2, r3
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	60da      	str	r2, [r3, #12]
}
 80008ac:	bf00      	nop
 80008ae:	372c      	adds	r7, #44	; 0x2c
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	683a      	ldr	r2, [r7, #0]
 80008c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80008c8:	bf00      	nop
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80008dc:	4b08      	ldr	r3, [pc, #32]	; (8000900 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80008de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008e0:	4907      	ldr	r1, [pc, #28]	; (8000900 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80008e8:	4b05      	ldr	r3, [pc, #20]	; (8000900 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80008ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4013      	ands	r3, r2
 80008f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008f2:	68fb      	ldr	r3, [r7, #12]
}
 80008f4:	bf00      	nop
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	40021000 	.word	0x40021000

08000904 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <LL_APB1_GRP1_EnableClock+0x2c>)
 800090e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000910:	4907      	ldr	r1, [pc, #28]	; (8000930 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4313      	orrs	r3, r2
 8000916:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <LL_APB1_GRP1_EnableClock+0x2c>)
 800091a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4013      	ands	r3, r2
 8000920:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000922:	68fb      	ldr	r3, [r7, #12]
}
 8000924:	bf00      	nop
 8000926:	3714      	adds	r7, #20
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	40021000 	.word	0x40021000

08000934 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800093c:	4b08      	ldr	r3, [pc, #32]	; (8000960 <LL_APB2_GRP1_EnableClock+0x2c>)
 800093e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000940:	4907      	ldr	r1, [pc, #28]	; (8000960 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4313      	orrs	r3, r2
 8000946:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000948:	4b05      	ldr	r3, [pc, #20]	; (8000960 <LL_APB2_GRP1_EnableClock+0x2c>)
 800094a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4013      	ands	r3, r2
 8000950:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000952:	68fb      	ldr	r3, [r7, #12]
}
 8000954:	bf00      	nop
 8000956:	3714      	adds	r7, #20
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	40021000 	.word	0x40021000

08000964 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000968:	f000 fc57 	bl	800121a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800096c:	f000 f80d 	bl	800098a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000970:	f000 faa6 	bl	8000ec0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000974:	f000 f852 	bl	8000a1c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000978:	f000 f91a 	bl	8000bb0 <MX_ADC2_Init>
  MX_TIM1_Init();
 800097c:	f000 f9c4 	bl	8000d08 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000980:	f000 fa6a 	bl	8000e58 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  //Initialize timers
  timers_init();
 8000984:	f000 fbfc 	bl	8001180 <timers_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000988:	e7fe      	b.n	8000988 <main+0x24>

0800098a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b094      	sub	sp, #80	; 0x50
 800098e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000990:	f107 0318 	add.w	r3, r7, #24
 8000994:	2238      	movs	r2, #56	; 0x38
 8000996:	2100      	movs	r1, #0
 8000998:	4618      	mov	r0, r3
 800099a:	f002 fee1 	bl	8003760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80009ac:	2000      	movs	r0, #0
 80009ae:	f000 fd89 	bl	80014c4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009b2:	2301      	movs	r3, #1
 80009b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009bc:	2302      	movs	r3, #2
 80009be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009c0:	2303      	movs	r3, #3
 80009c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80009c4:	2301      	movs	r3, #1
 80009c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 80009c8:	2314      	movs	r3, #20
 80009ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009cc:	2302      	movs	r3, #2
 80009ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009d0:	2302      	movs	r3, #2
 80009d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009d4:	2302      	movs	r3, #2
 80009d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d8:	f107 0318 	add.w	r3, r7, #24
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 fe25 	bl	800162c <HAL_RCC_OscConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0x62>
  {
    Error_Handler();
 80009e8:	f000 fb0c 	bl	8001004 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ec:	230f      	movs	r3, #15
 80009ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f0:	2303      	movs	r3, #3
 80009f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	2104      	movs	r1, #4
 8000a04:	4618      	mov	r0, r3
 8000a06:	f001 f929 	bl	8001c5c <HAL_RCC_ClockConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000a10:	f000 faf8 	bl	8001004 <Error_Handler>
  }
}
 8000a14:	bf00      	nop
 8000a16:	3750      	adds	r7, #80	; 0x50
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b0a6      	sub	sp, #152	; 0x98
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000a22:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000a2e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
 8000a3c:	611a      	str	r2, [r3, #16]
 8000a3e:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000a40:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
 8000a5c:	611a      	str	r2, [r3, #16]
 8000a5e:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	2244      	movs	r2, #68	; 0x44
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f002 fe7a 	bl	8003760 <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000a6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a70:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000a72:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000a76:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f001 face 	bl	800201c <HAL_RCCEx_PeriphCLKConfig>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000a86:	f000 fabd 	bl	8001004 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC12);
 8000a8a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a8e:	f7ff ff21 	bl	80008d4 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000a92:	2001      	movs	r0, #1
 8000a94:	f7ff ff1e 	bl	80008d4 <LL_AHB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA0   ------> ADC1_IN1
  */
  GPIO_InitStruct.Pin = POT_1_Pin;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	64bb      	str	r3, [r7, #72]	; 0x48
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	65bb      	str	r3, [r7, #88]	; 0x58
  LL_GPIO_Init(POT_1_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aae:	f002 f8ef 	bl	8002c90 <LL_GPIO_Init>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000ac4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000ace:	f001 fcfb 	bl	80024c8 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	673b      	str	r3, [r7, #112]	; 0x70
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	677b      	str	r3, [r7, #116]	; 0x74
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	67bb      	str	r3, [r7, #120]	; 0x78
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8000ade:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ae2:	67fb      	str	r3, [r7, #124]	; 0x7c
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000aea:	2300      	movs	r3, #0
 8000aec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000af0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000af4:	4619      	mov	r1, r3
 8000af6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000afa:	f001 fd0b 	bl	8002514 <LL_ADC_REG_Init>
  LL_ADC_SetGainCompensation(ADC1, 0);
 8000afe:	2100      	movs	r1, #0
 8000b00:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000b04:	f7ff fc39 	bl	800037a <LL_ADC_SetGainCompensation>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 8000b08:	2100      	movs	r1, #0
 8000b0a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000b0e:	f7ff fcd9 	bl	80004c4 <LL_ADC_SetOverSamplingScope>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b12:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000b16:	663b      	str	r3, [r7, #96]	; 0x60
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	667b      	str	r3, [r7, #100]	; 0x64
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000b1c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000b20:	4619      	mov	r1, r3
 8000b22:	481e      	ldr	r0, [pc, #120]	; (8000b9c <MX_ADC1_Init+0x180>)
 8000b24:	f001 fc90 	bl	8002448 <LL_ADC_CommonInit>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 8000b28:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000b2c:	f7ff fcdf 	bl	80004ee <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8000b30:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000b34:	f7ff fced 	bl	8000512 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000b38:	4b19      	ldr	r3, [pc, #100]	; (8000ba0 <MX_ADC1_Init+0x184>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	099b      	lsrs	r3, r3, #6
 8000b3e:	4a19      	ldr	r2, [pc, #100]	; (8000ba4 <MX_ADC1_Init+0x188>)
 8000b40:	fba2 2303 	umull	r2, r3, r2, r3
 8000b44:	099a      	lsrs	r2, r3, #6
 8000b46:	4613      	mov	r3, r2
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	4413      	add	r3, r2
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <MX_ADC1_Init+0x18c>)
 8000b52:	fba3 2302 	umull	r2, r3, r3, r2
 8000b56:	08db      	lsrs	r3, r3, #3
 8000b58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  while(wait_loop_index != 0)
 8000b5c:	e004      	b.n	8000b68 <MX_ADC1_Init+0x14c>
  {
    wait_loop_index--;
 8000b5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000b62:	3b01      	subs	r3, #1
 8000b64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  while(wait_loop_index != 0)
 8000b68:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d1f6      	bne.n	8000b5e <MX_ADC1_Init+0x142>
  }
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8000b70:	4a0e      	ldr	r2, [pc, #56]	; (8000bac <MX_ADC1_Init+0x190>)
 8000b72:	2106      	movs	r1, #6
 8000b74:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000b78:	f7ff fc24 	bl	80003c4 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_640CYCLES_5);
 8000b7c:	2207      	movs	r2, #7
 8000b7e:	490b      	ldr	r1, [pc, #44]	; (8000bac <MX_ADC1_Init+0x190>)
 8000b80:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000b84:	f7ff fc4a 	bl	800041c <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 8000b88:	227f      	movs	r2, #127	; 0x7f
 8000b8a:	4908      	ldr	r1, [pc, #32]	; (8000bac <MX_ADC1_Init+0x190>)
 8000b8c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000b90:	f7ff fc70 	bl	8000474 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b94:	bf00      	nop
 8000b96:	3798      	adds	r7, #152	; 0x98
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	50000300 	.word	0x50000300
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	053e2d63 	.word	0x053e2d63
 8000ba8:	cccccccd 	.word	0xcccccccd
 8000bac:	04300002 	.word	0x04300002

08000bb0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b0a2      	sub	sp, #136	; 0x88
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000bb6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000bc2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	611a      	str	r2, [r3, #16]
 8000bd2:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
 8000be4:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	2244      	movs	r2, #68	; 0x44
 8000bea:	2100      	movs	r1, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f002 fdb7 	bl	8003760 <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000bf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bf6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000bf8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000bfc:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	4618      	mov	r0, r3
 8000c02:	f001 fa0b 	bl	800201c <HAL_RCCEx_PeriphCLKConfig>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_ADC2_Init+0x60>
  {
    Error_Handler();
 8000c0c:	f000 f9fa 	bl	8001004 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC12);
 8000c10:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c14:	f7ff fe5e 	bl	80008d4 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f7ff fe5b 	bl	80008d4 <LL_AHB2_GRP1_EnableClock>
  /**ADC2 GPIO Configuration
  PA1   ------> ADC2_IN2
  */
  GPIO_InitStruct.Pin = POT_2_Pin;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	64bb      	str	r3, [r7, #72]	; 0x48
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000c22:	2303      	movs	r3, #3
 8000c24:	64fb      	str	r3, [r7, #76]	; 0x4c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c26:	2300      	movs	r3, #0
 8000c28:	65bb      	str	r3, [r7, #88]	; 0x58
  LL_GPIO_Init(POT_2_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c2e:	4619      	mov	r1, r3
 8000c30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c34:	f002 f82c 	bl	8002c90 <LL_GPIO_Init>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	67bb      	str	r3, [r7, #120]	; 0x78
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	67fb      	str	r3, [r7, #124]	; 0x7c
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000c40:	2300      	movs	r3, #0
 8000c42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8000c46:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4829      	ldr	r0, [pc, #164]	; (8000cf4 <MX_ADC2_Init+0x144>)
 8000c4e:	f001 fc3b 	bl	80024c8 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000c52:	2300      	movs	r3, #0
 8000c54:	663b      	str	r3, [r7, #96]	; 0x60
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000c56:	2300      	movs	r3, #0
 8000c58:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	66bb      	str	r3, [r7, #104]	; 0x68
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8000c5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c62:	66fb      	str	r3, [r7, #108]	; 0x6c
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	673b      	str	r3, [r7, #112]	; 0x70
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	677b      	str	r3, [r7, #116]	; 0x74
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8000c6c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000c70:	4619      	mov	r1, r3
 8000c72:	4820      	ldr	r0, [pc, #128]	; (8000cf4 <MX_ADC2_Init+0x144>)
 8000c74:	f001 fc4e 	bl	8002514 <LL_ADC_REG_Init>
  LL_ADC_SetGainCompensation(ADC2, 0);
 8000c78:	2100      	movs	r1, #0
 8000c7a:	481e      	ldr	r0, [pc, #120]	; (8000cf4 <MX_ADC2_Init+0x144>)
 8000c7c:	f7ff fb7d 	bl	800037a <LL_ADC_SetGainCompensation>
  LL_ADC_SetOverSamplingScope(ADC2, LL_ADC_OVS_DISABLE);
 8000c80:	2100      	movs	r1, #0
 8000c82:	481c      	ldr	r0, [pc, #112]	; (8000cf4 <MX_ADC2_Init+0x144>)
 8000c84:	f7ff fc1e 	bl	80004c4 <LL_ADC_SetOverSamplingScope>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC2);
 8000c88:	481a      	ldr	r0, [pc, #104]	; (8000cf4 <MX_ADC2_Init+0x144>)
 8000c8a:	f7ff fc30 	bl	80004ee <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC2);
 8000c8e:	4819      	ldr	r0, [pc, #100]	; (8000cf4 <MX_ADC2_Init+0x144>)
 8000c90:	f7ff fc3f 	bl	8000512 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000c94:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <MX_ADC2_Init+0x148>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	099b      	lsrs	r3, r3, #6
 8000c9a:	4a18      	ldr	r2, [pc, #96]	; (8000cfc <MX_ADC2_Init+0x14c>)
 8000c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca0:	099a      	lsrs	r2, r3, #6
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	4413      	add	r3, r2
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	461a      	mov	r2, r3
 8000cac:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <MX_ADC2_Init+0x150>)
 8000cae:	fba3 2302 	umull	r2, r3, r3, r2
 8000cb2:	08db      	lsrs	r3, r3, #3
 8000cb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  while(wait_loop_index != 0)
 8000cb8:	e004      	b.n	8000cc4 <MX_ADC2_Init+0x114>
  {
    wait_loop_index--;
 8000cba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  while(wait_loop_index != 0)
 8000cc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d1f6      	bne.n	8000cba <MX_ADC2_Init+0x10a>
  }
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_2);
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	; (8000d04 <MX_ADC2_Init+0x154>)
 8000cce:	2106      	movs	r1, #6
 8000cd0:	4808      	ldr	r0, [pc, #32]	; (8000cf4 <MX_ADC2_Init+0x144>)
 8000cd2:	f7ff fb77 	bl	80003c4 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_640CYCLES_5);
 8000cd6:	2207      	movs	r2, #7
 8000cd8:	490a      	ldr	r1, [pc, #40]	; (8000d04 <MX_ADC2_Init+0x154>)
 8000cda:	4806      	ldr	r0, [pc, #24]	; (8000cf4 <MX_ADC2_Init+0x144>)
 8000cdc:	f7ff fb9e 	bl	800041c <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_2, LL_ADC_SINGLE_ENDED);
 8000ce0:	227f      	movs	r2, #127	; 0x7f
 8000ce2:	4908      	ldr	r1, [pc, #32]	; (8000d04 <MX_ADC2_Init+0x154>)
 8000ce4:	4803      	ldr	r0, [pc, #12]	; (8000cf4 <MX_ADC2_Init+0x144>)
 8000ce6:	f7ff fbc5 	bl	8000474 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000cea:	bf00      	nop
 8000cec:	3788      	adds	r7, #136	; 0x88
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	50000100 	.word	0x50000100
 8000cf8:	20000000 	.word	0x20000000
 8000cfc:	053e2d63 	.word	0x053e2d63
 8000d00:	cccccccd 	.word	0xcccccccd
 8000d04:	08600004 	.word	0x08600004

08000d08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b0a0      	sub	sp, #128	; 0x80
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000d0e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]
 8000d1c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000d1e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d22:	2220      	movs	r2, #32
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f002 fd1a 	bl	8003760 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8000d2c:	f107 031c 	add.w	r3, r7, #28
 8000d30:	2230      	movs	r2, #48	; 0x30
 8000d32:	2100      	movs	r1, #0
 8000d34:	4618      	mov	r0, r3
 8000d36:	f002 fd13 	bl	8003760 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
 8000d48:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8000d4a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000d4e:	f7ff fdf1 	bl	8000934 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	673b      	str	r3, [r7, #112]	; 0x70
  TIM_InitStruct.Autoreload = 8000;
 8000d5c:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8000d60:	677b      	str	r3, [r7, #116]	; 0x74
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000d62:	2300      	movs	r3, #0
 8000d64:	67bb      	str	r3, [r7, #120]	; 0x78
  TIM_InitStruct.RepetitionCounter = 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	67fb      	str	r3, [r7, #124]	; 0x7c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000d6a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4838      	ldr	r0, [pc, #224]	; (8000e54 <MX_TIM1_Init+0x14c>)
 8000d72:	f002 f88b 	bl	8002e8c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8000d76:	4837      	ldr	r0, [pc, #220]	; (8000e54 <MX_TIM1_Init+0x14c>)
 8000d78:	f7ff fbdf 	bl	800053a <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4835      	ldr	r0, [pc, #212]	; (8000e54 <MX_TIM1_Init+0x14c>)
 8000d80:	f7ff fc9a 	bl	80006b8 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8000d84:	2101      	movs	r1, #1
 8000d86:	4833      	ldr	r0, [pc, #204]	; (8000e54 <MX_TIM1_Init+0x14c>)
 8000d88:	f7ff fc40 	bl	800060c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000d8c:	2360      	movs	r3, #96	; 0x60
 8000d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000d90:	2300      	movs	r3, #0
 8000d92:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000d94:	2300      	movs	r3, #0
 8000d96:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_OC_InitStruct.CompareValue = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000da0:	2300      	movs	r3, #0
 8000da2:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	667b      	str	r3, [r7, #100]	; 0x64
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000da8:	2300      	movs	r3, #0
 8000daa:	66bb      	str	r3, [r7, #104]	; 0x68
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000dac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000db0:	461a      	mov	r2, r3
 8000db2:	2101      	movs	r1, #1
 8000db4:	4827      	ldr	r0, [pc, #156]	; (8000e54 <MX_TIM1_Init+0x14c>)
 8000db6:	f002 f8f3 	bl	8002fa0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8000dba:	2101      	movs	r1, #1
 8000dbc:	4825      	ldr	r0, [pc, #148]	; (8000e54 <MX_TIM1_Init+0x14c>)
 8000dbe:	f7ff fbcd 	bl	800055c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4823      	ldr	r0, [pc, #140]	; (8000e54 <MX_TIM1_Init+0x14c>)
 8000dc6:	f7ff fc8c 	bl	80006e2 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4821      	ldr	r0, [pc, #132]	; (8000e54 <MX_TIM1_Init+0x14c>)
 8000dce:	f7ff fc9d 	bl	800070c <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8000dd2:	4820      	ldr	r0, [pc, #128]	; (8000e54 <MX_TIM1_Init+0x14c>)
 8000dd4:	f7ff fcad 	bl	8000732 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8000de0:	2300      	movs	r3, #0
 8000de2:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8000dea:	2300      	movs	r3, #0
 8000dec:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8000dee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 8000df4:	2300      	movs	r3, #0
 8000df6:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_BDTRInitStruct.BreakAFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 8000e00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e04:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 8000e06:	2300      	movs	r3, #0
 8000e08:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_BDTRInitStruct.Break2AFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8000e12:	f107 031c 	add.w	r3, r7, #28
 8000e16:	4619      	mov	r1, r3
 8000e18:	480e      	ldr	r0, [pc, #56]	; (8000e54 <MX_TIM1_Init+0x14c>)
 8000e1a:	f002 f921 	bl	8003060 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f7ff fd58 	bl	80008d4 <LL_AHB2_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA8   ------> TIM1_CH1
  */
  GPIO_InitStruct.Pin = SILNIK_PWM_Pin;
 8000e24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e28:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8000e3a:	2306      	movs	r3, #6
 8000e3c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(SILNIK_PWM_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	4619      	mov	r1, r3
 8000e42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e46:	f001 ff23 	bl	8002c90 <LL_GPIO_Init>

}
 8000e4a:	bf00      	nop
 8000e4c:	3780      	adds	r7, #128	; 0x80
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40012c00 	.word	0x40012c00

08000e58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	f7ff fd49 	bl	8000904 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 1599;
 8000e72:	f240 633f 	movw	r3, #1599	; 0x63f
 8000e76:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 1.0E8;
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <MX_TIM2_Init+0x64>)
 8000e7e:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000e80:	2300      	movs	r3, #0
 8000e82:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	4619      	mov	r1, r3
 8000e88:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e8c:	f001 fffe 	bl	8002e8c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8000e90:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e94:	f7ff fb51 	bl	800053a <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000e98:	2100      	movs	r1, #0
 8000e9a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e9e:	f7ff fc0b 	bl	80006b8 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ea8:	f7ff fc1b 	bl	80006e2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8000eac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000eb0:	f7ff fc3f 	bl	8000732 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000eb4:	bf00      	nop
 8000eb6:	3718      	adds	r7, #24
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	05f5e100 	.word	0x05f5e100

08000ec0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	; 0x28
 8000ec4:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000ec6:	f107 031c 	add.w	r3, r7, #28
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
 8000ee0:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8000ee2:	2020      	movs	r0, #32
 8000ee4:	f7ff fcf6 	bl	80008d4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f7ff fcf3 	bl	80008d4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000eee:	2002      	movs	r0, #2
 8000ef0:	f7ff fcf0 	bl	80008d4 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_EN_GPIO_Port, LED_EN_Pin);
 8000ef4:	2110      	movs	r1, #16
 8000ef6:	4842      	ldr	r0, [pc, #264]	; (8001000 <MX_GPIO_Init+0x140>)
 8000ef8:	f7ff fcde 	bl	80008b8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE2);
 8000efc:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8000f00:	2000      	movs	r0, #0
 8000f02:	f7ff fc27 	bl	8000754 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE3);
 8000f06:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	f7ff fc22 	bl	8000754 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8000f10:	2304      	movs	r3, #4
 8000f12:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000f14:	2301      	movs	r3, #1
 8000f16:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8000f20:	2303      	movs	r3, #3
 8000f22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000f26:	f107 031c 	add.w	r3, r7, #28
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f001 fc6c 	bl	8002808 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8000f30:	2308      	movs	r3, #8
 8000f32:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000f34:	2301      	movs	r3, #1
 8000f36:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000f40:	2301      	movs	r3, #1
 8000f42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000f46:	f107 031c 	add.w	r3, r7, #28
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f001 fc5c 	bl	8002808 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(ENC_GPIO_Port, ENC_Pin, LL_GPIO_PULL_NO);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2104      	movs	r1, #4
 8000f54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f58:	f7ff fc71 	bl	800083e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_3, LL_GPIO_PULL_NO);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2108      	movs	r1, #8
 8000f60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f64:	f7ff fc6b 	bl	800083e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(ENC_GPIO_Port, ENC_Pin, LL_GPIO_MODE_INPUT);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2104      	movs	r1, #4
 8000f6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f70:	f7ff fc28 	bl	80007c4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_3, LL_GPIO_MODE_INPUT);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2108      	movs	r1, #8
 8000f78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7c:	f7ff fc22 	bl	80007c4 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = ON_OFF_Pin;
 8000f80:	2310      	movs	r3, #16
 8000f82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f94:	f001 fe7c 	bl	8002c90 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_EN_Pin;
 8000f98:	2310      	movs	r3, #16
 8000f9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LED_EN_GPIO_Port, &GPIO_InitStruct);
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4813      	ldr	r0, [pc, #76]	; (8001000 <MX_GPIO_Init+0x140>)
 8000fb2:	f001 fe6d 	bl	8002c90 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000fb6:	f7ff f957 	bl	8000268 <__NVIC_GetPriorityGrouping>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff f9a7 	bl	8000314 <NVIC_EncodePriority>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	4619      	mov	r1, r3
 8000fca:	2008      	movs	r0, #8
 8000fcc:	f7ff f978 	bl	80002c0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8000fd0:	2008      	movs	r0, #8
 8000fd2:	f7ff f957 	bl	8000284 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000fd6:	f7ff f947 	bl	8000268 <__NVIC_GetPriorityGrouping>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff f997 	bl	8000314 <NVIC_EncodePriority>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	4619      	mov	r1, r3
 8000fea:	2009      	movs	r0, #9
 8000fec:	f7ff f968 	bl	80002c0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 8000ff0:	2009      	movs	r0, #9
 8000ff2:	f7ff f947 	bl	8000284 <__NVIC_EnableIRQ>

}
 8000ff6:	bf00      	nop
 8000ff8:	3728      	adds	r7, #40	; 0x28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	48000400 	.word	0x48000400

08001004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001008:	b672      	cpsid	i
}
 800100a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800100c:	e7fe      	b.n	800100c <Error_Handler+0x8>
	...

08001010 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001016:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <HAL_MspInit+0x44>)
 8001018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800101a:	4a0e      	ldr	r2, [pc, #56]	; (8001054 <HAL_MspInit+0x44>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6613      	str	r3, [r2, #96]	; 0x60
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <HAL_MspInit+0x44>)
 8001024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <HAL_MspInit+0x44>)
 8001030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001032:	4a08      	ldr	r2, [pc, #32]	; (8001054 <HAL_MspInit+0x44>)
 8001034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001038:	6593      	str	r3, [r2, #88]	; 0x58
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_MspInit+0x44>)
 800103c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001046:	f000 fae1 	bl	800160c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40021000 	.word	0x40021000

08001058 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001060:	4a04      	ldr	r2, [pc, #16]	; (8001074 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6153      	str	r3, [r2, #20]
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40010400 	.word	0x40010400

08001078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800107c:	e7fe      	b.n	800107c <NMI_Handler+0x4>

0800107e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001082:	e7fe      	b.n	8001082 <HardFault_Handler+0x4>

08001084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <MemManage_Handler+0x4>

0800108a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800108e:	e7fe      	b.n	800108e <BusFault_Handler+0x4>

08001090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <UsageFault_Handler+0x4>

08001096 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c4:	f000 f8fc 	bl	80012c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}

080010cc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	encoder_measureVelocity();
 80010d0:	f7ff f8a2 	bl	8000218 <encoder_measureVelocity>

  /* USER CODE END EXTI2_IRQn 0 */
  /* USER CODE BEGIN EXTI2_IRQn 1 */
	LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 80010d4:	2004      	movs	r0, #4
 80010d6:	f7ff ffbf 	bl	8001058 <LL_EXTI_ClearFlag_0_31>

  /* USER CODE END EXTI2_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}

080010de <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  /* USER CODE BEGIN EXTI3_IRQn 1 */
	LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 80010e2:	2008      	movs	r0, #8
 80010e4:	f7ff ffb8 	bl	8001058 <LL_EXTI_ClearFlag_0_31>

  /* USER CODE END EXTI3_IRQn 1 */
}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}

080010ec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <SystemInit+0x20>)
 80010f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010f6:	4a05      	ldr	r2, [pc, #20]	; (800110c <SystemInit+0x20>)
 80010f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <LL_TIM_EnableCounter>:
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f043 0201 	orr.w	r2, r3, #1
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	601a      	str	r2, [r3, #0]
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <LL_TIM_SetCounter>:
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	683a      	ldr	r2, [r7, #0]
 800113e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <LL_TIM_GetCounter>:
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001158:	4618      	mov	r0, r3
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <LL_TIM_OC_SetCompareCH1>:
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <timers_init>:
#define PWM_MAX 		8000


//Initialization of timer perypherial (called once at the begining)
void timers_init()
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	LL_TIM_OC_SetCompareCH1(timerPWM,0);
 8001184:	2100      	movs	r1, #0
 8001186:	4806      	ldr	r0, [pc, #24]	; (80011a0 <timers_init+0x20>)
 8001188:	f7ff ffec 	bl	8001164 <LL_TIM_OC_SetCompareCH1>
	LL_TIM_EnableCounter(timerPWM);
 800118c:	4804      	ldr	r0, [pc, #16]	; (80011a0 <timers_init+0x20>)
 800118e:	f7ff ffbf 	bl	8001110 <LL_TIM_EnableCounter>
	LL_TIM_EnableCounter(timerVelocity);
 8001192:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001196:	f7ff ffbb 	bl	8001110 <LL_TIM_EnableCounter>
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40012c00 	.word	0x40012c00

080011a4 <timers_getVelocityTimer>:
}


//Gets current velocity counter value
uint32_t timers_getVelocityTimer()
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
	return LL_TIM_GetCounter(timerVelocity);
 80011a8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80011ac:	f7ff ffce 	bl	800114c <LL_TIM_GetCounter>
 80011b0:	4603      	mov	r3, r0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <timers_resetVeloctiyTimer>:

//Resets current velocity counter value
void timers_resetVeloctiyTimer()
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	af00      	add	r7, sp, #0
	LL_TIM_SetCounter(timerVelocity,0);
 80011ba:	2100      	movs	r1, #0
 80011bc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80011c0:	f7ff ffb6 	bl	8001130 <LL_TIM_SetCounter>
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011c8:	480d      	ldr	r0, [pc, #52]	; (8001200 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011ca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011cc:	480d      	ldr	r0, [pc, #52]	; (8001204 <LoopForever+0x6>)
  ldr r1, =_edata
 80011ce:	490e      	ldr	r1, [pc, #56]	; (8001208 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011d0:	4a0e      	ldr	r2, [pc, #56]	; (800120c <LoopForever+0xe>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80011d4:	e002      	b.n	80011dc <LoopCopyDataInit>

080011d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011da:	3304      	adds	r3, #4

080011dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e0:	d3f9      	bcc.n	80011d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e2:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011e4:	4c0b      	ldr	r4, [pc, #44]	; (8001214 <LoopForever+0x16>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e8:	e001      	b.n	80011ee <LoopFillZerobss>

080011ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ec:	3204      	adds	r2, #4

080011ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f0:	d3fb      	bcc.n	80011ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011f2:	f7ff ff7b 	bl	80010ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011f6:	f002 fa8f 	bl	8003718 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011fa:	f7ff fbb3 	bl	8000964 <main>

080011fe <LoopForever>:

LoopForever:
    b LoopForever
 80011fe:	e7fe      	b.n	80011fe <LoopForever>
  ldr   r0, =_estack
 8001200:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001208:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800120c:	080037b8 	.word	0x080037b8
  ldr r2, =_sbss
 8001210:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001214:	20000030 	.word	0x20000030

08001218 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001218:	e7fe      	b.n	8001218 <ADC1_2_IRQHandler>

0800121a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001220:	2300      	movs	r3, #0
 8001222:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001224:	2003      	movs	r0, #3
 8001226:	f000 f91b 	bl	8001460 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800122a:	200f      	movs	r0, #15
 800122c:	f000 f80e 	bl	800124c <HAL_InitTick>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d002      	beq.n	800123c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	71fb      	strb	r3, [r7, #7]
 800123a:	e001      	b.n	8001240 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800123c:	f7ff fee8 	bl	8001010 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001240:	79fb      	ldrb	r3, [r7, #7]

}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001254:	2300      	movs	r3, #0
 8001256:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001258:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <HAL_InitTick+0x68>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d022      	beq.n	80012a6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001260:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <HAL_InitTick+0x6c>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <HAL_InitTick+0x68>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800126c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001270:	fbb2 f3f3 	udiv	r3, r2, r3
 8001274:	4618      	mov	r0, r3
 8001276:	f000 f918 	bl	80014aa <HAL_SYSTICK_Config>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d10f      	bne.n	80012a0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2b0f      	cmp	r3, #15
 8001284:	d809      	bhi.n	800129a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001286:	2200      	movs	r2, #0
 8001288:	6879      	ldr	r1, [r7, #4]
 800128a:	f04f 30ff 	mov.w	r0, #4294967295
 800128e:	f000 f8f2 	bl	8001476 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001292:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <HAL_InitTick+0x70>)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	e007      	b.n	80012aa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	73fb      	strb	r3, [r7, #15]
 800129e:	e004      	b.n	80012aa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	73fb      	strb	r3, [r7, #15]
 80012a4:	e001      	b.n	80012aa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000008 	.word	0x20000008
 80012b8:	20000000 	.word	0x20000000
 80012bc:	20000004 	.word	0x20000004

080012c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <HAL_IncTick+0x1c>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <HAL_IncTick+0x20>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4413      	add	r3, r2
 80012ce:	4a03      	ldr	r2, [pc, #12]	; (80012dc <HAL_IncTick+0x1c>)
 80012d0:	6013      	str	r3, [r2, #0]
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	2000002c 	.word	0x2000002c
 80012e0:	20000008 	.word	0x20000008

080012e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return uwTick;
 80012e8:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <HAL_GetTick+0x14>)
 80012ea:	681b      	ldr	r3, [r3, #0]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	2000002c 	.word	0x2000002c

080012fc <__NVIC_SetPriorityGrouping>:
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <__NVIC_SetPriorityGrouping+0x44>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001318:	4013      	ands	r3, r2
 800131a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001324:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800132c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800132e:	4a04      	ldr	r2, [pc, #16]	; (8001340 <__NVIC_SetPriorityGrouping+0x44>)
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	60d3      	str	r3, [r2, #12]
}
 8001334:	bf00      	nop
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <__NVIC_GetPriorityGrouping>:
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001348:	4b04      	ldr	r3, [pc, #16]	; (800135c <__NVIC_GetPriorityGrouping+0x18>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	0a1b      	lsrs	r3, r3, #8
 800134e:	f003 0307 	and.w	r3, r3, #7
}
 8001352:	4618      	mov	r0, r3
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <__NVIC_SetPriority>:
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	6039      	str	r1, [r7, #0]
 800136a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001370:	2b00      	cmp	r3, #0
 8001372:	db0a      	blt.n	800138a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	b2da      	uxtb	r2, r3
 8001378:	490c      	ldr	r1, [pc, #48]	; (80013ac <__NVIC_SetPriority+0x4c>)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	0112      	lsls	r2, r2, #4
 8001380:	b2d2      	uxtb	r2, r2
 8001382:	440b      	add	r3, r1
 8001384:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001388:	e00a      	b.n	80013a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	b2da      	uxtb	r2, r3
 800138e:	4908      	ldr	r1, [pc, #32]	; (80013b0 <__NVIC_SetPriority+0x50>)
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	f003 030f 	and.w	r3, r3, #15
 8001396:	3b04      	subs	r3, #4
 8001398:	0112      	lsls	r2, r2, #4
 800139a:	b2d2      	uxtb	r2, r2
 800139c:	440b      	add	r3, r1
 800139e:	761a      	strb	r2, [r3, #24]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000e100 	.word	0xe000e100
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <NVIC_EncodePriority>:
{
 80013b4:	b480      	push	{r7}
 80013b6:	b089      	sub	sp, #36	; 0x24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	f1c3 0307 	rsb	r3, r3, #7
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	bf28      	it	cs
 80013d2:	2304      	movcs	r3, #4
 80013d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3304      	adds	r3, #4
 80013da:	2b06      	cmp	r3, #6
 80013dc:	d902      	bls.n	80013e4 <NVIC_EncodePriority+0x30>
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3b03      	subs	r3, #3
 80013e2:	e000      	b.n	80013e6 <NVIC_EncodePriority+0x32>
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43da      	mvns	r2, r3
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	401a      	ands	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	fa01 f303 	lsl.w	r3, r1, r3
 8001406:	43d9      	mvns	r1, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	4313      	orrs	r3, r2
}
 800140e:	4618      	mov	r0, r3
 8001410:	3724      	adds	r7, #36	; 0x24
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3b01      	subs	r3, #1
 8001428:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800142c:	d301      	bcc.n	8001432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800142e:	2301      	movs	r3, #1
 8001430:	e00f      	b.n	8001452 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001432:	4a0a      	ldr	r2, [pc, #40]	; (800145c <SysTick_Config+0x40>)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143a:	210f      	movs	r1, #15
 800143c:	f04f 30ff 	mov.w	r0, #4294967295
 8001440:	f7ff ff8e 	bl	8001360 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001444:	4b05      	ldr	r3, [pc, #20]	; (800145c <SysTick_Config+0x40>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144a:	4b04      	ldr	r3, [pc, #16]	; (800145c <SysTick_Config+0x40>)
 800144c:	2207      	movs	r2, #7
 800144e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	e000e010 	.word	0xe000e010

08001460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff ff47 	bl	80012fc <__NVIC_SetPriorityGrouping>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b086      	sub	sp, #24
 800147a:	af00      	add	r7, sp, #0
 800147c:	4603      	mov	r3, r0
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
 8001482:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001484:	f7ff ff5e 	bl	8001344 <__NVIC_GetPriorityGrouping>
 8001488:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	68b9      	ldr	r1, [r7, #8]
 800148e:	6978      	ldr	r0, [r7, #20]
 8001490:	f7ff ff90 	bl	80013b4 <NVIC_EncodePriority>
 8001494:	4602      	mov	r2, r0
 8001496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149a:	4611      	mov	r1, r2
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff5f 	bl	8001360 <__NVIC_SetPriority>
}
 80014a2:	bf00      	nop
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff ffb2 	bl	800141c <SysTick_Config>
 80014b8:	4603      	mov	r3, r0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d141      	bne.n	8001556 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014d2:	4b4b      	ldr	r3, [pc, #300]	; (8001600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014de:	d131      	bne.n	8001544 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014e0:	4b47      	ldr	r3, [pc, #284]	; (8001600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014e6:	4a46      	ldr	r2, [pc, #280]	; (8001600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014f0:	4b43      	ldr	r3, [pc, #268]	; (8001600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014f8:	4a41      	ldr	r2, [pc, #260]	; (8001600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001500:	4b40      	ldr	r3, [pc, #256]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2232      	movs	r2, #50	; 0x32
 8001506:	fb02 f303 	mul.w	r3, r2, r3
 800150a:	4a3f      	ldr	r2, [pc, #252]	; (8001608 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800150c:	fba2 2303 	umull	r2, r3, r2, r3
 8001510:	0c9b      	lsrs	r3, r3, #18
 8001512:	3301      	adds	r3, #1
 8001514:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001516:	e002      	b.n	800151e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	3b01      	subs	r3, #1
 800151c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800151e:	4b38      	ldr	r3, [pc, #224]	; (8001600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800152a:	d102      	bne.n	8001532 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f2      	bne.n	8001518 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001532:	4b33      	ldr	r3, [pc, #204]	; (8001600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800153a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800153e:	d158      	bne.n	80015f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e057      	b.n	80015f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001544:	4b2e      	ldr	r3, [pc, #184]	; (8001600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001546:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800154a:	4a2d      	ldr	r2, [pc, #180]	; (8001600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800154c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001550:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001554:	e04d      	b.n	80015f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800155c:	d141      	bne.n	80015e2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800155e:	4b28      	ldr	r3, [pc, #160]	; (8001600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800156a:	d131      	bne.n	80015d0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800156c:	4b24      	ldr	r3, [pc, #144]	; (8001600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800156e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001572:	4a23      	ldr	r2, [pc, #140]	; (8001600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001578:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800157c:	4b20      	ldr	r3, [pc, #128]	; (8001600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001584:	4a1e      	ldr	r2, [pc, #120]	; (8001600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001586:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800158a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800158c:	4b1d      	ldr	r3, [pc, #116]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2232      	movs	r2, #50	; 0x32
 8001592:	fb02 f303 	mul.w	r3, r2, r3
 8001596:	4a1c      	ldr	r2, [pc, #112]	; (8001608 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001598:	fba2 2303 	umull	r2, r3, r2, r3
 800159c:	0c9b      	lsrs	r3, r3, #18
 800159e:	3301      	adds	r3, #1
 80015a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015a2:	e002      	b.n	80015aa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015b6:	d102      	bne.n	80015be <HAL_PWREx_ControlVoltageScaling+0xfa>
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f2      	bne.n	80015a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ca:	d112      	bne.n	80015f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e011      	b.n	80015f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015d0:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015d6:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80015e0:	e007      	b.n	80015f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015e2:	4b07      	ldr	r3, [pc, #28]	; (8001600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015ea:	4a05      	ldr	r2, [pc, #20]	; (8001600 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015f0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	40007000 	.word	0x40007000
 8001604:	20000000 	.word	0x20000000
 8001608:	431bde83 	.word	0x431bde83

0800160c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001610:	4b05      	ldr	r3, [pc, #20]	; (8001628 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	4a04      	ldr	r2, [pc, #16]	; (8001628 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001616:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800161a:	6093      	str	r3, [r2, #8]
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	40007000 	.word	0x40007000

0800162c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e308      	b.n	8001c50 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	d075      	beq.n	8001736 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800164a:	4ba3      	ldr	r3, [pc, #652]	; (80018d8 <HAL_RCC_OscConfig+0x2ac>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 030c 	and.w	r3, r3, #12
 8001652:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001654:	4ba0      	ldr	r3, [pc, #640]	; (80018d8 <HAL_RCC_OscConfig+0x2ac>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	2b0c      	cmp	r3, #12
 8001662:	d102      	bne.n	800166a <HAL_RCC_OscConfig+0x3e>
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	2b03      	cmp	r3, #3
 8001668:	d002      	beq.n	8001670 <HAL_RCC_OscConfig+0x44>
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	2b08      	cmp	r3, #8
 800166e:	d10b      	bne.n	8001688 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001670:	4b99      	ldr	r3, [pc, #612]	; (80018d8 <HAL_RCC_OscConfig+0x2ac>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d05b      	beq.n	8001734 <HAL_RCC_OscConfig+0x108>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d157      	bne.n	8001734 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e2e3      	b.n	8001c50 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001690:	d106      	bne.n	80016a0 <HAL_RCC_OscConfig+0x74>
 8001692:	4b91      	ldr	r3, [pc, #580]	; (80018d8 <HAL_RCC_OscConfig+0x2ac>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a90      	ldr	r2, [pc, #576]	; (80018d8 <HAL_RCC_OscConfig+0x2ac>)
 8001698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	e01d      	b.n	80016dc <HAL_RCC_OscConfig+0xb0>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016a8:	d10c      	bne.n	80016c4 <HAL_RCC_OscConfig+0x98>
 80016aa:	4b8b      	ldr	r3, [pc, #556]	; (80018d8 <HAL_RCC_OscConfig+0x2ac>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a8a      	ldr	r2, [pc, #552]	; (80018d8 <HAL_RCC_OscConfig+0x2ac>)
 80016b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	4b88      	ldr	r3, [pc, #544]	; (80018d8 <HAL_RCC_OscConfig+0x2ac>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a87      	ldr	r2, [pc, #540]	; (80018d8 <HAL_RCC_OscConfig+0x2ac>)
 80016bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	e00b      	b.n	80016dc <HAL_RCC_OscConfig+0xb0>
 80016c4:	4b84      	ldr	r3, [pc, #528]	; (80018d8 <HAL_RCC_OscConfig+0x2ac>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a83      	ldr	r2, [pc, #524]	; (80018d8 <HAL_RCC_OscConfig+0x2ac>)
 80016ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ce:	6013      	str	r3, [r2, #0]
 80016d0:	4b81      	ldr	r3, [pc, #516]	; (80018d8 <HAL_RCC_OscConfig+0x2ac>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a80      	ldr	r2, [pc, #512]	; (80018d8 <HAL_RCC_OscConfig+0x2ac>)
 80016d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d013      	beq.n	800170c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e4:	f7ff fdfe 	bl	80012e4 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ec:	f7ff fdfa 	bl	80012e4 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b64      	cmp	r3, #100	; 0x64
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e2a8      	b.n	8001c50 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016fe:	4b76      	ldr	r3, [pc, #472]	; (80018d8 <HAL_RCC_OscConfig+0x2ac>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0f0      	beq.n	80016ec <HAL_RCC_OscConfig+0xc0>
 800170a:	e014      	b.n	8001736 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170c:	f7ff fdea 	bl	80012e4 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001714:	f7ff fde6 	bl	80012e4 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b64      	cmp	r3, #100	; 0x64
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e294      	b.n	8001c50 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001726:	4b6c      	ldr	r3, [pc, #432]	; (80018d8 <HAL_RCC_OscConfig+0x2ac>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1f0      	bne.n	8001714 <HAL_RCC_OscConfig+0xe8>
 8001732:	e000      	b.n	8001736 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d075      	beq.n	800182e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001742:	4b65      	ldr	r3, [pc, #404]	; (80018d8 <HAL_RCC_OscConfig+0x2ac>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 030c 	and.w	r3, r3, #12
 800174a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800174c:	4b62      	ldr	r3, [pc, #392]	; (80018d8 <HAL_RCC_OscConfig+0x2ac>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	f003 0303 	and.w	r3, r3, #3
 8001754:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	2b0c      	cmp	r3, #12
 800175a:	d102      	bne.n	8001762 <HAL_RCC_OscConfig+0x136>
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d002      	beq.n	8001768 <HAL_RCC_OscConfig+0x13c>
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	2b04      	cmp	r3, #4
 8001766:	d11f      	bne.n	80017a8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001768:	4b5b      	ldr	r3, [pc, #364]	; (80018d8 <HAL_RCC_OscConfig+0x2ac>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001770:	2b00      	cmp	r3, #0
 8001772:	d005      	beq.n	8001780 <HAL_RCC_OscConfig+0x154>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d101      	bne.n	8001780 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e267      	b.n	8001c50 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001780:	4b55      	ldr	r3, [pc, #340]	; (80018d8 <HAL_RCC_OscConfig+0x2ac>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	061b      	lsls	r3, r3, #24
 800178e:	4952      	ldr	r1, [pc, #328]	; (80018d8 <HAL_RCC_OscConfig+0x2ac>)
 8001790:	4313      	orrs	r3, r2
 8001792:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001794:	4b51      	ldr	r3, [pc, #324]	; (80018dc <HAL_RCC_OscConfig+0x2b0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fd57 	bl	800124c <HAL_InitTick>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d043      	beq.n	800182c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e253      	b.n	8001c50 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d023      	beq.n	80017f8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017b0:	4b49      	ldr	r3, [pc, #292]	; (80018d8 <HAL_RCC_OscConfig+0x2ac>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a48      	ldr	r2, [pc, #288]	; (80018d8 <HAL_RCC_OscConfig+0x2ac>)
 80017b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017bc:	f7ff fd92 	bl	80012e4 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017c4:	f7ff fd8e 	bl	80012e4 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e23c      	b.n	8001c50 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017d6:	4b40      	ldr	r3, [pc, #256]	; (80018d8 <HAL_RCC_OscConfig+0x2ac>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0f0      	beq.n	80017c4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e2:	4b3d      	ldr	r3, [pc, #244]	; (80018d8 <HAL_RCC_OscConfig+0x2ac>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	061b      	lsls	r3, r3, #24
 80017f0:	4939      	ldr	r1, [pc, #228]	; (80018d8 <HAL_RCC_OscConfig+0x2ac>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	604b      	str	r3, [r1, #4]
 80017f6:	e01a      	b.n	800182e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017f8:	4b37      	ldr	r3, [pc, #220]	; (80018d8 <HAL_RCC_OscConfig+0x2ac>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a36      	ldr	r2, [pc, #216]	; (80018d8 <HAL_RCC_OscConfig+0x2ac>)
 80017fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001802:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001804:	f7ff fd6e 	bl	80012e4 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800180c:	f7ff fd6a 	bl	80012e4 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e218      	b.n	8001c50 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800181e:	4b2e      	ldr	r3, [pc, #184]	; (80018d8 <HAL_RCC_OscConfig+0x2ac>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1f0      	bne.n	800180c <HAL_RCC_OscConfig+0x1e0>
 800182a:	e000      	b.n	800182e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800182c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	2b00      	cmp	r3, #0
 8001838:	d03c      	beq.n	80018b4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d01c      	beq.n	800187c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001842:	4b25      	ldr	r3, [pc, #148]	; (80018d8 <HAL_RCC_OscConfig+0x2ac>)
 8001844:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001848:	4a23      	ldr	r2, [pc, #140]	; (80018d8 <HAL_RCC_OscConfig+0x2ac>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001852:	f7ff fd47 	bl	80012e4 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800185a:	f7ff fd43 	bl	80012e4 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e1f1      	b.n	8001c50 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800186c:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <HAL_RCC_OscConfig+0x2ac>)
 800186e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d0ef      	beq.n	800185a <HAL_RCC_OscConfig+0x22e>
 800187a:	e01b      	b.n	80018b4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800187c:	4b16      	ldr	r3, [pc, #88]	; (80018d8 <HAL_RCC_OscConfig+0x2ac>)
 800187e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001882:	4a15      	ldr	r2, [pc, #84]	; (80018d8 <HAL_RCC_OscConfig+0x2ac>)
 8001884:	f023 0301 	bic.w	r3, r3, #1
 8001888:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800188c:	f7ff fd2a 	bl	80012e4 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001894:	f7ff fd26 	bl	80012e4 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e1d4      	b.n	8001c50 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018a6:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <HAL_RCC_OscConfig+0x2ac>)
 80018a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1ef      	bne.n	8001894 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f000 80ab 	beq.w	8001a18 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018c2:	2300      	movs	r3, #0
 80018c4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80018c6:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <HAL_RCC_OscConfig+0x2ac>)
 80018c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d106      	bne.n	80018e0 <HAL_RCC_OscConfig+0x2b4>
 80018d2:	2301      	movs	r3, #1
 80018d4:	e005      	b.n	80018e2 <HAL_RCC_OscConfig+0x2b6>
 80018d6:	bf00      	nop
 80018d8:	40021000 	.word	0x40021000
 80018dc:	20000004 	.word	0x20000004
 80018e0:	2300      	movs	r3, #0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00d      	beq.n	8001902 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018e6:	4baf      	ldr	r3, [pc, #700]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 80018e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ea:	4aae      	ldr	r2, [pc, #696]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 80018ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f0:	6593      	str	r3, [r2, #88]	; 0x58
 80018f2:	4bac      	ldr	r3, [pc, #688]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 80018f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018fe:	2301      	movs	r3, #1
 8001900:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001902:	4ba9      	ldr	r3, [pc, #676]	; (8001ba8 <HAL_RCC_OscConfig+0x57c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190a:	2b00      	cmp	r3, #0
 800190c:	d118      	bne.n	8001940 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800190e:	4ba6      	ldr	r3, [pc, #664]	; (8001ba8 <HAL_RCC_OscConfig+0x57c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4aa5      	ldr	r2, [pc, #660]	; (8001ba8 <HAL_RCC_OscConfig+0x57c>)
 8001914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800191a:	f7ff fce3 	bl	80012e4 <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001922:	f7ff fcdf 	bl	80012e4 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e18d      	b.n	8001c50 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001934:	4b9c      	ldr	r3, [pc, #624]	; (8001ba8 <HAL_RCC_OscConfig+0x57c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0f0      	beq.n	8001922 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d108      	bne.n	800195a <HAL_RCC_OscConfig+0x32e>
 8001948:	4b96      	ldr	r3, [pc, #600]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 800194a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800194e:	4a95      	ldr	r2, [pc, #596]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001958:	e024      	b.n	80019a4 <HAL_RCC_OscConfig+0x378>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	2b05      	cmp	r3, #5
 8001960:	d110      	bne.n	8001984 <HAL_RCC_OscConfig+0x358>
 8001962:	4b90      	ldr	r3, [pc, #576]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001968:	4a8e      	ldr	r2, [pc, #568]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 800196a:	f043 0304 	orr.w	r3, r3, #4
 800196e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001972:	4b8c      	ldr	r3, [pc, #560]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001978:	4a8a      	ldr	r2, [pc, #552]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001982:	e00f      	b.n	80019a4 <HAL_RCC_OscConfig+0x378>
 8001984:	4b87      	ldr	r3, [pc, #540]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800198a:	4a86      	ldr	r2, [pc, #536]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 800198c:	f023 0301 	bic.w	r3, r3, #1
 8001990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001994:	4b83      	ldr	r3, [pc, #524]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800199a:	4a82      	ldr	r2, [pc, #520]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 800199c:	f023 0304 	bic.w	r3, r3, #4
 80019a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d016      	beq.n	80019da <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ac:	f7ff fc9a 	bl	80012e4 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019b2:	e00a      	b.n	80019ca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b4:	f7ff fc96 	bl	80012e4 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e142      	b.n	8001c50 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019ca:	4b76      	ldr	r3, [pc, #472]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 80019cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0ed      	beq.n	80019b4 <HAL_RCC_OscConfig+0x388>
 80019d8:	e015      	b.n	8001a06 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019da:	f7ff fc83 	bl	80012e4 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019e0:	e00a      	b.n	80019f8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019e2:	f7ff fc7f 	bl	80012e4 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e12b      	b.n	8001c50 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019f8:	4b6a      	ldr	r3, [pc, #424]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 80019fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1ed      	bne.n	80019e2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a06:	7ffb      	ldrb	r3, [r7, #31]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d105      	bne.n	8001a18 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a0c:	4b65      	ldr	r3, [pc, #404]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a10:	4a64      	ldr	r2, [pc, #400]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001a12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a16:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0320 	and.w	r3, r3, #32
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d03c      	beq.n	8001a9e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d01c      	beq.n	8001a66 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a2c:	4b5d      	ldr	r3, [pc, #372]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001a2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a32:	4a5c      	ldr	r2, [pc, #368]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a3c:	f7ff fc52 	bl	80012e4 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a44:	f7ff fc4e 	bl	80012e4 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e0fc      	b.n	8001c50 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a56:	4b53      	ldr	r3, [pc, #332]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001a58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0ef      	beq.n	8001a44 <HAL_RCC_OscConfig+0x418>
 8001a64:	e01b      	b.n	8001a9e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a66:	4b4f      	ldr	r3, [pc, #316]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001a68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a6c:	4a4d      	ldr	r2, [pc, #308]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001a6e:	f023 0301 	bic.w	r3, r3, #1
 8001a72:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a76:	f7ff fc35 	bl	80012e4 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a7e:	f7ff fc31 	bl	80012e4 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e0df      	b.n	8001c50 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a90:	4b44      	ldr	r3, [pc, #272]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001a92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1ef      	bne.n	8001a7e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 80d3 	beq.w	8001c4e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aa8:	4b3e      	ldr	r3, [pc, #248]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 030c 	and.w	r3, r3, #12
 8001ab0:	2b0c      	cmp	r3, #12
 8001ab2:	f000 808d 	beq.w	8001bd0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d15a      	bne.n	8001b74 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001abe:	4b39      	ldr	r3, [pc, #228]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a38      	ldr	r2, [pc, #224]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001ac4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aca:	f7ff fc0b 	bl	80012e4 <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad2:	f7ff fc07 	bl	80012e4 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e0b5      	b.n	8001c50 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae4:	4b2f      	ldr	r3, [pc, #188]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1f0      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001af0:	4b2c      	ldr	r3, [pc, #176]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001af2:	68da      	ldr	r2, [r3, #12]
 8001af4:	4b2d      	ldr	r3, [pc, #180]	; (8001bac <HAL_RCC_OscConfig+0x580>)
 8001af6:	4013      	ands	r3, r2
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	6a11      	ldr	r1, [r2, #32]
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b00:	3a01      	subs	r2, #1
 8001b02:	0112      	lsls	r2, r2, #4
 8001b04:	4311      	orrs	r1, r2
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001b0a:	0212      	lsls	r2, r2, #8
 8001b0c:	4311      	orrs	r1, r2
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b12:	0852      	lsrs	r2, r2, #1
 8001b14:	3a01      	subs	r2, #1
 8001b16:	0552      	lsls	r2, r2, #21
 8001b18:	4311      	orrs	r1, r2
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b1e:	0852      	lsrs	r2, r2, #1
 8001b20:	3a01      	subs	r2, #1
 8001b22:	0652      	lsls	r2, r2, #25
 8001b24:	4311      	orrs	r1, r2
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b2a:	06d2      	lsls	r2, r2, #27
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	491d      	ldr	r1, [pc, #116]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b34:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a1a      	ldr	r2, [pc, #104]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001b3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b3e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b40:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	4a17      	ldr	r2, [pc, #92]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001b46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b4a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4c:	f7ff fbca 	bl	80012e4 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b54:	f7ff fbc6 	bl	80012e4 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e074      	b.n	8001c50 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b66:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0f0      	beq.n	8001b54 <HAL_RCC_OscConfig+0x528>
 8001b72:	e06c      	b.n	8001c4e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b74:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a0a      	ldr	r2, [pc, #40]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001b7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b7e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001b80:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	4a07      	ldr	r2, [pc, #28]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001b86:	f023 0303 	bic.w	r3, r3, #3
 8001b8a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001b8c:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	4a04      	ldr	r2, [pc, #16]	; (8001ba4 <HAL_RCC_OscConfig+0x578>)
 8001b92:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b9a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9c:	f7ff fba2 	bl	80012e4 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba2:	e00e      	b.n	8001bc2 <HAL_RCC_OscConfig+0x596>
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40007000 	.word	0x40007000
 8001bac:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb0:	f7ff fb98 	bl	80012e4 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e046      	b.n	8001c50 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bc2:	4b25      	ldr	r3, [pc, #148]	; (8001c58 <HAL_RCC_OscConfig+0x62c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f0      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x584>
 8001bce:	e03e      	b.n	8001c4e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d101      	bne.n	8001bdc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e039      	b.n	8001c50 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001bdc:	4b1e      	ldr	r3, [pc, #120]	; (8001c58 <HAL_RCC_OscConfig+0x62c>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f003 0203 	and.w	r2, r3, #3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d12c      	bne.n	8001c4a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d123      	bne.n	8001c4a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d11b      	bne.n	8001c4a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d113      	bne.n	8001c4a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2c:	085b      	lsrs	r3, r3, #1
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d109      	bne.n	8001c4a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c40:	085b      	lsrs	r3, r3, #1
 8001c42:	3b01      	subs	r3, #1
 8001c44:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d001      	beq.n	8001c4e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3720      	adds	r7, #32
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40021000 	.word	0x40021000

08001c5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e11e      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c74:	4b91      	ldr	r3, [pc, #580]	; (8001ebc <HAL_RCC_ClockConfig+0x260>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 030f 	and.w	r3, r3, #15
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d910      	bls.n	8001ca4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c82:	4b8e      	ldr	r3, [pc, #568]	; (8001ebc <HAL_RCC_ClockConfig+0x260>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f023 020f 	bic.w	r2, r3, #15
 8001c8a:	498c      	ldr	r1, [pc, #560]	; (8001ebc <HAL_RCC_ClockConfig+0x260>)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c92:	4b8a      	ldr	r3, [pc, #552]	; (8001ebc <HAL_RCC_ClockConfig+0x260>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d001      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e106      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d073      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b03      	cmp	r3, #3
 8001cb6:	d129      	bne.n	8001d0c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cb8:	4b81      	ldr	r3, [pc, #516]	; (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e0f4      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001cc8:	f000 f964 	bl	8001f94 <RCC_GetSysClockFreqFromPLLSource>
 8001ccc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	4a7c      	ldr	r2, [pc, #496]	; (8001ec4 <HAL_RCC_ClockConfig+0x268>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d93f      	bls.n	8001d56 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001cd6:	4b7a      	ldr	r3, [pc, #488]	; (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d009      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d033      	beq.n	8001d56 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d12f      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001cf6:	4b72      	ldr	r3, [pc, #456]	; (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cfe:	4a70      	ldr	r2, [pc, #448]	; (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d04:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d06:	2380      	movs	r3, #128	; 0x80
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	e024      	b.n	8001d56 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d107      	bne.n	8001d24 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d14:	4b6a      	ldr	r3, [pc, #424]	; (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d109      	bne.n	8001d34 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e0c6      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d24:	4b66      	ldr	r3, [pc, #408]	; (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e0be      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001d34:	f000 f8ce 	bl	8001ed4 <HAL_RCC_GetSysClockFreq>
 8001d38:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	4a61      	ldr	r2, [pc, #388]	; (8001ec4 <HAL_RCC_ClockConfig+0x268>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d909      	bls.n	8001d56 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d42:	4b5f      	ldr	r3, [pc, #380]	; (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d4a:	4a5d      	ldr	r2, [pc, #372]	; (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d50:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d56:	4b5a      	ldr	r3, [pc, #360]	; (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f023 0203 	bic.w	r2, r3, #3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	4957      	ldr	r1, [pc, #348]	; (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d68:	f7ff fabc 	bl	80012e4 <HAL_GetTick>
 8001d6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d6e:	e00a      	b.n	8001d86 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d70:	f7ff fab8 	bl	80012e4 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e095      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d86:	4b4e      	ldr	r3, [pc, #312]	; (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 020c 	and.w	r2, r3, #12
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d1eb      	bne.n	8001d70 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d023      	beq.n	8001dec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d005      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001db0:	4b43      	ldr	r3, [pc, #268]	; (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	4a42      	ldr	r2, [pc, #264]	; (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001db6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d007      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001dc8:	4b3d      	ldr	r3, [pc, #244]	; (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001dd0:	4a3b      	ldr	r2, [pc, #236]	; (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001dd2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dd6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd8:	4b39      	ldr	r3, [pc, #228]	; (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	4936      	ldr	r1, [pc, #216]	; (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	608b      	str	r3, [r1, #8]
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	2b80      	cmp	r3, #128	; 0x80
 8001df0:	d105      	bne.n	8001dfe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001df2:	4b33      	ldr	r3, [pc, #204]	; (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	4a32      	ldr	r2, [pc, #200]	; (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001df8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dfc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dfe:	4b2f      	ldr	r3, [pc, #188]	; (8001ebc <HAL_RCC_ClockConfig+0x260>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d21d      	bcs.n	8001e48 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0c:	4b2b      	ldr	r3, [pc, #172]	; (8001ebc <HAL_RCC_ClockConfig+0x260>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f023 020f 	bic.w	r2, r3, #15
 8001e14:	4929      	ldr	r1, [pc, #164]	; (8001ebc <HAL_RCC_ClockConfig+0x260>)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e1c:	f7ff fa62 	bl	80012e4 <HAL_GetTick>
 8001e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e22:	e00a      	b.n	8001e3a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e24:	f7ff fa5e 	bl	80012e4 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e03b      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3a:	4b20      	ldr	r3, [pc, #128]	; (8001ebc <HAL_RCC_ClockConfig+0x260>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d1ed      	bne.n	8001e24 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d008      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e54:	4b1a      	ldr	r3, [pc, #104]	; (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	4917      	ldr	r1, [pc, #92]	; (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d009      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e72:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	490f      	ldr	r1, [pc, #60]	; (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e86:	f000 f825 	bl	8001ed4 <HAL_RCC_GetSysClockFreq>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <HAL_RCC_ClockConfig+0x264>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	091b      	lsrs	r3, r3, #4
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	490c      	ldr	r1, [pc, #48]	; (8001ec8 <HAL_RCC_ClockConfig+0x26c>)
 8001e98:	5ccb      	ldrb	r3, [r1, r3]
 8001e9a:	f003 031f 	and.w	r3, r3, #31
 8001e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea2:	4a0a      	ldr	r2, [pc, #40]	; (8001ecc <HAL_RCC_ClockConfig+0x270>)
 8001ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <HAL_RCC_ClockConfig+0x274>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff f9ce 	bl	800124c <HAL_InitTick>
 8001eb0:	4603      	mov	r3, r0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40022000 	.word	0x40022000
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	04c4b400 	.word	0x04c4b400
 8001ec8:	080037a0 	.word	0x080037a0
 8001ecc:	20000000 	.word	0x20000000
 8001ed0:	20000004 	.word	0x20000004

08001ed4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b087      	sub	sp, #28
 8001ed8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001eda:	4b2c      	ldr	r3, [pc, #176]	; (8001f8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 030c 	and.w	r3, r3, #12
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d102      	bne.n	8001eec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ee6:	4b2a      	ldr	r3, [pc, #168]	; (8001f90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	e047      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001eec:	4b27      	ldr	r3, [pc, #156]	; (8001f8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 030c 	and.w	r3, r3, #12
 8001ef4:	2b08      	cmp	r3, #8
 8001ef6:	d102      	bne.n	8001efe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ef8:	4b25      	ldr	r3, [pc, #148]	; (8001f90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	e03e      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001efe:	4b23      	ldr	r3, [pc, #140]	; (8001f8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 030c 	and.w	r3, r3, #12
 8001f06:	2b0c      	cmp	r3, #12
 8001f08:	d136      	bne.n	8001f78 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f0a:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f14:	4b1d      	ldr	r3, [pc, #116]	; (8001f8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	3301      	adds	r3, #1
 8001f20:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	d10c      	bne.n	8001f42 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f28:	4a19      	ldr	r2, [pc, #100]	; (8001f90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f30:	4a16      	ldr	r2, [pc, #88]	; (8001f8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f32:	68d2      	ldr	r2, [r2, #12]
 8001f34:	0a12      	lsrs	r2, r2, #8
 8001f36:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f3a:	fb02 f303 	mul.w	r3, r2, r3
 8001f3e:	617b      	str	r3, [r7, #20]
      break;
 8001f40:	e00c      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f42:	4a13      	ldr	r2, [pc, #76]	; (8001f90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4a:	4a10      	ldr	r2, [pc, #64]	; (8001f8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f4c:	68d2      	ldr	r2, [r2, #12]
 8001f4e:	0a12      	lsrs	r2, r2, #8
 8001f50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f54:	fb02 f303 	mul.w	r3, r2, r3
 8001f58:	617b      	str	r3, [r7, #20]
      break;
 8001f5a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	0e5b      	lsrs	r3, r3, #25
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	3301      	adds	r3, #1
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f74:	613b      	str	r3, [r7, #16]
 8001f76:	e001      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f7c:	693b      	ldr	r3, [r7, #16]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	371c      	adds	r7, #28
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	00f42400 	.word	0x00f42400

08001f94 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b087      	sub	sp, #28
 8001f98:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f9a:	4b1e      	ldr	r3, [pc, #120]	; (8002014 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fa4:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	091b      	lsrs	r3, r3, #4
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	3301      	adds	r3, #1
 8001fb0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	2b03      	cmp	r3, #3
 8001fb6:	d10c      	bne.n	8001fd2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fb8:	4a17      	ldr	r2, [pc, #92]	; (8002018 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc0:	4a14      	ldr	r2, [pc, #80]	; (8002014 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fc2:	68d2      	ldr	r2, [r2, #12]
 8001fc4:	0a12      	lsrs	r2, r2, #8
 8001fc6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fca:	fb02 f303 	mul.w	r3, r2, r3
 8001fce:	617b      	str	r3, [r7, #20]
    break;
 8001fd0:	e00c      	b.n	8001fec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fd2:	4a11      	ldr	r2, [pc, #68]	; (8002018 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fda:	4a0e      	ldr	r2, [pc, #56]	; (8002014 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fdc:	68d2      	ldr	r2, [r2, #12]
 8001fde:	0a12      	lsrs	r2, r2, #8
 8001fe0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fe4:	fb02 f303 	mul.w	r3, r2, r3
 8001fe8:	617b      	str	r3, [r7, #20]
    break;
 8001fea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fec:	4b09      	ldr	r3, [pc, #36]	; (8002014 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	0e5b      	lsrs	r3, r3, #25
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	fbb2 f3f3 	udiv	r3, r2, r3
 8002004:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002006:	687b      	ldr	r3, [r7, #4]
}
 8002008:	4618      	mov	r0, r3
 800200a:	371c      	adds	r7, #28
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	40021000 	.word	0x40021000
 8002018:	00f42400 	.word	0x00f42400

0800201c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002024:	2300      	movs	r3, #0
 8002026:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002028:	2300      	movs	r3, #0
 800202a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 8098 	beq.w	800216a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800203a:	2300      	movs	r3, #0
 800203c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800203e:	4b43      	ldr	r3, [pc, #268]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10d      	bne.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800204a:	4b40      	ldr	r3, [pc, #256]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800204c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204e:	4a3f      	ldr	r2, [pc, #252]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002054:	6593      	str	r3, [r2, #88]	; 0x58
 8002056:	4b3d      	ldr	r3, [pc, #244]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002062:	2301      	movs	r3, #1
 8002064:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002066:	4b3a      	ldr	r3, [pc, #232]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a39      	ldr	r2, [pc, #228]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800206c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002070:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002072:	f7ff f937 	bl	80012e4 <HAL_GetTick>
 8002076:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002078:	e009      	b.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800207a:	f7ff f933 	bl	80012e4 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d902      	bls.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	74fb      	strb	r3, [r7, #19]
        break;
 800208c:	e005      	b.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800208e:	4b30      	ldr	r3, [pc, #192]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0ef      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800209a:	7cfb      	ldrb	r3, [r7, #19]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d159      	bne.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020a0:	4b2a      	ldr	r3, [pc, #168]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020aa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d01e      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d019      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020bc:	4b23      	ldr	r3, [pc, #140]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020c8:	4b20      	ldr	r3, [pc, #128]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ce:	4a1f      	ldr	r2, [pc, #124]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020d8:	4b1c      	ldr	r3, [pc, #112]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020de:	4a1b      	ldr	r2, [pc, #108]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020e8:	4a18      	ldr	r2, [pc, #96]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d016      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fa:	f7ff f8f3 	bl	80012e4 <HAL_GetTick>
 80020fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002100:	e00b      	b.n	800211a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002102:	f7ff f8ef 	bl	80012e4 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002110:	4293      	cmp	r3, r2
 8002112:	d902      	bls.n	800211a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	74fb      	strb	r3, [r7, #19]
            break;
 8002118:	e006      	b.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800211a:	4b0c      	ldr	r3, [pc, #48]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800211c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0ec      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002128:	7cfb      	ldrb	r3, [r7, #19]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10b      	bne.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800212e:	4b07      	ldr	r3, [pc, #28]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002134:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	4903      	ldr	r1, [pc, #12]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800213e:	4313      	orrs	r3, r2
 8002140:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002144:	e008      	b.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002146:	7cfb      	ldrb	r3, [r7, #19]
 8002148:	74bb      	strb	r3, [r7, #18]
 800214a:	e005      	b.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800214c:	40021000 	.word	0x40021000
 8002150:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002154:	7cfb      	ldrb	r3, [r7, #19]
 8002156:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002158:	7c7b      	ldrb	r3, [r7, #17]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d105      	bne.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800215e:	4ba6      	ldr	r3, [pc, #664]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002162:	4aa5      	ldr	r2, [pc, #660]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002164:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002168:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00a      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002176:	4ba0      	ldr	r3, [pc, #640]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217c:	f023 0203 	bic.w	r2, r3, #3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	499c      	ldr	r1, [pc, #624]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002186:	4313      	orrs	r3, r2
 8002188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00a      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002198:	4b97      	ldr	r3, [pc, #604]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800219a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219e:	f023 020c 	bic.w	r2, r3, #12
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	4994      	ldr	r1, [pc, #592]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0304 	and.w	r3, r3, #4
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00a      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021ba:	4b8f      	ldr	r3, [pc, #572]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	498b      	ldr	r1, [pc, #556]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0308 	and.w	r3, r3, #8
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00a      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021dc:	4b86      	ldr	r3, [pc, #536]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	4983      	ldr	r1, [pc, #524]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0320 	and.w	r3, r3, #32
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00a      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021fe:	4b7e      	ldr	r3, [pc, #504]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002204:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	497a      	ldr	r1, [pc, #488]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800220e:	4313      	orrs	r3, r2
 8002210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00a      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002220:	4b75      	ldr	r3, [pc, #468]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002226:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	4972      	ldr	r1, [pc, #456]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002230:	4313      	orrs	r3, r2
 8002232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00a      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002242:	4b6d      	ldr	r3, [pc, #436]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002248:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	4969      	ldr	r1, [pc, #420]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002252:	4313      	orrs	r3, r2
 8002254:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00a      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002264:	4b64      	ldr	r3, [pc, #400]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	4961      	ldr	r1, [pc, #388]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002274:	4313      	orrs	r3, r2
 8002276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00a      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002286:	4b5c      	ldr	r3, [pc, #368]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	4958      	ldr	r1, [pc, #352]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002296:	4313      	orrs	r3, r2
 8002298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d015      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022a8:	4b53      	ldr	r3, [pc, #332]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b6:	4950      	ldr	r1, [pc, #320]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022c6:	d105      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022c8:	4b4b      	ldr	r3, [pc, #300]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	4a4a      	ldr	r2, [pc, #296]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022d2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d015      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022e0:	4b45      	ldr	r3, [pc, #276]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ee:	4942      	ldr	r1, [pc, #264]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022fe:	d105      	bne.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002300:	4b3d      	ldr	r3, [pc, #244]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	4a3c      	ldr	r2, [pc, #240]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002306:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800230a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d015      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002318:	4b37      	ldr	r3, [pc, #220]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800231a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	4934      	ldr	r1, [pc, #208]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002336:	d105      	bne.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002338:	4b2f      	ldr	r3, [pc, #188]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	4a2e      	ldr	r2, [pc, #184]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800233e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002342:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d015      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002350:	4b29      	ldr	r3, [pc, #164]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002356:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800235e:	4926      	ldr	r1, [pc, #152]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002360:	4313      	orrs	r3, r2
 8002362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800236a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800236e:	d105      	bne.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002370:	4b21      	ldr	r3, [pc, #132]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	4a20      	ldr	r2, [pc, #128]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002376:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800237a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d015      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002388:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800238a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002396:	4918      	ldr	r1, [pc, #96]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023a6:	d105      	bne.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023a8:	4b13      	ldr	r3, [pc, #76]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	4a12      	ldr	r2, [pc, #72]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d015      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80023c0:	4b0d      	ldr	r3, [pc, #52]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ce:	490a      	ldr	r1, [pc, #40]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023de:	d105      	bne.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80023e0:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	4a04      	ldr	r2, [pc, #16]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80023ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40021000 	.word	0x40021000

080023fc <LL_ADC_REG_SetSequencerLength>:
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f023 020f 	bic.w	r2, r3, #15
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	431a      	orrs	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b01      	cmp	r3, #1
 8002434:	d101      	bne.n	800243a <LL_ADC_IsEnabled+0x18>
 8002436:	2301      	movs	r3, #1
 8002438:	e000      	b.n	800243c <LL_ADC_IsEnabled+0x1a>
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8002448:	b590      	push	{r4, r7, lr}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002452:	2300      	movs	r3, #0
 8002454:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8002456:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800245a:	f7ff ffe2 	bl	8002422 <LL_ADC_IsEnabled>
 800245e:	4604      	mov	r4, r0
 8002460:	4817      	ldr	r0, [pc, #92]	; (80024c0 <LL_ADC_CommonInit+0x78>)
 8002462:	f7ff ffde 	bl	8002422 <LL_ADC_IsEnabled>
 8002466:	4603      	mov	r3, r0
 8002468:	4323      	orrs	r3, r4
 800246a:	2b00      	cmp	r3, #0
 800246c:	d120      	bne.n	80024b0 <LL_ADC_CommonInit+0x68>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d012      	beq.n	800249c <LL_ADC_CommonInit+0x54>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <LL_ADC_CommonInit+0x7c>)
 800247c:	4013      	ands	r3, r2
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	6811      	ldr	r1, [r2, #0]
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	6852      	ldr	r2, [r2, #4]
 8002486:	4311      	orrs	r1, r2
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	6892      	ldr	r2, [r2, #8]
 800248c:	4311      	orrs	r1, r2
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	68d2      	ldr	r2, [r2, #12]
 8002492:	430a      	orrs	r2, r1
 8002494:	431a      	orrs	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	609a      	str	r2, [r3, #8]
 800249a:	e00b      	b.n	80024b4 <LL_ADC_CommonInit+0x6c>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <LL_ADC_CommonInit+0x7c>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	431a      	orrs	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	609a      	str	r2, [r3, #8]
 80024ae:	e001      	b.n	80024b4 <LL_ADC_CommonInit+0x6c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd90      	pop	{r4, r7, pc}
 80024be:	bf00      	nop
 80024c0:	50000100 	.word	0x50000100
 80024c4:	ffc030e0 	.word	0xffc030e0

080024c8 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80024d2:	2300      	movs	r3, #0
 80024d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7ff ffa3 	bl	8002422 <LL_ADC_IsEnabled>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d111      	bne.n	8002506 <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80024ea:	f023 0318 	bic.w	r3, r3, #24
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	6811      	ldr	r1, [r2, #0]
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	6852      	ldr	r2, [r2, #4]
 80024f6:	4311      	orrs	r1, r2
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	6892      	ldr	r2, [r2, #8]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	60da      	str	r2, [r3, #12]
 8002504:	e001      	b.n	800250a <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800250a:	7bfb      	ldrb	r3, [r7, #15]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800251e:	2300      	movs	r3, #0
 8002520:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7ff ff7d 	bl	8002422 <LL_ADC_IsEnabled>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d132      	bne.n	8002594 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d015      	beq.n	8002562 <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	4b1a      	ldr	r3, [pc, #104]	; (80025a4 <LL_ADC_REG_Init+0x90>)
 800253c:	4013      	ands	r3, r2
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	6811      	ldr	r1, [r2, #0]
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	6892      	ldr	r2, [r2, #8]
 8002546:	4311      	orrs	r1, r2
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	68d2      	ldr	r2, [r2, #12]
 800254c:	4311      	orrs	r1, r2
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	6912      	ldr	r2, [r2, #16]
 8002552:	4311      	orrs	r1, r2
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	6952      	ldr	r2, [r2, #20]
 8002558:	430a      	orrs	r2, r1
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	60da      	str	r2, [r3, #12]
 8002560:	e011      	b.n	8002586 <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	4b0f      	ldr	r3, [pc, #60]	; (80025a4 <LL_ADC_REG_Init+0x90>)
 8002568:	4013      	ands	r3, r2
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	6811      	ldr	r1, [r2, #0]
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	68d2      	ldr	r2, [r2, #12]
 8002572:	4311      	orrs	r1, r2
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	6912      	ldr	r2, [r2, #16]
 8002578:	4311      	orrs	r1, r2
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	6952      	ldr	r2, [r2, #20]
 800257e:	430a      	orrs	r2, r1
 8002580:	431a      	orrs	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	4619      	mov	r1, r3
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f7ff ff35 	bl	80023fc <LL_ADC_REG_SetSequencerLength>
 8002592:	e001      	b.n	8002598 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002598:	7bfb      	ldrb	r3, [r7, #15]
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	fff0c01c 	.word	0xfff0c01c

080025a8 <LL_EXTI_EnableIT_0_31>:
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <LL_EXTI_EnableIT_0_31+0x20>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	4904      	ldr	r1, [pc, #16]	; (80025c8 <LL_EXTI_EnableIT_0_31+0x20>)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	600b      	str	r3, [r1, #0]
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	40010400 	.word	0x40010400

080025cc <LL_EXTI_EnableIT_32_63>:
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80025d4:	4b05      	ldr	r3, [pc, #20]	; (80025ec <LL_EXTI_EnableIT_32_63+0x20>)
 80025d6:	6a1a      	ldr	r2, [r3, #32]
 80025d8:	4904      	ldr	r1, [pc, #16]	; (80025ec <LL_EXTI_EnableIT_32_63+0x20>)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4313      	orrs	r3, r2
 80025de:	620b      	str	r3, [r1, #32]
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	40010400 	.word	0x40010400

080025f0 <LL_EXTI_DisableIT_0_31>:
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80025f8:	4b06      	ldr	r3, [pc, #24]	; (8002614 <LL_EXTI_DisableIT_0_31+0x24>)
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	43db      	mvns	r3, r3
 8002600:	4904      	ldr	r1, [pc, #16]	; (8002614 <LL_EXTI_DisableIT_0_31+0x24>)
 8002602:	4013      	ands	r3, r2
 8002604:	600b      	str	r3, [r1, #0]
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	40010400 	.word	0x40010400

08002618 <LL_EXTI_DisableIT_32_63>:
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <LL_EXTI_DisableIT_32_63+0x24>)
 8002622:	6a1a      	ldr	r2, [r3, #32]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	43db      	mvns	r3, r3
 8002628:	4904      	ldr	r1, [pc, #16]	; (800263c <LL_EXTI_DisableIT_32_63+0x24>)
 800262a:	4013      	ands	r3, r2
 800262c:	620b      	str	r3, [r1, #32]
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	40010400 	.word	0x40010400

08002640 <LL_EXTI_EnableEvent_0_31>:
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002648:	4b05      	ldr	r3, [pc, #20]	; (8002660 <LL_EXTI_EnableEvent_0_31+0x20>)
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	4904      	ldr	r1, [pc, #16]	; (8002660 <LL_EXTI_EnableEvent_0_31+0x20>)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4313      	orrs	r3, r2
 8002652:	604b      	str	r3, [r1, #4]
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	40010400 	.word	0x40010400

08002664 <LL_EXTI_EnableEvent_32_63>:
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <LL_EXTI_EnableEvent_32_63+0x20>)
 800266e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002670:	4904      	ldr	r1, [pc, #16]	; (8002684 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4313      	orrs	r3, r2
 8002676:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	40010400 	.word	0x40010400

08002688 <LL_EXTI_DisableEvent_0_31>:
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002690:	4b06      	ldr	r3, [pc, #24]	; (80026ac <LL_EXTI_DisableEvent_0_31+0x24>)
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	43db      	mvns	r3, r3
 8002698:	4904      	ldr	r1, [pc, #16]	; (80026ac <LL_EXTI_DisableEvent_0_31+0x24>)
 800269a:	4013      	ands	r3, r2
 800269c:	604b      	str	r3, [r1, #4]
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	40010400 	.word	0x40010400

080026b0 <LL_EXTI_DisableEvent_32_63>:
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80026b8:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <LL_EXTI_DisableEvent_32_63+0x24>)
 80026ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	43db      	mvns	r3, r3
 80026c0:	4904      	ldr	r1, [pc, #16]	; (80026d4 <LL_EXTI_DisableEvent_32_63+0x24>)
 80026c2:	4013      	ands	r3, r2
 80026c4:	624b      	str	r3, [r1, #36]	; 0x24
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40010400 	.word	0x40010400

080026d8 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80026e0:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	4904      	ldr	r1, [pc, #16]	; (80026f8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	608b      	str	r3, [r1, #8]
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	40010400 	.word	0x40010400

080026fc <LL_EXTI_EnableRisingTrig_32_63>:
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002704:	4b05      	ldr	r3, [pc, #20]	; (800271c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002706:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002708:	4904      	ldr	r1, [pc, #16]	; (800271c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4313      	orrs	r3, r2
 800270e:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	40010400 	.word	0x40010400

08002720 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002728:	4b06      	ldr	r3, [pc, #24]	; (8002744 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	43db      	mvns	r3, r3
 8002730:	4904      	ldr	r1, [pc, #16]	; (8002744 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002732:	4013      	ands	r3, r2
 8002734:	608b      	str	r3, [r1, #8]
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	40010400 	.word	0x40010400

08002748 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002752:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	43db      	mvns	r3, r3
 8002758:	4904      	ldr	r1, [pc, #16]	; (800276c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800275a:	4013      	ands	r3, r2
 800275c:	628b      	str	r3, [r1, #40]	; 0x28
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40010400 	.word	0x40010400

08002770 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002778:	4b05      	ldr	r3, [pc, #20]	; (8002790 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800277a:	68da      	ldr	r2, [r3, #12]
 800277c:	4904      	ldr	r1, [pc, #16]	; (8002790 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4313      	orrs	r3, r2
 8002782:	60cb      	str	r3, [r1, #12]
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	40010400 	.word	0x40010400

08002794 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800279e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a0:	4904      	ldr	r1, [pc, #16]	; (80027b4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	40010400 	.word	0x40010400

080027b8 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80027c0:	4b06      	ldr	r3, [pc, #24]	; (80027dc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80027c2:	68da      	ldr	r2, [r3, #12]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	43db      	mvns	r3, r3
 80027c8:	4904      	ldr	r1, [pc, #16]	; (80027dc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80027ca:	4013      	ands	r3, r2
 80027cc:	60cb      	str	r3, [r1, #12]
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	40010400 	.word	0x40010400

080027e0 <LL_EXTI_DisableFallingTrig_32_63>:
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80027e8:	4b06      	ldr	r3, [pc, #24]	; (8002804 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80027ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	43db      	mvns	r3, r3
 80027f0:	4904      	ldr	r1, [pc, #16]	; (8002804 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80027f2:	4013      	ands	r3, r2
 80027f4:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	40010400 	.word	0x40010400

08002808 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8002810:	2300      	movs	r3, #0
 8002812:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	7a1b      	ldrb	r3, [r3, #8]
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 80d3 	beq.w	80029c4 <LL_EXTI_Init+0x1bc>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d063      	beq.n	80028ee <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	7a5b      	ldrb	r3, [r3, #9]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d01c      	beq.n	8002868 <LL_EXTI_Init+0x60>
 800282e:	2b02      	cmp	r3, #2
 8002830:	dc25      	bgt.n	800287e <LL_EXTI_Init+0x76>
 8002832:	2b00      	cmp	r3, #0
 8002834:	d002      	beq.n	800283c <LL_EXTI_Init+0x34>
 8002836:	2b01      	cmp	r3, #1
 8002838:	d00b      	beq.n	8002852 <LL_EXTI_Init+0x4a>
 800283a:	e020      	b.n	800287e <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff ff21 	bl	8002688 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff feac 	bl	80025a8 <LL_EXTI_EnableIT_0_31>
          break;
 8002850:	e018      	b.n	8002884 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff feca 	bl	80025f0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff feed 	bl	8002640 <LL_EXTI_EnableEvent_0_31>
          break;
 8002866:	e00d      	b.n	8002884 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff fe9b 	bl	80025a8 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff fee2 	bl	8002640 <LL_EXTI_EnableEvent_0_31>
          break;
 800287c:	e002      	b.n	8002884 <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 800287e:	2301      	movs	r3, #1
 8002880:	60fb      	str	r3, [r7, #12]
          break;
 8002882:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	7a9b      	ldrb	r3, [r3, #10]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d030      	beq.n	80028ee <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	7a9b      	ldrb	r3, [r3, #10]
 8002890:	2b03      	cmp	r3, #3
 8002892:	d01c      	beq.n	80028ce <LL_EXTI_Init+0xc6>
 8002894:	2b03      	cmp	r3, #3
 8002896:	dc25      	bgt.n	80028e4 <LL_EXTI_Init+0xdc>
 8002898:	2b01      	cmp	r3, #1
 800289a:	d002      	beq.n	80028a2 <LL_EXTI_Init+0x9a>
 800289c:	2b02      	cmp	r3, #2
 800289e:	d00b      	beq.n	80028b8 <LL_EXTI_Init+0xb0>
 80028a0:	e020      	b.n	80028e4 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff ff86 	bl	80027b8 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff ff11 	bl	80026d8 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80028b6:	e01b      	b.n	80028f0 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff ff2f 	bl	8002720 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff ff52 	bl	8002770 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80028cc:	e010      	b.n	80028f0 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff ff00 	bl	80026d8 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff ff47 	bl	8002770 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80028e2:	e005      	b.n	80028f0 <LL_EXTI_Init+0xe8>
          default:
            status |= 0x02u;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f043 0302 	orr.w	r3, r3, #2
 80028ea:	60fb      	str	r3, [r7, #12]
            break;
 80028ec:	e000      	b.n	80028f0 <LL_EXTI_Init+0xe8>
        }
      }
 80028ee:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d07a      	beq.n	80029ee <LL_EXTI_Init+0x1e6>
    {
      switch (EXTI_InitStruct->Mode)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	7a5b      	ldrb	r3, [r3, #9]
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d01c      	beq.n	800293a <LL_EXTI_Init+0x132>
 8002900:	2b02      	cmp	r3, #2
 8002902:	dc25      	bgt.n	8002950 <LL_EXTI_Init+0x148>
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <LL_EXTI_Init+0x106>
 8002908:	2b01      	cmp	r3, #1
 800290a:	d00b      	beq.n	8002924 <LL_EXTI_Init+0x11c>
 800290c:	e020      	b.n	8002950 <LL_EXTI_Init+0x148>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff fecc 	bl	80026b0 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff fe55 	bl	80025cc <LL_EXTI_EnableIT_32_63>
          break;
 8002922:	e01a      	b.n	800295a <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff fe75 	bl	8002618 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff fe96 	bl	8002664 <LL_EXTI_EnableEvent_32_63>
          break;
 8002938:	e00f      	b.n	800295a <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff fe44 	bl	80025cc <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff fe8b 	bl	8002664 <LL_EXTI_EnableEvent_32_63>
          break;
 800294e:	e004      	b.n	800295a <LL_EXTI_Init+0x152>
        default:
          status |= 0x04u;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f043 0304 	orr.w	r3, r3, #4
 8002956:	60fb      	str	r3, [r7, #12]
          break;
 8002958:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	7a9b      	ldrb	r3, [r3, #10]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d045      	beq.n	80029ee <LL_EXTI_Init+0x1e6>
      {
        switch (EXTI_InitStruct->Trigger)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	7a9b      	ldrb	r3, [r3, #10]
 8002966:	2b03      	cmp	r3, #3
 8002968:	d01c      	beq.n	80029a4 <LL_EXTI_Init+0x19c>
 800296a:	2b03      	cmp	r3, #3
 800296c:	dc25      	bgt.n	80029ba <LL_EXTI_Init+0x1b2>
 800296e:	2b01      	cmp	r3, #1
 8002970:	d002      	beq.n	8002978 <LL_EXTI_Init+0x170>
 8002972:	2b02      	cmp	r3, #2
 8002974:	d00b      	beq.n	800298e <LL_EXTI_Init+0x186>
 8002976:	e020      	b.n	80029ba <LL_EXTI_Init+0x1b2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff ff2f 	bl	80027e0 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff feb8 	bl	80026fc <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800298c:	e030      	b.n	80029f0 <LL_EXTI_Init+0x1e8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff fed8 	bl	8002748 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff fef9 	bl	8002794 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80029a2:	e025      	b.n	80029f0 <LL_EXTI_Init+0x1e8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff fea7 	bl	80026fc <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff feee 	bl	8002794 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80029b8:	e01a      	b.n	80029f0 <LL_EXTI_Init+0x1e8>
          default:
            status |= 0x05u;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f043 0305 	orr.w	r3, r3, #5
 80029c0:	60fb      	str	r3, [r7, #12]
            break;
 80029c2:	e015      	b.n	80029f0 <LL_EXTI_Init+0x1e8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff fe11 	bl	80025f0 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff fe58 	bl	8002688 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff fe1b 	bl	8002618 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff fe62 	bl	80026b0 <LL_EXTI_DisableEvent_32_63>
 80029ec:	e000      	b.n	80029f0 <LL_EXTI_Init+0x1e8>
      }
 80029ee:	bf00      	nop
  }

  return status;
 80029f0:	68fb      	ldr	r3, [r7, #12]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <LL_GPIO_SetPinMode>:
{
 80029fa:	b480      	push	{r7}
 80029fc:	b08b      	sub	sp, #44	; 0x2c
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	60f8      	str	r0, [r7, #12]
 8002a02:	60b9      	str	r1, [r7, #8]
 8002a04:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	fa93 f3a3 	rbit	r3, r3
 8002a14:	613b      	str	r3, [r7, #16]
  return result;
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8002a20:	2320      	movs	r3, #32
 8002a22:	e003      	b.n	8002a2c <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	fab3 f383 	clz	r3, r3
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	2103      	movs	r1, #3
 8002a30:	fa01 f303 	lsl.w	r3, r1, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	401a      	ands	r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	fa93 f3a3 	rbit	r3, r3
 8002a42:	61fb      	str	r3, [r7, #28]
  return result;
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8002a4e:	2320      	movs	r3, #32
 8002a50:	e003      	b.n	8002a5a <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	fab3 f383 	clz	r3, r3
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a62:	431a      	orrs	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	601a      	str	r2, [r3, #0]
}
 8002a68:	bf00      	nop
 8002a6a:	372c      	adds	r7, #44	; 0x2c
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <LL_GPIO_SetPinOutputType>:
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	43db      	mvns	r3, r3
 8002a88:	401a      	ands	r2, r3
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	431a      	orrs	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	605a      	str	r2, [r3, #4]
}
 8002a98:	bf00      	nop
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <LL_GPIO_SetPinSpeed>:
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b08b      	sub	sp, #44	; 0x2c
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	fa93 f3a3 	rbit	r3, r3
 8002abe:	613b      	str	r3, [r7, #16]
  return result;
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002aca:	2320      	movs	r3, #32
 8002acc:	e003      	b.n	8002ad6 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	fab3 f383 	clz	r3, r3
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	2103      	movs	r1, #3
 8002ada:	fa01 f303 	lsl.w	r3, r1, r3
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	401a      	ands	r2, r3
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae6:	6a3b      	ldr	r3, [r7, #32]
 8002ae8:	fa93 f3a3 	rbit	r3, r3
 8002aec:	61fb      	str	r3, [r7, #28]
  return result;
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002af8:	2320      	movs	r3, #32
 8002afa:	e003      	b.n	8002b04 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	fab3 f383 	clz	r3, r3
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	609a      	str	r2, [r3, #8]
}
 8002b12:	bf00      	nop
 8002b14:	372c      	adds	r7, #44	; 0x2c
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <LL_GPIO_SetPinPull>:
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b08b      	sub	sp, #44	; 0x2c
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	60f8      	str	r0, [r7, #12]
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	fa93 f3a3 	rbit	r3, r3
 8002b38:	613b      	str	r3, [r7, #16]
  return result;
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002b44:	2320      	movs	r3, #32
 8002b46:	e003      	b.n	8002b50 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	fab3 f383 	clz	r3, r3
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	2103      	movs	r1, #3
 8002b54:	fa01 f303 	lsl.w	r3, r1, r3
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	401a      	ands	r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b60:	6a3b      	ldr	r3, [r7, #32]
 8002b62:	fa93 f3a3 	rbit	r3, r3
 8002b66:	61fb      	str	r3, [r7, #28]
  return result;
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002b72:	2320      	movs	r3, #32
 8002b74:	e003      	b.n	8002b7e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	fab3 f383 	clz	r3, r3
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	fa01 f303 	lsl.w	r3, r1, r3
 8002b86:	431a      	orrs	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	60da      	str	r2, [r3, #12]
}
 8002b8c:	bf00      	nop
 8002b8e:	372c      	adds	r7, #44	; 0x2c
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <LL_GPIO_SetAFPin_0_7>:
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b08b      	sub	sp, #44	; 0x2c
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6a1a      	ldr	r2, [r3, #32]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	fa93 f3a3 	rbit	r3, r3
 8002bb2:	613b      	str	r3, [r7, #16]
  return result;
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002bbe:	2320      	movs	r3, #32
 8002bc0:	e003      	b.n	8002bca <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	fab3 f383 	clz	r3, r3
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	210f      	movs	r1, #15
 8002bce:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	401a      	ands	r2, r3
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	6a3b      	ldr	r3, [r7, #32]
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	61fb      	str	r3, [r7, #28]
  return result;
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002bec:	2320      	movs	r3, #32
 8002bee:	e003      	b.n	8002bf8 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	fab3 f383 	clz	r3, r3
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002c00:	431a      	orrs	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	621a      	str	r2, [r3, #32]
}
 8002c06:	bf00      	nop
 8002c08:	372c      	adds	r7, #44	; 0x2c
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <LL_GPIO_SetAFPin_8_15>:
{
 8002c12:	b480      	push	{r7}
 8002c14:	b08b      	sub	sp, #44	; 0x2c
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	60f8      	str	r0, [r7, #12]
 8002c1a:	60b9      	str	r1, [r7, #8]
 8002c1c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	0a1b      	lsrs	r3, r3, #8
 8002c26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	fa93 f3a3 	rbit	r3, r3
 8002c2e:	613b      	str	r3, [r7, #16]
  return result;
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002c3a:	2320      	movs	r3, #32
 8002c3c:	e003      	b.n	8002c46 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	fab3 f383 	clz	r3, r3
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	210f      	movs	r1, #15
 8002c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	401a      	ands	r2, r3
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	0a1b      	lsrs	r3, r3, #8
 8002c56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	fa93 f3a3 	rbit	r3, r3
 8002c5e:	61fb      	str	r3, [r7, #28]
  return result;
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002c6a:	2320      	movs	r3, #32
 8002c6c:	e003      	b.n	8002c76 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	fab3 f383 	clz	r3, r3
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002c84:	bf00      	nop
 8002c86:	372c      	adds	r7, #44	; 0x2c
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b088      	sub	sp, #32
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	fa93 f3a3 	rbit	r3, r3
 8002ca6:	60fb      	str	r3, [r7, #12]
  return result;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <LL_GPIO_Init+0x26>
    return 32U;
 8002cb2:	2320      	movs	r3, #32
 8002cb4:	e003      	b.n	8002cbe <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	fab3 f383 	clz	r3, r3
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002cc0:	e048      	b.n	8002d54 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	fa01 f303 	lsl.w	r3, r1, r3
 8002cce:	4013      	ands	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d03a      	beq.n	8002d4e <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d003      	beq.n	8002ce8 <LL_GPIO_Init+0x58>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d10e      	bne.n	8002d06 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	461a      	mov	r2, r3
 8002cee:	69b9      	ldr	r1, [r7, #24]
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f7ff fed7 	bl	8002aa4 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	6819      	ldr	r1, [r3, #0]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7ff feb7 	bl	8002a74 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	69b9      	ldr	r1, [r7, #24]
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7ff ff05 	bl	8002b1e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d111      	bne.n	8002d40 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	2bff      	cmp	r3, #255	; 0xff
 8002d20:	d807      	bhi.n	8002d32 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	461a      	mov	r2, r3
 8002d28:	69b9      	ldr	r1, [r7, #24]
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7ff ff34 	bl	8002b98 <LL_GPIO_SetAFPin_0_7>
 8002d30:	e006      	b.n	8002d40 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	461a      	mov	r2, r3
 8002d38:	69b9      	ldr	r1, [r7, #24]
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7ff ff69 	bl	8002c12 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	461a      	mov	r2, r3
 8002d46:	69b9      	ldr	r1, [r7, #24]
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f7ff fe56 	bl	80029fa <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	3301      	adds	r3, #1
 8002d52:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1af      	bne.n	8002cc2 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3720      	adds	r7, #32
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <LL_TIM_SetPrescaler>:
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <LL_TIM_SetAutoReload>:
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <LL_TIM_SetRepetitionCounter>:
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <LL_TIM_OC_SetCompareCH1>:
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <LL_TIM_OC_SetCompareCH2>:
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <LL_TIM_OC_SetCompareCH3>:
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <LL_TIM_OC_SetCompareCH4>:
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <LL_TIM_OC_SetCompareCH5>:
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	649a      	str	r2, [r3, #72]	; 0x48
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <LL_TIM_OC_SetCompareCH6>:
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	f043 0201 	orr.w	r2, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	615a      	str	r2, [r3, #20]
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a39      	ldr	r2, [pc, #228]	; (8002f84 <LL_TIM_Init+0xf8>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d00f      	beq.n	8002ec4 <LL_TIM_Init+0x38>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eaa:	d00b      	beq.n	8002ec4 <LL_TIM_Init+0x38>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a36      	ldr	r2, [pc, #216]	; (8002f88 <LL_TIM_Init+0xfc>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d007      	beq.n	8002ec4 <LL_TIM_Init+0x38>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a35      	ldr	r2, [pc, #212]	; (8002f8c <LL_TIM_Init+0x100>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d003      	beq.n	8002ec4 <LL_TIM_Init+0x38>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a34      	ldr	r2, [pc, #208]	; (8002f90 <LL_TIM_Init+0x104>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d106      	bne.n	8002ed2 <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a2b      	ldr	r2, [pc, #172]	; (8002f84 <LL_TIM_Init+0xf8>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d01b      	beq.n	8002f12 <LL_TIM_Init+0x86>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee0:	d017      	beq.n	8002f12 <LL_TIM_Init+0x86>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a28      	ldr	r2, [pc, #160]	; (8002f88 <LL_TIM_Init+0xfc>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d013      	beq.n	8002f12 <LL_TIM_Init+0x86>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a27      	ldr	r2, [pc, #156]	; (8002f8c <LL_TIM_Init+0x100>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d00f      	beq.n	8002f12 <LL_TIM_Init+0x86>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a26      	ldr	r2, [pc, #152]	; (8002f90 <LL_TIM_Init+0x104>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d00b      	beq.n	8002f12 <LL_TIM_Init+0x86>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a25      	ldr	r2, [pc, #148]	; (8002f94 <LL_TIM_Init+0x108>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d007      	beq.n	8002f12 <LL_TIM_Init+0x86>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a24      	ldr	r2, [pc, #144]	; (8002f98 <LL_TIM_Init+0x10c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d003      	beq.n	8002f12 <LL_TIM_Init+0x86>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a23      	ldr	r2, [pc, #140]	; (8002f9c <LL_TIM_Init+0x110>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d106      	bne.n	8002f20 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7ff ff2b 	bl	8002d88 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	4619      	mov	r1, r3
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f7ff ff17 	bl	8002d6c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a10      	ldr	r2, [pc, #64]	; (8002f84 <LL_TIM_Init+0xf8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00f      	beq.n	8002f66 <LL_TIM_Init+0xda>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a11      	ldr	r2, [pc, #68]	; (8002f90 <LL_TIM_Init+0x104>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d00b      	beq.n	8002f66 <LL_TIM_Init+0xda>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a10      	ldr	r2, [pc, #64]	; (8002f94 <LL_TIM_Init+0x108>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d007      	beq.n	8002f66 <LL_TIM_Init+0xda>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a0f      	ldr	r2, [pc, #60]	; (8002f98 <LL_TIM_Init+0x10c>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d003      	beq.n	8002f66 <LL_TIM_Init+0xda>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a0e      	ldr	r2, [pc, #56]	; (8002f9c <LL_TIM_Init+0x110>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d105      	bne.n	8002f72 <LL_TIM_Init+0xe6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7ff ff19 	bl	8002da4 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7ff ff7a 	bl	8002e6c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40012c00 	.word	0x40012c00
 8002f88:	40000400 	.word	0x40000400
 8002f8c:	40000800 	.word	0x40000800
 8002f90:	40013400 	.word	0x40013400
 8002f94:	40014000 	.word	0x40014000
 8002f98:	40014400 	.word	0x40014400
 8002f9c:	40014800 	.word	0x40014800

08002fa0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fb6:	d045      	beq.n	8003044 <LL_TIM_OC_Init+0xa4>
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fbe:	d848      	bhi.n	8003052 <LL_TIM_OC_Init+0xb2>
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc6:	d036      	beq.n	8003036 <LL_TIM_OC_Init+0x96>
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fce:	d840      	bhi.n	8003052 <LL_TIM_OC_Init+0xb2>
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fd6:	d027      	beq.n	8003028 <LL_TIM_OC_Init+0x88>
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fde:	d838      	bhi.n	8003052 <LL_TIM_OC_Init+0xb2>
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fe6:	d018      	beq.n	800301a <LL_TIM_OC_Init+0x7a>
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fee:	d830      	bhi.n	8003052 <LL_TIM_OC_Init+0xb2>
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d003      	beq.n	8002ffe <LL_TIM_OC_Init+0x5e>
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b10      	cmp	r3, #16
 8002ffa:	d007      	beq.n	800300c <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002ffc:	e029      	b.n	8003052 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 f8b5 	bl	8003170 <OC1Config>
 8003006:	4603      	mov	r3, r0
 8003008:	75fb      	strb	r3, [r7, #23]
      break;
 800300a:	e023      	b.n	8003054 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 f92e 	bl	8003270 <OC2Config>
 8003014:	4603      	mov	r3, r0
 8003016:	75fb      	strb	r3, [r7, #23]
      break;
 8003018:	e01c      	b.n	8003054 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 f9ab 	bl	8003378 <OC3Config>
 8003022:	4603      	mov	r3, r0
 8003024:	75fb      	strb	r3, [r7, #23]
      break;
 8003026:	e015      	b.n	8003054 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 fa28 	bl	8003480 <OC4Config>
 8003030:	4603      	mov	r3, r0
 8003032:	75fb      	strb	r3, [r7, #23]
      break;
 8003034:	e00e      	b.n	8003054 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f000 faa5 	bl	8003588 <OC5Config>
 800303e:	4603      	mov	r3, r0
 8003040:	75fb      	strb	r3, [r7, #23]
      break;
 8003042:	e007      	b.n	8003054 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 fb02 	bl	8003650 <OC6Config>
 800304c:	4603      	mov	r3, r0
 800304e:	75fb      	strb	r3, [r7, #23]
      break;
 8003050:	e000      	b.n	8003054 <LL_TIM_OC_Init+0xb4>
      break;
 8003052:	bf00      	nop
  }

  return result;
 8003054:	7dfb      	ldrb	r3, [r7, #23]
}
 8003056:	4618      	mov	r0, r3
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
	...

08003060 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 800306a:	2300      	movs	r3, #0
 800306c:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	7b12      	ldrb	r2, [r2, #12]
 8003078:	4313      	orrs	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	4313      	orrs	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	4313      	orrs	r3, r2
 8003096:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	89d2      	ldrh	r2, [r2, #14]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	4313      	orrs	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030cc:	4313      	orrs	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030da:	4313      	orrs	r3, r2
 80030dc:	60fb      	str	r3, [r7, #12]
  if (IS_TIM_ADVANCED_INSTANCE(TIMx))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a21      	ldr	r2, [pc, #132]	; (8003168 <LL_TIM_BDTR_Init+0x108>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d003      	beq.n	80030ee <LL_TIM_BDTR_Init+0x8e>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a20      	ldr	r2, [pc, #128]	; (800316c <LL_TIM_BDTR_Init+0x10c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d10d      	bne.n	800310a <LL_TIM_BDTR_Init+0xaa>
  {
    assert_param(IS_LL_TIM_BREAK_FILTER(TIM_BDTRInitStruct->BreakFilter));
    assert_param(IS_LL_TIM_BREAK_AFMODE(TIM_BDTRInitStruct->BreakAFMode));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, TIM_BDTRInitStruct->BreakAFMode);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	4313      	orrs	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a16      	ldr	r2, [pc, #88]	; (8003168 <LL_TIM_BDTR_Init+0x108>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d003      	beq.n	800311a <LL_TIM_BDTR_Init+0xba>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a15      	ldr	r2, [pc, #84]	; (800316c <LL_TIM_BDTR_Init+0x10c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d11b      	bne.n	8003152 <LL_TIM_BDTR_Init+0xf2>
    assert_param(IS_LL_TIM_BREAK2_POLARITY(TIM_BDTRInitStruct->Break2Polarity));
    assert_param(IS_LL_TIM_BREAK2_FILTER(TIM_BDTRInitStruct->Break2Filter));
    assert_param(IS_LL_TIM_BREAK2_AFMODE(TIM_BDTRInitStruct->Break2AFMode));

    /* Set the BREAK2 input related BDTR bit-fields */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	4313      	orrs	r3, r2
 8003126:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	4313      	orrs	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	4313      	orrs	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, TIM_BDTRInitStruct->Break2AFMode);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314e:	4313      	orrs	r3, r2
 8003150:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	40012c00 	.word	0x40012c00
 800316c:	40013400 	.word	0x40013400

08003170 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	f023 0201 	bic.w	r2, r3, #1
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f023 0303 	bic.w	r3, r3, #3
 800319e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	6812      	ldr	r2, [r2, #0]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f023 0202 	bic.w	r2, r3, #2
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f023 0201 	bic.w	r2, r3, #1
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a22      	ldr	r2, [pc, #136]	; (800325c <OC1Config+0xec>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d00f      	beq.n	80031f6 <OC1Config+0x86>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a21      	ldr	r2, [pc, #132]	; (8003260 <OC1Config+0xf0>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d00b      	beq.n	80031f6 <OC1Config+0x86>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a20      	ldr	r2, [pc, #128]	; (8003264 <OC1Config+0xf4>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d007      	beq.n	80031f6 <OC1Config+0x86>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a1f      	ldr	r2, [pc, #124]	; (8003268 <OC1Config+0xf8>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d003      	beq.n	80031f6 <OC1Config+0x86>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a1e      	ldr	r2, [pc, #120]	; (800326c <OC1Config+0xfc>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d11e      	bne.n	8003234 <OC1Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f023 0208 	bic.w	r2, r3, #8
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4313      	orrs	r3, r2
 8003204:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f023 0204 	bic.w	r2, r3, #4
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4313      	orrs	r3, r2
 8003214:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	4313      	orrs	r3, r2
 8003222:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	4313      	orrs	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	4619      	mov	r1, r3
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7ff fdba 	bl	8002dc0 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3718      	adds	r7, #24
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	40012c00 	.word	0x40012c00
 8003260:	40013400 	.word	0x40013400
 8003264:	40014000 	.word	0x40014000
 8003268:	40014400 	.word	0x40014400
 800326c:	40014800 	.word	0x40014800

08003270 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	f023 0210 	bic.w	r2, r3, #16
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800329e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	6812      	ldr	r2, [r2, #0]
 80032ae:	0212      	lsls	r2, r2, #8
 80032b0:	4313      	orrs	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f023 0220 	bic.w	r2, r3, #32
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	4313      	orrs	r3, r2
 80032c2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f023 0210 	bic.w	r2, r3, #16
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	4313      	orrs	r3, r2
 80032d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a23      	ldr	r2, [pc, #140]	; (8003364 <OC2Config+0xf4>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d00f      	beq.n	80032fc <OC2Config+0x8c>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a22      	ldr	r2, [pc, #136]	; (8003368 <OC2Config+0xf8>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d00b      	beq.n	80032fc <OC2Config+0x8c>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a21      	ldr	r2, [pc, #132]	; (800336c <OC2Config+0xfc>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d007      	beq.n	80032fc <OC2Config+0x8c>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a20      	ldr	r2, [pc, #128]	; (8003370 <OC2Config+0x100>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d003      	beq.n	80032fc <OC2Config+0x8c>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a1f      	ldr	r2, [pc, #124]	; (8003374 <OC2Config+0x104>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d11f      	bne.n	800333c <OC2Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	019b      	lsls	r3, r3, #6
 8003308:	4313      	orrs	r3, r2
 800330a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	019b      	lsls	r3, r3, #6
 8003318:	4313      	orrs	r3, r2
 800331a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4313      	orrs	r3, r2
 800332a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	4619      	mov	r1, r3
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7ff fd44 	bl	8002ddc <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40012c00 	.word	0x40012c00
 8003368:	40013400 	.word	0x40013400
 800336c:	40014000 	.word	0x40014000
 8003370:	40014400 	.word	0x40014400
 8003374:	40014800 	.word	0x40014800

08003378 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 0303 	bic.w	r3, r3, #3
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	6812      	ldr	r2, [r2, #0]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	021b      	lsls	r3, r3, #8
 80033c6:	4313      	orrs	r3, r2
 80033c8:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	021b      	lsls	r3, r3, #8
 80033d6:	4313      	orrs	r3, r2
 80033d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a23      	ldr	r2, [pc, #140]	; (800346c <OC3Config+0xf4>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d00f      	beq.n	8003402 <OC3Config+0x8a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a22      	ldr	r2, [pc, #136]	; (8003470 <OC3Config+0xf8>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d00b      	beq.n	8003402 <OC3Config+0x8a>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a21      	ldr	r2, [pc, #132]	; (8003474 <OC3Config+0xfc>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d007      	beq.n	8003402 <OC3Config+0x8a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a20      	ldr	r2, [pc, #128]	; (8003478 <OC3Config+0x100>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d003      	beq.n	8003402 <OC3Config+0x8a>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a1f      	ldr	r2, [pc, #124]	; (800347c <OC3Config+0x104>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d11f      	bne.n	8003442 <OC3Config+0xca>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	029b      	lsls	r3, r3, #10
 800340e:	4313      	orrs	r3, r2
 8003410:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	029b      	lsls	r3, r3, #10
 800341e:	4313      	orrs	r3, r2
 8003420:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	4313      	orrs	r3, r2
 8003430:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	69db      	ldr	r3, [r3, #28]
 800343c:	015b      	lsls	r3, r3, #5
 800343e:	4313      	orrs	r3, r2
 8003440:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	4619      	mov	r1, r3
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7ff fccf 	bl	8002df8 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3718      	adds	r7, #24
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40012c00 	.word	0x40012c00
 8003470:	40013400 	.word	0x40013400
 8003474:	40014000 	.word	0x40014000
 8003478:	40014400 	.word	0x40014400
 800347c:	40014800 	.word	0x40014800

08003480 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	6812      	ldr	r2, [r2, #0]
 80034be:	0212      	lsls	r2, r2, #8
 80034c0:	4313      	orrs	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	031b      	lsls	r3, r3, #12
 80034d0:	4313      	orrs	r3, r2
 80034d2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	031b      	lsls	r3, r3, #12
 80034e0:	4313      	orrs	r3, r2
 80034e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a23      	ldr	r2, [pc, #140]	; (8003574 <OC4Config+0xf4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d00f      	beq.n	800350c <OC4Config+0x8c>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a22      	ldr	r2, [pc, #136]	; (8003578 <OC4Config+0xf8>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d00b      	beq.n	800350c <OC4Config+0x8c>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a21      	ldr	r2, [pc, #132]	; (800357c <OC4Config+0xfc>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d007      	beq.n	800350c <OC4Config+0x8c>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a20      	ldr	r2, [pc, #128]	; (8003580 <OC4Config+0x100>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d003      	beq.n	800350c <OC4Config+0x8c>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a1f      	ldr	r2, [pc, #124]	; (8003584 <OC4Config+0x104>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d11f      	bne.n	800354c <OC4Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NP, TIM_OCInitStruct->OCNPolarity << 14U);
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	039b      	lsls	r3, r3, #14
 8003518:	4313      	orrs	r3, r2
 800351a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NE, TIM_OCInitStruct->OCNState << 14U);
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	039b      	lsls	r3, r3, #14
 8003528:	4313      	orrs	r3, r2
 800352a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	019b      	lsls	r3, r3, #6
 8003538:	4313      	orrs	r3, r2
 800353a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4N, TIM_OCInitStruct->OCNIdleState << 7U);
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	01db      	lsls	r3, r3, #7
 8003548:	4313      	orrs	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	4619      	mov	r1, r3
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7ff fc58 	bl	8002e14 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3718      	adds	r7, #24
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40012c00 	.word	0x40012c00
 8003578:	40013400 	.word	0x40013400
 800357c:	40014000 	.word	0x40014000
 8003580:	40014400 	.word	0x40014400
 8003584:	40014800 	.word	0x40014800

08003588 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a8:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	6812      	ldr	r2, [r2, #0]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	041b      	lsls	r3, r3, #16
 80035c8:	4313      	orrs	r3, r2
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	041b      	lsls	r3, r3, #16
 80035d8:	4313      	orrs	r3, r2
 80035da:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a17      	ldr	r2, [pc, #92]	; (800363c <OC5Config+0xb4>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d00f      	beq.n	8003604 <OC5Config+0x7c>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a16      	ldr	r2, [pc, #88]	; (8003640 <OC5Config+0xb8>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d00b      	beq.n	8003604 <OC5Config+0x7c>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a15      	ldr	r2, [pc, #84]	; (8003644 <OC5Config+0xbc>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d007      	beq.n	8003604 <OC5Config+0x7c>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a14      	ldr	r2, [pc, #80]	; (8003648 <OC5Config+0xc0>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d003      	beq.n	8003604 <OC5Config+0x7c>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a13      	ldr	r2, [pc, #76]	; (800364c <OC5Config+0xc4>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d109      	bne.n	8003618 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	021b      	lsls	r3, r3, #8
 8003612:	431a      	orrs	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	4619      	mov	r1, r3
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f7ff fc03 	bl	8002e30 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40012c00 	.word	0x40012c00
 8003640:	40013400 	.word	0x40013400
 8003644:	40014000 	.word	0x40014000
 8003648:	40014400 	.word	0x40014400
 800364c:	40014800 	.word	0x40014800

08003650 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003670:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003678:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	6812      	ldr	r2, [r2, #0]
 8003680:	0212      	lsls	r2, r2, #8
 8003682:	4313      	orrs	r3, r2
 8003684:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	051b      	lsls	r3, r3, #20
 8003692:	4313      	orrs	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	051b      	lsls	r3, r3, #20
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a16      	ldr	r2, [pc, #88]	; (8003704 <OC6Config+0xb4>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d00f      	beq.n	80036ce <OC6Config+0x7e>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a15      	ldr	r2, [pc, #84]	; (8003708 <OC6Config+0xb8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d00b      	beq.n	80036ce <OC6Config+0x7e>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a14      	ldr	r2, [pc, #80]	; (800370c <OC6Config+0xbc>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d007      	beq.n	80036ce <OC6Config+0x7e>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a13      	ldr	r2, [pc, #76]	; (8003710 <OC6Config+0xc0>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d003      	beq.n	80036ce <OC6Config+0x7e>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a12      	ldr	r2, [pc, #72]	; (8003714 <OC6Config+0xc4>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d109      	bne.n	80036e2 <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	029b      	lsls	r3, r3, #10
 80036dc:	431a      	orrs	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	4619      	mov	r1, r3
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7ff fbae 	bl	8002e50 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40012c00 	.word	0x40012c00
 8003708:	40013400 	.word	0x40013400
 800370c:	40014000 	.word	0x40014000
 8003710:	40014400 	.word	0x40014400
 8003714:	40014800 	.word	0x40014800

08003718 <__libc_init_array>:
 8003718:	b570      	push	{r4, r5, r6, lr}
 800371a:	4d0d      	ldr	r5, [pc, #52]	; (8003750 <__libc_init_array+0x38>)
 800371c:	4c0d      	ldr	r4, [pc, #52]	; (8003754 <__libc_init_array+0x3c>)
 800371e:	1b64      	subs	r4, r4, r5
 8003720:	10a4      	asrs	r4, r4, #2
 8003722:	2600      	movs	r6, #0
 8003724:	42a6      	cmp	r6, r4
 8003726:	d109      	bne.n	800373c <__libc_init_array+0x24>
 8003728:	4d0b      	ldr	r5, [pc, #44]	; (8003758 <__libc_init_array+0x40>)
 800372a:	4c0c      	ldr	r4, [pc, #48]	; (800375c <__libc_init_array+0x44>)
 800372c:	f000 f820 	bl	8003770 <_init>
 8003730:	1b64      	subs	r4, r4, r5
 8003732:	10a4      	asrs	r4, r4, #2
 8003734:	2600      	movs	r6, #0
 8003736:	42a6      	cmp	r6, r4
 8003738:	d105      	bne.n	8003746 <__libc_init_array+0x2e>
 800373a:	bd70      	pop	{r4, r5, r6, pc}
 800373c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003740:	4798      	blx	r3
 8003742:	3601      	adds	r6, #1
 8003744:	e7ee      	b.n	8003724 <__libc_init_array+0xc>
 8003746:	f855 3b04 	ldr.w	r3, [r5], #4
 800374a:	4798      	blx	r3
 800374c:	3601      	adds	r6, #1
 800374e:	e7f2      	b.n	8003736 <__libc_init_array+0x1e>
 8003750:	080037b0 	.word	0x080037b0
 8003754:	080037b0 	.word	0x080037b0
 8003758:	080037b0 	.word	0x080037b0
 800375c:	080037b4 	.word	0x080037b4

08003760 <memset>:
 8003760:	4402      	add	r2, r0
 8003762:	4603      	mov	r3, r0
 8003764:	4293      	cmp	r3, r2
 8003766:	d100      	bne.n	800376a <memset+0xa>
 8003768:	4770      	bx	lr
 800376a:	f803 1b01 	strb.w	r1, [r3], #1
 800376e:	e7f9      	b.n	8003764 <memset+0x4>

08003770 <_init>:
 8003770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003772:	bf00      	nop
 8003774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003776:	bc08      	pop	{r3}
 8003778:	469e      	mov	lr, r3
 800377a:	4770      	bx	lr

0800377c <_fini>:
 800377c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800377e:	bf00      	nop
 8003780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003782:	bc08      	pop	{r3}
 8003784:	469e      	mov	lr, r3
 8003786:	4770      	bx	lr
