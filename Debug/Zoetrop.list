
Zoetrop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003284  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800345c  0800345c  0001345c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003484  08003484  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003484  08003484  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003484  08003484  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003484  08003484  00013484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003488  08003488  00013488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800348c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08003498  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08003498  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a6de  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c8b  00000000  00000000  0002a71a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  0002c3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002cdc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003cc6  00000000  00000000  0002d700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009a14  00000000  00000000  000313c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce410  00000000  00000000  0003adda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001091ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002878  00000000  00000000  00109240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003444 	.word	0x08003444

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003444 	.word	0x08003444

08000218 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000228:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800022c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000230:	683a      	ldr	r2, [r7, #0]
 8000232:	431a      	orrs	r2, r3
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_CFGR2_GCOMP_Pos);
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	691b      	ldr	r3, [r3, #16]
 800023e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000242:	683a      	ldr	r2, [r7, #0]
 8000244:	2a00      	cmp	r2, #0
 8000246:	d002      	beq.n	800024e <LL_ADC_SetGainCompensation+0x36>
 8000248:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800024c:	e000      	b.n	8000250 <LL_ADC_SetGainCompensation+0x38>
 800024e:	2200      	movs	r2, #0
 8000250:	431a      	orrs	r2, r3
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	611a      	str	r2, [r3, #16]
}
 8000256:	bf00      	nop
 8000258:	370c      	adds	r7, #12
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr

08000262 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000262:	b480      	push	{r7}
 8000264:	b087      	sub	sp, #28
 8000266:	af00      	add	r7, sp, #0
 8000268:	60f8      	str	r0, [r7, #12]
 800026a:	60b9      	str	r1, [r7, #8]
 800026c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	3330      	adds	r3, #48	; 0x30
 8000272:	461a      	mov	r2, r3
 8000274:	68bb      	ldr	r3, [r7, #8]
 8000276:	0a1b      	lsrs	r3, r3, #8
 8000278:	009b      	lsls	r3, r3, #2
 800027a:	f003 030c 	and.w	r3, r3, #12
 800027e:	4413      	add	r3, r2
 8000280:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000282:	697b      	ldr	r3, [r7, #20]
 8000284:	681a      	ldr	r2, [r3, #0]
 8000286:	68bb      	ldr	r3, [r7, #8]
 8000288:	f003 031f 	and.w	r3, r3, #31
 800028c:	211f      	movs	r1, #31
 800028e:	fa01 f303 	lsl.w	r3, r1, r3
 8000292:	43db      	mvns	r3, r3
 8000294:	401a      	ands	r2, r3
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	0e9b      	lsrs	r3, r3, #26
 800029a:	f003 011f 	and.w	r1, r3, #31
 800029e:	68bb      	ldr	r3, [r7, #8]
 80002a0:	f003 031f 	and.w	r3, r3, #31
 80002a4:	fa01 f303 	lsl.w	r3, r1, r3
 80002a8:	431a      	orrs	r2, r3
 80002aa:	697b      	ldr	r3, [r7, #20]
 80002ac:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80002ae:	bf00      	nop
 80002b0:	371c      	adds	r7, #28
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr

080002ba <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80002ba:	b480      	push	{r7}
 80002bc:	b087      	sub	sp, #28
 80002be:	af00      	add	r7, sp, #0
 80002c0:	60f8      	str	r0, [r7, #12]
 80002c2:	60b9      	str	r1, [r7, #8]
 80002c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	3314      	adds	r3, #20
 80002ca:	461a      	mov	r2, r3
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	0e5b      	lsrs	r3, r3, #25
 80002d0:	009b      	lsls	r3, r3, #2
 80002d2:	f003 0304 	and.w	r3, r3, #4
 80002d6:	4413      	add	r3, r2
 80002d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80002da:	697b      	ldr	r3, [r7, #20]
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	68bb      	ldr	r3, [r7, #8]
 80002e0:	0d1b      	lsrs	r3, r3, #20
 80002e2:	f003 031f 	and.w	r3, r3, #31
 80002e6:	2107      	movs	r1, #7
 80002e8:	fa01 f303 	lsl.w	r3, r1, r3
 80002ec:	43db      	mvns	r3, r3
 80002ee:	401a      	ands	r2, r3
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	0d1b      	lsrs	r3, r3, #20
 80002f4:	f003 031f 	and.w	r3, r3, #31
 80002f8:	6879      	ldr	r1, [r7, #4]
 80002fa:	fa01 f303 	lsl.w	r3, r1, r3
 80002fe:	431a      	orrs	r2, r3
 8000300:	697b      	ldr	r3, [r7, #20]
 8000302:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000304:	bf00      	nop
 8000306:	371c      	adds	r7, #28
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr

08000310 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000310:	b480      	push	{r7}
 8000312:	b085      	sub	sp, #20
 8000314:	af00      	add	r7, sp, #0
 8000316:	60f8      	str	r0, [r7, #12]
 8000318:	60b9      	str	r1, [r7, #8]
 800031a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000328:	43db      	mvns	r3, r3
 800032a:	401a      	ands	r2, r3
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	f003 0318 	and.w	r3, r3, #24
 8000332:	4908      	ldr	r1, [pc, #32]	; (8000354 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000334:	40d9      	lsrs	r1, r3
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	400b      	ands	r3, r1
 800033a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800033e:	431a      	orrs	r2, r3
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000346:	bf00      	nop
 8000348:	3714      	adds	r7, #20
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	0007ffff 	.word	0x0007ffff

08000358 <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_GRP_INJECTED
  *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	691b      	ldr	r3, [r3, #16]
 8000366:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800036a:	f023 0303 	bic.w	r3, r3, #3
 800036e:	683a      	ldr	r2, [r7, #0]
 8000370:	431a      	orrs	r2, r3
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	611a      	str	r2, [r3, #16]
}
 8000376:	bf00      	nop
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr

08000382 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000382:	b480      	push	{r7}
 8000384:	b083      	sub	sp, #12
 8000386:	af00      	add	r7, sp, #0
 8000388:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	689b      	ldr	r3, [r3, #8]
 800038e:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000392:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000396:	687a      	ldr	r2, [r7, #4]
 8000398:	6093      	str	r3, [r2, #8]
}
 800039a:	bf00      	nop
 800039c:	370c      	adds	r7, #12
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr

080003a6 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80003a6:	b480      	push	{r7}
 80003a8:	b083      	sub	sp, #12
 80003aa:	af00      	add	r7, sp, #0
 80003ac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	689b      	ldr	r3, [r3, #8]
 80003b2:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80003b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80003ba:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80003c2:	bf00      	nop
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr

080003ce <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 80003ce:	b480      	push	{r7}
 80003d0:	b083      	sub	sp, #12
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	601a      	str	r2, [r3, #0]
}
 80003e2:	bf00      	nop
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
	...

080003f0 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b085      	sub	sp, #20
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
 80003f8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d02e      	beq.n	800045e <LL_TIM_OC_DisableFast+0x6e>
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	2b04      	cmp	r3, #4
 8000404:	d029      	beq.n	800045a <LL_TIM_OC_DisableFast+0x6a>
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	2b10      	cmp	r3, #16
 800040a:	d024      	beq.n	8000456 <LL_TIM_OC_DisableFast+0x66>
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	2b40      	cmp	r3, #64	; 0x40
 8000410:	d01f      	beq.n	8000452 <LL_TIM_OC_DisableFast+0x62>
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000418:	d019      	beq.n	800044e <LL_TIM_OC_DisableFast+0x5e>
 800041a:	683b      	ldr	r3, [r7, #0]
 800041c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000420:	d013      	beq.n	800044a <LL_TIM_OC_DisableFast+0x5a>
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000428:	d00d      	beq.n	8000446 <LL_TIM_OC_DisableFast+0x56>
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000430:	d007      	beq.n	8000442 <LL_TIM_OC_DisableFast+0x52>
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000438:	d101      	bne.n	800043e <LL_TIM_OC_DisableFast+0x4e>
 800043a:	2308      	movs	r3, #8
 800043c:	e010      	b.n	8000460 <LL_TIM_OC_DisableFast+0x70>
 800043e:	2309      	movs	r3, #9
 8000440:	e00e      	b.n	8000460 <LL_TIM_OC_DisableFast+0x70>
 8000442:	2307      	movs	r3, #7
 8000444:	e00c      	b.n	8000460 <LL_TIM_OC_DisableFast+0x70>
 8000446:	2306      	movs	r3, #6
 8000448:	e00a      	b.n	8000460 <LL_TIM_OC_DisableFast+0x70>
 800044a:	2305      	movs	r3, #5
 800044c:	e008      	b.n	8000460 <LL_TIM_OC_DisableFast+0x70>
 800044e:	2304      	movs	r3, #4
 8000450:	e006      	b.n	8000460 <LL_TIM_OC_DisableFast+0x70>
 8000452:	2303      	movs	r3, #3
 8000454:	e004      	b.n	8000460 <LL_TIM_OC_DisableFast+0x70>
 8000456:	2302      	movs	r3, #2
 8000458:	e002      	b.n	8000460 <LL_TIM_OC_DisableFast+0x70>
 800045a:	2301      	movs	r3, #1
 800045c:	e000      	b.n	8000460 <LL_TIM_OC_DisableFast+0x70>
 800045e:	2300      	movs	r3, #0
 8000460:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	3318      	adds	r3, #24
 8000466:	4619      	mov	r1, r3
 8000468:	7bfb      	ldrb	r3, [r7, #15]
 800046a:	4a0b      	ldr	r2, [pc, #44]	; (8000498 <LL_TIM_OC_DisableFast+0xa8>)
 800046c:	5cd3      	ldrb	r3, [r2, r3]
 800046e:	440b      	add	r3, r1
 8000470:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000472:	68bb      	ldr	r3, [r7, #8]
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	7bfb      	ldrb	r3, [r7, #15]
 8000478:	4908      	ldr	r1, [pc, #32]	; (800049c <LL_TIM_OC_DisableFast+0xac>)
 800047a:	5ccb      	ldrb	r3, [r1, r3]
 800047c:	4619      	mov	r1, r3
 800047e:	2304      	movs	r3, #4
 8000480:	408b      	lsls	r3, r1
 8000482:	43db      	mvns	r3, r3
 8000484:	401a      	ands	r2, r3
 8000486:	68bb      	ldr	r3, [r7, #8]
 8000488:	601a      	str	r2, [r3, #0]

}
 800048a:	bf00      	nop
 800048c:	3714      	adds	r7, #20
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	0800345c 	.word	0x0800345c
 800049c:	08003468 	.word	0x08003468

080004a0 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b085      	sub	sp, #20
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	2b01      	cmp	r3, #1
 80004ae:	d02e      	beq.n	800050e <LL_TIM_OC_EnablePreload+0x6e>
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	2b04      	cmp	r3, #4
 80004b4:	d029      	beq.n	800050a <LL_TIM_OC_EnablePreload+0x6a>
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	2b10      	cmp	r3, #16
 80004ba:	d024      	beq.n	8000506 <LL_TIM_OC_EnablePreload+0x66>
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	2b40      	cmp	r3, #64	; 0x40
 80004c0:	d01f      	beq.n	8000502 <LL_TIM_OC_EnablePreload+0x62>
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80004c8:	d019      	beq.n	80004fe <LL_TIM_OC_EnablePreload+0x5e>
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004d0:	d013      	beq.n	80004fa <LL_TIM_OC_EnablePreload+0x5a>
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80004d8:	d00d      	beq.n	80004f6 <LL_TIM_OC_EnablePreload+0x56>
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80004e0:	d007      	beq.n	80004f2 <LL_TIM_OC_EnablePreload+0x52>
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004e8:	d101      	bne.n	80004ee <LL_TIM_OC_EnablePreload+0x4e>
 80004ea:	2308      	movs	r3, #8
 80004ec:	e010      	b.n	8000510 <LL_TIM_OC_EnablePreload+0x70>
 80004ee:	2309      	movs	r3, #9
 80004f0:	e00e      	b.n	8000510 <LL_TIM_OC_EnablePreload+0x70>
 80004f2:	2307      	movs	r3, #7
 80004f4:	e00c      	b.n	8000510 <LL_TIM_OC_EnablePreload+0x70>
 80004f6:	2306      	movs	r3, #6
 80004f8:	e00a      	b.n	8000510 <LL_TIM_OC_EnablePreload+0x70>
 80004fa:	2305      	movs	r3, #5
 80004fc:	e008      	b.n	8000510 <LL_TIM_OC_EnablePreload+0x70>
 80004fe:	2304      	movs	r3, #4
 8000500:	e006      	b.n	8000510 <LL_TIM_OC_EnablePreload+0x70>
 8000502:	2303      	movs	r3, #3
 8000504:	e004      	b.n	8000510 <LL_TIM_OC_EnablePreload+0x70>
 8000506:	2302      	movs	r3, #2
 8000508:	e002      	b.n	8000510 <LL_TIM_OC_EnablePreload+0x70>
 800050a:	2301      	movs	r3, #1
 800050c:	e000      	b.n	8000510 <LL_TIM_OC_EnablePreload+0x70>
 800050e:	2300      	movs	r3, #0
 8000510:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	3318      	adds	r3, #24
 8000516:	4619      	mov	r1, r3
 8000518:	7bfb      	ldrb	r3, [r7, #15]
 800051a:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <LL_TIM_OC_EnablePreload+0xa4>)
 800051c:	5cd3      	ldrb	r3, [r2, r3]
 800051e:	440b      	add	r3, r1
 8000520:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	7bfb      	ldrb	r3, [r7, #15]
 8000528:	4907      	ldr	r1, [pc, #28]	; (8000548 <LL_TIM_OC_EnablePreload+0xa8>)
 800052a:	5ccb      	ldrb	r3, [r1, r3]
 800052c:	4619      	mov	r1, r3
 800052e:	2308      	movs	r3, #8
 8000530:	408b      	lsls	r3, r1
 8000532:	431a      	orrs	r2, r3
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	601a      	str	r2, [r3, #0]
}
 8000538:	bf00      	nop
 800053a:	3714      	adds	r7, #20
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	0800345c 	.word	0x0800345c
 8000548:	08003468 	.word	0x08003468

0800054c <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	689b      	ldr	r3, [r3, #8]
 800055a:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800055e:	f023 0307 	bic.w	r3, r3, #7
 8000562:	683a      	ldr	r2, [r7, #0]
 8000564:	431a      	orrs	r2, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	609a      	str	r2, [r3, #8]
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr

08000576 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC4REF
  *         @arg @ref LL_TIM_TRGO_ENCODERCLK
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000576:	b480      	push	{r7}
 8000578:	b083      	sub	sp, #12
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
 800057e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800058c:	683a      	ldr	r2, [r7, #0]
 800058e:	431a      	orrs	r2, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	605a      	str	r2, [r3, #4]
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <LL_TIM_SetTriggerOutput2>:
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_RISING
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	431a      	orrs	r2, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	605a      	str	r2, [r3, #4]
}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80005c6:	b480      	push	{r7}
 80005c8:	b083      	sub	sp, #12
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	689b      	ldr	r3, [r3, #8]
 80005d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	609a      	str	r2, [r3, #8]
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
	...

080005e8 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b087      	sub	sp, #28
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 80005f2:	4a18      	ldr	r2, [pc, #96]	; (8000654 <LL_SYSCFG_SetEXTISource+0x6c>)
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	f003 0303 	and.w	r3, r3, #3
 80005fa:	3302      	adds	r3, #2
 80005fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	0c1b      	lsrs	r3, r3, #16
 8000604:	43db      	mvns	r3, r3
 8000606:	ea02 0103 	and.w	r1, r2, r3
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	0c1b      	lsrs	r3, r3, #16
 800060e:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000610:	693b      	ldr	r3, [r7, #16]
 8000612:	fa93 f3a3 	rbit	r3, r3
 8000616:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d101      	bne.n	8000626 <LL_SYSCFG_SetEXTISource+0x3e>
  {
    return 32U;
 8000622:	2320      	movs	r3, #32
 8000624:	e003      	b.n	800062e <LL_SYSCFG_SetEXTISource+0x46>
  }
  return __builtin_clz(value);
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	fab3 f383 	clz	r3, r3
 800062c:	b2db      	uxtb	r3, r3
 800062e:	f003 031f 	and.w	r3, r3, #31
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	409a      	lsls	r2, r3
 8000636:	4807      	ldr	r0, [pc, #28]	; (8000654 <LL_SYSCFG_SetEXTISource+0x6c>)
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	f003 0303 	and.w	r3, r3, #3
 800063e:	430a      	orrs	r2, r1
 8000640:	3302      	adds	r3, #2
 8000642:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000646:	bf00      	nop
 8000648:	371c      	adds	r7, #28
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	40010000 	.word	0x40010000

08000658 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000658:	b480      	push	{r7}
 800065a:	b08b      	sub	sp, #44	; 0x2c
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	fa93 f3a3 	rbit	r3, r3
 8000672:	613b      	str	r3, [r7, #16]
  return result;
 8000674:	693b      	ldr	r3, [r7, #16]
 8000676:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000678:	69bb      	ldr	r3, [r7, #24]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d101      	bne.n	8000682 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800067e:	2320      	movs	r3, #32
 8000680:	e003      	b.n	800068a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000682:	69bb      	ldr	r3, [r7, #24]
 8000684:	fab3 f383 	clz	r3, r3
 8000688:	b2db      	uxtb	r3, r3
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	2103      	movs	r1, #3
 800068e:	fa01 f303 	lsl.w	r3, r1, r3
 8000692:	43db      	mvns	r3, r3
 8000694:	401a      	ands	r2, r3
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800069a:	6a3b      	ldr	r3, [r7, #32]
 800069c:	fa93 f3a3 	rbit	r3, r3
 80006a0:	61fb      	str	r3, [r7, #28]
  return result;
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80006a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d101      	bne.n	80006b0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80006ac:	2320      	movs	r3, #32
 80006ae:	e003      	b.n	80006b8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80006b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b2:	fab3 f383 	clz	r3, r3
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	6879      	ldr	r1, [r7, #4]
 80006bc:	fa01 f303 	lsl.w	r3, r1, r3
 80006c0:	431a      	orrs	r2, r3
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	601a      	str	r2, [r3, #0]
}
 80006c6:	bf00      	nop
 80006c8:	372c      	adds	r7, #44	; 0x2c
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80006d2:	b480      	push	{r7}
 80006d4:	b08b      	sub	sp, #44	; 0x2c
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	60f8      	str	r0, [r7, #12]
 80006da:	60b9      	str	r1, [r7, #8]
 80006dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	68da      	ldr	r2, [r3, #12]
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	fa93 f3a3 	rbit	r3, r3
 80006ec:	613b      	str	r3, [r7, #16]
  return result;
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80006f2:	69bb      	ldr	r3, [r7, #24]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d101      	bne.n	80006fc <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80006f8:	2320      	movs	r3, #32
 80006fa:	e003      	b.n	8000704 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80006fc:	69bb      	ldr	r3, [r7, #24]
 80006fe:	fab3 f383 	clz	r3, r3
 8000702:	b2db      	uxtb	r3, r3
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	2103      	movs	r1, #3
 8000708:	fa01 f303 	lsl.w	r3, r1, r3
 800070c:	43db      	mvns	r3, r3
 800070e:	401a      	ands	r2, r3
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000714:	6a3b      	ldr	r3, [r7, #32]
 8000716:	fa93 f3a3 	rbit	r3, r3
 800071a:	61fb      	str	r3, [r7, #28]
  return result;
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000722:	2b00      	cmp	r3, #0
 8000724:	d101      	bne.n	800072a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000726:	2320      	movs	r3, #32
 8000728:	e003      	b.n	8000732 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800072a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072c:	fab3 f383 	clz	r3, r3
 8000730:	b2db      	uxtb	r3, r3
 8000732:	005b      	lsls	r3, r3, #1
 8000734:	6879      	ldr	r1, [r7, #4]
 8000736:	fa01 f303 	lsl.w	r3, r1, r3
 800073a:	431a      	orrs	r2, r3
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	60da      	str	r2, [r3, #12]
}
 8000740:	bf00      	nop
 8000742:	372c      	adds	r7, #44	; 0x2c
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	683a      	ldr	r2, [r7, #0]
 800075a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000772:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000774:	4907      	ldr	r1, [pc, #28]	; (8000794 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4313      	orrs	r3, r2
 800077a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800077e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4013      	ands	r3, r2
 8000784:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000786:	68fb      	ldr	r3, [r7, #12]
}
 8000788:	bf00      	nop
 800078a:	3714      	adds	r7, #20
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	40021000 	.word	0x40021000

08000798 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80007a0:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80007a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80007a4:	4907      	ldr	r1, [pc, #28]	; (80007c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	4313      	orrs	r3, r2
 80007aa:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80007ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4013      	ands	r3, r2
 80007b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007b6:	68fb      	ldr	r3, [r7, #12]
}
 80007b8:	bf00      	nop
 80007ba:	3714      	adds	r7, #20
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	40021000 	.word	0x40021000

080007c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007cc:	f000 fb8f 	bl	8000eee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d0:	f000 f80b 	bl	80007ea <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d4:	f000 fa4e 	bl	8000c74 <MX_GPIO_Init>
  MX_ADC1_Init();
 80007d8:	f000 f86c 	bl	80008b4 <MX_ADC1_Init>
  MX_ADC2_Init();
 80007dc:	f000 f914 	bl	8000a08 <MX_ADC2_Init>
  MX_TIM1_Init();
 80007e0:	f000 f9a0 	bl	8000b24 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */


  //Initialize timers
  timers_init();
 80007e4:	f000 fb4c 	bl	8000e80 <timers_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <main+0x20>

080007ea <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b0a4      	sub	sp, #144	; 0x90
 80007ee:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007f4:	2238      	movs	r2, #56	; 0x38
 80007f6:	2100      	movs	r1, #0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f002 fe1b 	bl	8003434 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800080e:	463b      	mov	r3, r7
 8000810:	2244      	movs	r2, #68	; 0x44
 8000812:	2100      	movs	r1, #0
 8000814:	4618      	mov	r0, r3
 8000816:	f002 fe0d 	bl	8003434 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800081a:	2000      	movs	r0, #0
 800081c:	f000 fcbc 	bl	8001198 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000820:	2301      	movs	r3, #1
 8000822:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000824:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000828:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082a:	2302      	movs	r3, #2
 800082c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800082e:	2303      	movs	r3, #3
 8000830:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000832:	2301      	movs	r3, #1
 8000834:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000836:	2314      	movs	r3, #20
 8000838:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800083c:	2302      	movs	r3, #2
 800083e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000842:	2302      	movs	r3, #2
 8000844:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000848:	2302      	movs	r3, #2
 800084a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000852:	4618      	mov	r0, r3
 8000854:	f000 fd54 	bl	8001300 <HAL_RCC_OscConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800085e:	f000 fa8b 	bl	8000d78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000862:	230f      	movs	r3, #15
 8000864:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000866:	2303      	movs	r3, #3
 8000868:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000876:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800087a:	2104      	movs	r1, #4
 800087c:	4618      	mov	r0, r3
 800087e:	f001 f857 	bl	8001930 <HAL_RCC_ClockConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000888:	f000 fa76 	bl	8000d78 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800088c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000890:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000892:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000896:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000898:	463b      	mov	r3, r7
 800089a:	4618      	mov	r0, r3
 800089c:	f001 fa28 	bl	8001cf0 <HAL_RCCEx_PeriphCLKConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008a6:	f000 fa67 	bl	8000d78 <Error_Handler>
  }
}
 80008aa:	bf00      	nop
 80008ac:	3790      	adds	r7, #144	; 0x90
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b094      	sub	sp, #80	; 0x50
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80008ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80008c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]
 80008d6:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80008d8:	f107 0318 	add.w	r3, r7, #24
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	463b      	mov	r3, r7
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
 80008f4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC12);
 80008f6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80008fa:	f7ff ff35 	bl	8000768 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80008fe:	2001      	movs	r0, #1
 8000900:	f7ff ff32 	bl	8000768 <LL_AHB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA0   ------> ADC1_IN1
  */
  GPIO_InitStruct.Pin = POT_1_Pin;
 8000904:	2301      	movs	r3, #1
 8000906:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000908:	2303      	movs	r3, #3
 800090a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800090c:	2300      	movs	r3, #0
 800090e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(POT_1_GPIO_Port, &GPIO_InitStruct);
 8000910:	463b      	mov	r3, r7
 8000912:	4619      	mov	r1, r3
 8000914:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000918:	f002 f824 	bl	8002964 <LL_GPIO_Init>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 800091c:	2300      	movs	r3, #0
 800091e:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000920:	2300      	movs	r3, #0
 8000922:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000924:	2300      	movs	r3, #0
 8000926:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000928:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800092c:	4619      	mov	r1, r3
 800092e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000932:	f001 fc33 	bl	800219c <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000936:	2300      	movs	r3, #0
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 800093a:	2300      	movs	r3, #0
 800093c:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800093e:	2300      	movs	r3, #0
 8000940:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000942:	2300      	movs	r3, #0
 8000944:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000946:	2300      	movs	r3, #0
 8000948:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 800094a:	2300      	movs	r3, #0
 800094c:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 800094e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000952:	4619      	mov	r1, r3
 8000954:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000958:	f001 fc46 	bl	80021e8 <LL_ADC_REG_Init>
  LL_ADC_SetGainCompensation(ADC1, 0);
 800095c:	2100      	movs	r1, #0
 800095e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000962:	f7ff fc59 	bl	8000218 <LL_ADC_SetGainCompensation>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 8000966:	2100      	movs	r1, #0
 8000968:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800096c:	f7ff fcf4 	bl	8000358 <LL_ADC_SetOverSamplingScope>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8000970:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000974:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 800097a:	f107 0318 	add.w	r3, r7, #24
 800097e:	4619      	mov	r1, r3
 8000980:	481c      	ldr	r0, [pc, #112]	; (80009f4 <MX_ADC1_Init+0x140>)
 8000982:	f001 fbcb 	bl	800211c <LL_ADC_CommonInit>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 8000986:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800098a:	f7ff fcfa 	bl	8000382 <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 800098e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000992:	f7ff fd08 	bl	80003a6 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000996:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <MX_ADC1_Init+0x144>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	099b      	lsrs	r3, r3, #6
 800099c:	4a17      	ldr	r2, [pc, #92]	; (80009fc <MX_ADC1_Init+0x148>)
 800099e:	fba2 2303 	umull	r2, r3, r2, r3
 80009a2:	099a      	lsrs	r2, r3, #6
 80009a4:	4613      	mov	r3, r2
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	4413      	add	r3, r2
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <MX_ADC1_Init+0x14c>)
 80009b0:	fba3 2302 	umull	r2, r3, r3, r2
 80009b4:	08db      	lsrs	r3, r3, #3
 80009b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 80009b8:	e002      	b.n	80009c0 <MX_ADC1_Init+0x10c>
  {
    wait_loop_index--;
 80009ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009bc:	3b01      	subs	r3, #1
 80009be:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 80009c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d1f9      	bne.n	80009ba <MX_ADC1_Init+0x106>
  }
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 80009c6:	4a0f      	ldr	r2, [pc, #60]	; (8000a04 <MX_ADC1_Init+0x150>)
 80009c8:	2106      	movs	r1, #6
 80009ca:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80009ce:	f7ff fc48 	bl	8000262 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80009d2:	2200      	movs	r2, #0
 80009d4:	490b      	ldr	r1, [pc, #44]	; (8000a04 <MX_ADC1_Init+0x150>)
 80009d6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80009da:	f7ff fc6e 	bl	80002ba <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 80009de:	227f      	movs	r2, #127	; 0x7f
 80009e0:	4908      	ldr	r1, [pc, #32]	; (8000a04 <MX_ADC1_Init+0x150>)
 80009e2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80009e6:	f7ff fc93 	bl	8000310 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	3750      	adds	r7, #80	; 0x50
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	50000300 	.word	0x50000300
 80009f8:	20000000 	.word	0x20000000
 80009fc:	053e2d63 	.word	0x053e2d63
 8000a00:	cccccccd 	.word	0xcccccccd
 8000a04:	04300002 	.word	0x04300002

08000a08 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b090      	sub	sp, #64	; 0x40
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000a0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000a1a:	f107 0318 	add.w	r3, r7, #24
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]
 8000a2a:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]
 8000a3a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC12);
 8000a3c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a40:	f7ff fe92 	bl	8000768 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000a44:	2001      	movs	r0, #1
 8000a46:	f7ff fe8f 	bl	8000768 <LL_AHB2_GRP1_EnableClock>
  /**ADC2 GPIO Configuration
  PA1   ------> ADC2_IN2
  */
  GPIO_InitStruct.Pin = POT_2_Pin;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(POT_2_GPIO_Port, &GPIO_InitStruct);
 8000a56:	463b      	mov	r3, r7
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5e:	f001 ff81 	bl	8002964 <LL_GPIO_Init>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000a62:	2300      	movs	r3, #0
 8000a64:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000a66:	2300      	movs	r3, #0
 8000a68:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8000a6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a72:	4619      	mov	r1, r3
 8000a74:	4826      	ldr	r0, [pc, #152]	; (8000b10 <MX_ADC2_Init+0x108>)
 8000a76:	f001 fb91 	bl	800219c <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8000a92:	f107 0318 	add.w	r3, r7, #24
 8000a96:	4619      	mov	r1, r3
 8000a98:	481d      	ldr	r0, [pc, #116]	; (8000b10 <MX_ADC2_Init+0x108>)
 8000a9a:	f001 fba5 	bl	80021e8 <LL_ADC_REG_Init>
  LL_ADC_SetGainCompensation(ADC2, 0);
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	481b      	ldr	r0, [pc, #108]	; (8000b10 <MX_ADC2_Init+0x108>)
 8000aa2:	f7ff fbb9 	bl	8000218 <LL_ADC_SetGainCompensation>
  LL_ADC_SetOverSamplingScope(ADC2, LL_ADC_OVS_DISABLE);
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4819      	ldr	r0, [pc, #100]	; (8000b10 <MX_ADC2_Init+0x108>)
 8000aaa:	f7ff fc55 	bl	8000358 <LL_ADC_SetOverSamplingScope>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC2);
 8000aae:	4818      	ldr	r0, [pc, #96]	; (8000b10 <MX_ADC2_Init+0x108>)
 8000ab0:	f7ff fc67 	bl	8000382 <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC2);
 8000ab4:	4816      	ldr	r0, [pc, #88]	; (8000b10 <MX_ADC2_Init+0x108>)
 8000ab6:	f7ff fc76 	bl	80003a6 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000aba:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <MX_ADC2_Init+0x10c>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	099b      	lsrs	r3, r3, #6
 8000ac0:	4a15      	ldr	r2, [pc, #84]	; (8000b18 <MX_ADC2_Init+0x110>)
 8000ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac6:	099a      	lsrs	r2, r3, #6
 8000ac8:	4613      	mov	r3, r2
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	4413      	add	r3, r2
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <MX_ADC2_Init+0x114>)
 8000ad4:	fba3 2302 	umull	r2, r3, r3, r2
 8000ad8:	08db      	lsrs	r3, r3, #3
 8000ada:	63fb      	str	r3, [r7, #60]	; 0x3c
  while(wait_loop_index != 0)
 8000adc:	e002      	b.n	8000ae4 <MX_ADC2_Init+0xdc>
  {
    wait_loop_index--;
 8000ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ae0:	3b01      	subs	r3, #1
 8000ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  while(wait_loop_index != 0)
 8000ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d1f9      	bne.n	8000ade <MX_ADC2_Init+0xd6>
  }
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_2);
 8000aea:	4a0d      	ldr	r2, [pc, #52]	; (8000b20 <MX_ADC2_Init+0x118>)
 8000aec:	2106      	movs	r1, #6
 8000aee:	4808      	ldr	r0, [pc, #32]	; (8000b10 <MX_ADC2_Init+0x108>)
 8000af0:	f7ff fbb7 	bl	8000262 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000af4:	2200      	movs	r2, #0
 8000af6:	490a      	ldr	r1, [pc, #40]	; (8000b20 <MX_ADC2_Init+0x118>)
 8000af8:	4805      	ldr	r0, [pc, #20]	; (8000b10 <MX_ADC2_Init+0x108>)
 8000afa:	f7ff fbde 	bl	80002ba <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_2, LL_ADC_SINGLE_ENDED);
 8000afe:	227f      	movs	r2, #127	; 0x7f
 8000b00:	4907      	ldr	r1, [pc, #28]	; (8000b20 <MX_ADC2_Init+0x118>)
 8000b02:	4803      	ldr	r0, [pc, #12]	; (8000b10 <MX_ADC2_Init+0x108>)
 8000b04:	f7ff fc04 	bl	8000310 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	3740      	adds	r7, #64	; 0x40
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	50000100 	.word	0x50000100
 8000b14:	20000000 	.word	0x20000000
 8000b18:	053e2d63 	.word	0x053e2d63
 8000b1c:	cccccccd 	.word	0xcccccccd
 8000b20:	08600004 	.word	0x08600004

08000b24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b0a0      	sub	sp, #128	; 0x80
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000b2a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
 8000b38:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000b3a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b3e:	2220      	movs	r2, #32
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f002 fc76 	bl	8003434 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8000b48:	f107 031c 	add.w	r3, r7, #28
 8000b4c:	2230      	movs	r2, #48	; 0x30
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f002 fc6f 	bl	8003434 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
 8000b64:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8000b66:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000b6a:	f7ff fe15 	bl	8000798 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000b74:	2300      	movs	r3, #0
 8000b76:	673b      	str	r3, [r7, #112]	; 0x70
  TIM_InitStruct.Autoreload = 8000;
 8000b78:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8000b7c:	677b      	str	r3, [r7, #116]	; 0x74
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	67bb      	str	r3, [r7, #120]	; 0x78
  TIM_InitStruct.RepetitionCounter = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	67fb      	str	r3, [r7, #124]	; 0x7c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000b86:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4838      	ldr	r0, [pc, #224]	; (8000c70 <MX_TIM1_Init+0x14c>)
 8000b8e:	f001 ffe7 	bl	8002b60 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8000b92:	4837      	ldr	r0, [pc, #220]	; (8000c70 <MX_TIM1_Init+0x14c>)
 8000b94:	f7ff fc1b 	bl	80003ce <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4835      	ldr	r0, [pc, #212]	; (8000c70 <MX_TIM1_Init+0x14c>)
 8000b9c:	f7ff fcd6 	bl	800054c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	4833      	ldr	r0, [pc, #204]	; (8000c70 <MX_TIM1_Init+0x14c>)
 8000ba4:	f7ff fc7c 	bl	80004a0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000ba8:	2360      	movs	r3, #96	; 0x60
 8000baa:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_OC_InitStruct.CompareValue = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	667b      	str	r3, [r7, #100]	; 0x64
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	66bb      	str	r3, [r7, #104]	; 0x68
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000bc8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000bcc:	461a      	mov	r2, r3
 8000bce:	2101      	movs	r1, #1
 8000bd0:	4827      	ldr	r0, [pc, #156]	; (8000c70 <MX_TIM1_Init+0x14c>)
 8000bd2:	f002 f84f 	bl	8002c74 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	4825      	ldr	r0, [pc, #148]	; (8000c70 <MX_TIM1_Init+0x14c>)
 8000bda:	f7ff fc09 	bl	80003f0 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8000bde:	2100      	movs	r1, #0
 8000be0:	4823      	ldr	r0, [pc, #140]	; (8000c70 <MX_TIM1_Init+0x14c>)
 8000be2:	f7ff fcc8 	bl	8000576 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 8000be6:	2100      	movs	r1, #0
 8000be8:	4821      	ldr	r0, [pc, #132]	; (8000c70 <MX_TIM1_Init+0x14c>)
 8000bea:	f7ff fcd9 	bl	80005a0 <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8000bee:	4820      	ldr	r0, [pc, #128]	; (8000c70 <MX_TIM1_Init+0x14c>)
 8000bf0:	f7ff fce9 	bl	80005c6 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8000c0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 8000c10:	2300      	movs	r3, #0
 8000c12:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_BDTRInitStruct.BreakAFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8000c14:	2300      	movs	r3, #0
 8000c16:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 8000c1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c20:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_BDTRInitStruct.Break2AFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8000c26:	2300      	movs	r3, #0
 8000c28:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	4619      	mov	r1, r3
 8000c34:	480e      	ldr	r0, [pc, #56]	; (8000c70 <MX_TIM1_Init+0x14c>)
 8000c36:	f002 f87d 	bl	8002d34 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	f7ff fd94 	bl	8000768 <LL_AHB2_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA8   ------> TIM1_CH1
  */
  GPIO_InitStruct.Pin = SILNIK_PWM_Pin;
 8000c40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c44:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c46:	2302      	movs	r3, #2
 8000c48:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8000c56:	2306      	movs	r3, #6
 8000c58:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(SILNIK_PWM_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c62:	f001 fe7f 	bl	8002964 <LL_GPIO_Init>

}
 8000c66:	bf00      	nop
 8000c68:	3780      	adds	r7, #128	; 0x80
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40012c00 	.word	0x40012c00

08000c74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	; 0x28
 8000c78:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000c7a:	f107 031c 	add.w	r3, r7, #28
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
 8000c94:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8000c96:	2020      	movs	r0, #32
 8000c98:	f7ff fd66 	bl	8000768 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	f7ff fd63 	bl	8000768 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000ca2:	2002      	movs	r0, #2
 8000ca4:	f7ff fd60 	bl	8000768 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_EN_GPIO_Port, LED_EN_Pin);
 8000ca8:	2110      	movs	r1, #16
 8000caa:	4832      	ldr	r0, [pc, #200]	; (8000d74 <MX_GPIO_Init+0x100>)
 8000cac:	f7ff fd4e 	bl	800074c <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE2);
 8000cb0:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	f7ff fc97 	bl	80005e8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE3);
 8000cba:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f7ff fc92 	bl	80005e8 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8000cc4:	2304      	movs	r3, #4
 8000cc6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000cda:	f107 031c 	add.w	r3, r7, #28
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f001 fbfc 	bl	80024dc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8000ce4:	2308      	movs	r3, #8
 8000ce6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000cfa:	f107 031c 	add.w	r3, r7, #28
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f001 fbec 	bl	80024dc <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(ENC_GPIO_Port, ENC_Pin, LL_GPIO_PULL_NO);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2104      	movs	r1, #4
 8000d08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0c:	f7ff fce1 	bl	80006d2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_3, LL_GPIO_PULL_NO);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2108      	movs	r1, #8
 8000d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d18:	f7ff fcdb 	bl	80006d2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(ENC_GPIO_Port, ENC_Pin, LL_GPIO_MODE_INPUT);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2104      	movs	r1, #4
 8000d20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d24:	f7ff fc98 	bl	8000658 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_3, LL_GPIO_MODE_INPUT);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2108      	movs	r1, #8
 8000d2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d30:	f7ff fc92 	bl	8000658 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = ON_OFF_Pin;
 8000d34:	2310      	movs	r3, #16
 8000d36:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	4619      	mov	r1, r3
 8000d44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d48:	f001 fe0c 	bl	8002964 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_EN_Pin;
 8000d4c:	2310      	movs	r3, #16
 8000d4e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d50:	2301      	movs	r3, #1
 8000d52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LED_EN_GPIO_Port, &GPIO_InitStruct);
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	4619      	mov	r1, r3
 8000d64:	4803      	ldr	r0, [pc, #12]	; (8000d74 <MX_GPIO_Init+0x100>)
 8000d66:	f001 fdfd 	bl	8002964 <LL_GPIO_Init>

}
 8000d6a:	bf00      	nop
 8000d6c:	3728      	adds	r7, #40	; 0x28
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	48000400 	.word	0x48000400

08000d78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d7c:	b672      	cpsid	i
}
 8000d7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <Error_Handler+0x8>
	...

08000d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <HAL_MspInit+0x44>)
 8000d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d8e:	4a0e      	ldr	r2, [pc, #56]	; (8000dc8 <HAL_MspInit+0x44>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6613      	str	r3, [r2, #96]	; 0x60
 8000d96:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <HAL_MspInit+0x44>)
 8000d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <HAL_MspInit+0x44>)
 8000da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da6:	4a08      	ldr	r2, [pc, #32]	; (8000dc8 <HAL_MspInit+0x44>)
 8000da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dac:	6593      	str	r3, [r2, #88]	; 0x58
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_MspInit+0x44>)
 8000db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db6:	603b      	str	r3, [r7, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000dba:	f000 fa91 	bl	80012e0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40021000 	.word	0x40021000

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <NMI_Handler+0x4>

08000dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <HardFault_Handler+0x4>

08000dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <MemManage_Handler+0x4>

08000dde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <BusFault_Handler+0x4>

08000de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <UsageFault_Handler+0x4>

08000dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e18:	f000 f8bc 	bl	8000f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <SystemInit+0x20>)
 8000e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e2a:	4a05      	ldr	r2, [pc, #20]	; (8000e40 <SystemInit+0x20>)
 8000e2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <LL_TIM_EnableCounter>:
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f043 0201 	orr.w	r2, r3, #1
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	601a      	str	r2, [r3, #0]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <LL_TIM_OC_SetCompareCH1>:
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	683a      	ldr	r2, [r7, #0]
 8000e72:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <timers_init>:
#define timerPWM 	TIM1
#define PWM_MAX 	8000

//Initialization of timer perypherial (called once at the begining)
void timers_init()
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
	LL_TIM_OC_SetCompareCH1(timerPWM,0);
 8000e84:	2100      	movs	r1, #0
 8000e86:	4804      	ldr	r0, [pc, #16]	; (8000e98 <timers_init+0x18>)
 8000e88:	f7ff ffec 	bl	8000e64 <LL_TIM_OC_SetCompareCH1>
	LL_TIM_EnableCounter(timerPWM);
 8000e8c:	4802      	ldr	r0, [pc, #8]	; (8000e98 <timers_init+0x18>)
 8000e8e:	f7ff ffd9 	bl	8000e44 <LL_TIM_EnableCounter>
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40012c00 	.word	0x40012c00

08000e9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e9c:	480d      	ldr	r0, [pc, #52]	; (8000ed4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e9e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ea0:	480d      	ldr	r0, [pc, #52]	; (8000ed8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ea2:	490e      	ldr	r1, [pc, #56]	; (8000edc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ea4:	4a0e      	ldr	r2, [pc, #56]	; (8000ee0 <LoopForever+0xe>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ea8:	e002      	b.n	8000eb0 <LoopCopyDataInit>

08000eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eae:	3304      	adds	r3, #4

08000eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb4:	d3f9      	bcc.n	8000eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ee4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000eb8:	4c0b      	ldr	r4, [pc, #44]	; (8000ee8 <LoopForever+0x16>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ebc:	e001      	b.n	8000ec2 <LoopFillZerobss>

08000ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec0:	3204      	adds	r2, #4

08000ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec4:	d3fb      	bcc.n	8000ebe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ec6:	f7ff ffab 	bl	8000e20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eca:	f002 fa8f 	bl	80033ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ece:	f7ff fc7b 	bl	80007c8 <main>

08000ed2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ed2:	e7fe      	b.n	8000ed2 <LoopForever>
  ldr   r0, =_estack
 8000ed4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000edc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ee0:	0800348c 	.word	0x0800348c
  ldr r2, =_sbss
 8000ee4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ee8:	2000002c 	.word	0x2000002c

08000eec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000eec:	e7fe      	b.n	8000eec <ADC1_2_IRQHandler>

08000eee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef8:	2003      	movs	r0, #3
 8000efa:	f000 f91b 	bl	8001134 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000efe:	200f      	movs	r0, #15
 8000f00:	f000 f80e 	bl	8000f20 <HAL_InitTick>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d002      	beq.n	8000f10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	71fb      	strb	r3, [r7, #7]
 8000f0e:	e001      	b.n	8000f14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f10:	f7ff ff38 	bl	8000d84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f14:	79fb      	ldrb	r3, [r7, #7]

}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f2c:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <HAL_InitTick+0x68>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d022      	beq.n	8000f7a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f34:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <HAL_InitTick+0x6c>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <HAL_InitTick+0x68>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f40:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 f918 	bl	800117e <HAL_SYSTICK_Config>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d10f      	bne.n	8000f74 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b0f      	cmp	r3, #15
 8000f58:	d809      	bhi.n	8000f6e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	6879      	ldr	r1, [r7, #4]
 8000f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f62:	f000 f8f2 	bl	800114a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f66:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <HAL_InitTick+0x70>)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	e007      	b.n	8000f7e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	73fb      	strb	r3, [r7, #15]
 8000f72:	e004      	b.n	8000f7e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	73fb      	strb	r3, [r7, #15]
 8000f78:	e001      	b.n	8000f7e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	20000000 	.word	0x20000000
 8000f90:	20000004 	.word	0x20000004

08000f94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <HAL_IncTick+0x1c>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <HAL_IncTick+0x20>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	4a03      	ldr	r2, [pc, #12]	; (8000fb0 <HAL_IncTick+0x1c>)
 8000fa4:	6013      	str	r3, [r2, #0]
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	20000028 	.word	0x20000028
 8000fb4:	20000008 	.word	0x20000008

08000fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return uwTick;
 8000fbc:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <HAL_GetTick+0x14>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	20000028 	.word	0x20000028

08000fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fec:	4013      	ands	r3, r2
 8000fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001002:	4a04      	ldr	r2, [pc, #16]	; (8001014 <__NVIC_SetPriorityGrouping+0x44>)
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	60d3      	str	r3, [r2, #12]
}
 8001008:	bf00      	nop
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800101c:	4b04      	ldr	r3, [pc, #16]	; (8001030 <__NVIC_GetPriorityGrouping+0x18>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	0a1b      	lsrs	r3, r3, #8
 8001022:	f003 0307 	and.w	r3, r3, #7
}
 8001026:	4618      	mov	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	6039      	str	r1, [r7, #0]
 800103e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001044:	2b00      	cmp	r3, #0
 8001046:	db0a      	blt.n	800105e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	b2da      	uxtb	r2, r3
 800104c:	490c      	ldr	r1, [pc, #48]	; (8001080 <__NVIC_SetPriority+0x4c>)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	0112      	lsls	r2, r2, #4
 8001054:	b2d2      	uxtb	r2, r2
 8001056:	440b      	add	r3, r1
 8001058:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800105c:	e00a      	b.n	8001074 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4908      	ldr	r1, [pc, #32]	; (8001084 <__NVIC_SetPriority+0x50>)
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	f003 030f 	and.w	r3, r3, #15
 800106a:	3b04      	subs	r3, #4
 800106c:	0112      	lsls	r2, r2, #4
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	440b      	add	r3, r1
 8001072:	761a      	strb	r2, [r3, #24]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000e100 	.word	0xe000e100
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001088:	b480      	push	{r7}
 800108a:	b089      	sub	sp, #36	; 0x24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f1c3 0307 	rsb	r3, r3, #7
 80010a2:	2b04      	cmp	r3, #4
 80010a4:	bf28      	it	cs
 80010a6:	2304      	movcs	r3, #4
 80010a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3304      	adds	r3, #4
 80010ae:	2b06      	cmp	r3, #6
 80010b0:	d902      	bls.n	80010b8 <NVIC_EncodePriority+0x30>
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3b03      	subs	r3, #3
 80010b6:	e000      	b.n	80010ba <NVIC_EncodePriority+0x32>
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	f04f 32ff 	mov.w	r2, #4294967295
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43da      	mvns	r2, r3
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	401a      	ands	r2, r3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d0:	f04f 31ff 	mov.w	r1, #4294967295
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	fa01 f303 	lsl.w	r3, r1, r3
 80010da:	43d9      	mvns	r1, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	4313      	orrs	r3, r2
         );
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3724      	adds	r7, #36	; 0x24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
	...

080010f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001100:	d301      	bcc.n	8001106 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001102:	2301      	movs	r3, #1
 8001104:	e00f      	b.n	8001126 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001106:	4a0a      	ldr	r2, [pc, #40]	; (8001130 <SysTick_Config+0x40>)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3b01      	subs	r3, #1
 800110c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800110e:	210f      	movs	r1, #15
 8001110:	f04f 30ff 	mov.w	r0, #4294967295
 8001114:	f7ff ff8e 	bl	8001034 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001118:	4b05      	ldr	r3, [pc, #20]	; (8001130 <SysTick_Config+0x40>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111e:	4b04      	ldr	r3, [pc, #16]	; (8001130 <SysTick_Config+0x40>)
 8001120:	2207      	movs	r2, #7
 8001122:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	e000e010 	.word	0xe000e010

08001134 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff ff47 	bl	8000fd0 <__NVIC_SetPriorityGrouping>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b086      	sub	sp, #24
 800114e:	af00      	add	r7, sp, #0
 8001150:	4603      	mov	r3, r0
 8001152:	60b9      	str	r1, [r7, #8]
 8001154:	607a      	str	r2, [r7, #4]
 8001156:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001158:	f7ff ff5e 	bl	8001018 <__NVIC_GetPriorityGrouping>
 800115c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	68b9      	ldr	r1, [r7, #8]
 8001162:	6978      	ldr	r0, [r7, #20]
 8001164:	f7ff ff90 	bl	8001088 <NVIC_EncodePriority>
 8001168:	4602      	mov	r2, r0
 800116a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116e:	4611      	mov	r1, r2
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff5f 	bl	8001034 <__NVIC_SetPriority>
}
 8001176:	bf00      	nop
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ffb2 	bl	80010f0 <SysTick_Config>
 800118c:	4603      	mov	r3, r0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d141      	bne.n	800122a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80011a6:	4b4b      	ldr	r3, [pc, #300]	; (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011b2:	d131      	bne.n	8001218 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011b4:	4b47      	ldr	r3, [pc, #284]	; (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011ba:	4a46      	ldr	r2, [pc, #280]	; (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011c4:	4b43      	ldr	r3, [pc, #268]	; (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011cc:	4a41      	ldr	r2, [pc, #260]	; (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011d4:	4b40      	ldr	r3, [pc, #256]	; (80012d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2232      	movs	r2, #50	; 0x32
 80011da:	fb02 f303 	mul.w	r3, r2, r3
 80011de:	4a3f      	ldr	r2, [pc, #252]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80011e0:	fba2 2303 	umull	r2, r3, r2, r3
 80011e4:	0c9b      	lsrs	r3, r3, #18
 80011e6:	3301      	adds	r3, #1
 80011e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011ea:	e002      	b.n	80011f2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011f2:	4b38      	ldr	r3, [pc, #224]	; (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011fe:	d102      	bne.n	8001206 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1f2      	bne.n	80011ec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001206:	4b33      	ldr	r3, [pc, #204]	; (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800120e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001212:	d158      	bne.n	80012c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e057      	b.n	80012c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001218:	4b2e      	ldr	r3, [pc, #184]	; (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800121a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800121e:	4a2d      	ldr	r2, [pc, #180]	; (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001224:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001228:	e04d      	b.n	80012c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001230:	d141      	bne.n	80012b6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001232:	4b28      	ldr	r3, [pc, #160]	; (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800123a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800123e:	d131      	bne.n	80012a4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001240:	4b24      	ldr	r3, [pc, #144]	; (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001242:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001246:	4a23      	ldr	r2, [pc, #140]	; (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800124c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001250:	4b20      	ldr	r3, [pc, #128]	; (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001258:	4a1e      	ldr	r2, [pc, #120]	; (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800125a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800125e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001260:	4b1d      	ldr	r3, [pc, #116]	; (80012d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2232      	movs	r2, #50	; 0x32
 8001266:	fb02 f303 	mul.w	r3, r2, r3
 800126a:	4a1c      	ldr	r2, [pc, #112]	; (80012dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800126c:	fba2 2303 	umull	r2, r3, r2, r3
 8001270:	0c9b      	lsrs	r3, r3, #18
 8001272:	3301      	adds	r3, #1
 8001274:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001276:	e002      	b.n	800127e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	3b01      	subs	r3, #1
 800127c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800127e:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800128a:	d102      	bne.n	8001292 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1f2      	bne.n	8001278 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001292:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800129a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800129e:	d112      	bne.n	80012c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e011      	b.n	80012c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012a4:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012aa:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80012b4:	e007      	b.n	80012c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012b6:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012be:	4a05      	ldr	r2, [pc, #20]	; (80012d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012c4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	40007000 	.word	0x40007000
 80012d8:	20000000 	.word	0x20000000
 80012dc:	431bde83 	.word	0x431bde83

080012e0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	4a04      	ldr	r2, [pc, #16]	; (80012fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80012ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ee:	6093      	str	r3, [r2, #8]
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	40007000 	.word	0x40007000

08001300 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d101      	bne.n	8001312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e308      	b.n	8001924 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	2b00      	cmp	r3, #0
 800131c:	d075      	beq.n	800140a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800131e:	4ba3      	ldr	r3, [pc, #652]	; (80015ac <HAL_RCC_OscConfig+0x2ac>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 030c 	and.w	r3, r3, #12
 8001326:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001328:	4ba0      	ldr	r3, [pc, #640]	; (80015ac <HAL_RCC_OscConfig+0x2ac>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	2b0c      	cmp	r3, #12
 8001336:	d102      	bne.n	800133e <HAL_RCC_OscConfig+0x3e>
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	2b03      	cmp	r3, #3
 800133c:	d002      	beq.n	8001344 <HAL_RCC_OscConfig+0x44>
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	2b08      	cmp	r3, #8
 8001342:	d10b      	bne.n	800135c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001344:	4b99      	ldr	r3, [pc, #612]	; (80015ac <HAL_RCC_OscConfig+0x2ac>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d05b      	beq.n	8001408 <HAL_RCC_OscConfig+0x108>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d157      	bne.n	8001408 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e2e3      	b.n	8001924 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001364:	d106      	bne.n	8001374 <HAL_RCC_OscConfig+0x74>
 8001366:	4b91      	ldr	r3, [pc, #580]	; (80015ac <HAL_RCC_OscConfig+0x2ac>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a90      	ldr	r2, [pc, #576]	; (80015ac <HAL_RCC_OscConfig+0x2ac>)
 800136c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001370:	6013      	str	r3, [r2, #0]
 8001372:	e01d      	b.n	80013b0 <HAL_RCC_OscConfig+0xb0>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800137c:	d10c      	bne.n	8001398 <HAL_RCC_OscConfig+0x98>
 800137e:	4b8b      	ldr	r3, [pc, #556]	; (80015ac <HAL_RCC_OscConfig+0x2ac>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a8a      	ldr	r2, [pc, #552]	; (80015ac <HAL_RCC_OscConfig+0x2ac>)
 8001384:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	4b88      	ldr	r3, [pc, #544]	; (80015ac <HAL_RCC_OscConfig+0x2ac>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a87      	ldr	r2, [pc, #540]	; (80015ac <HAL_RCC_OscConfig+0x2ac>)
 8001390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001394:	6013      	str	r3, [r2, #0]
 8001396:	e00b      	b.n	80013b0 <HAL_RCC_OscConfig+0xb0>
 8001398:	4b84      	ldr	r3, [pc, #528]	; (80015ac <HAL_RCC_OscConfig+0x2ac>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a83      	ldr	r2, [pc, #524]	; (80015ac <HAL_RCC_OscConfig+0x2ac>)
 800139e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013a2:	6013      	str	r3, [r2, #0]
 80013a4:	4b81      	ldr	r3, [pc, #516]	; (80015ac <HAL_RCC_OscConfig+0x2ac>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a80      	ldr	r2, [pc, #512]	; (80015ac <HAL_RCC_OscConfig+0x2ac>)
 80013aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d013      	beq.n	80013e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b8:	f7ff fdfe 	bl	8000fb8 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c0:	f7ff fdfa 	bl	8000fb8 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b64      	cmp	r3, #100	; 0x64
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e2a8      	b.n	8001924 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013d2:	4b76      	ldr	r3, [pc, #472]	; (80015ac <HAL_RCC_OscConfig+0x2ac>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d0f0      	beq.n	80013c0 <HAL_RCC_OscConfig+0xc0>
 80013de:	e014      	b.n	800140a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e0:	f7ff fdea 	bl	8000fb8 <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013e8:	f7ff fde6 	bl	8000fb8 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b64      	cmp	r3, #100	; 0x64
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e294      	b.n	8001924 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013fa:	4b6c      	ldr	r3, [pc, #432]	; (80015ac <HAL_RCC_OscConfig+0x2ac>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1f0      	bne.n	80013e8 <HAL_RCC_OscConfig+0xe8>
 8001406:	e000      	b.n	800140a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001408:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d075      	beq.n	8001502 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001416:	4b65      	ldr	r3, [pc, #404]	; (80015ac <HAL_RCC_OscConfig+0x2ac>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f003 030c 	and.w	r3, r3, #12
 800141e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001420:	4b62      	ldr	r3, [pc, #392]	; (80015ac <HAL_RCC_OscConfig+0x2ac>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	2b0c      	cmp	r3, #12
 800142e:	d102      	bne.n	8001436 <HAL_RCC_OscConfig+0x136>
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	2b02      	cmp	r3, #2
 8001434:	d002      	beq.n	800143c <HAL_RCC_OscConfig+0x13c>
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	2b04      	cmp	r3, #4
 800143a:	d11f      	bne.n	800147c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800143c:	4b5b      	ldr	r3, [pc, #364]	; (80015ac <HAL_RCC_OscConfig+0x2ac>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001444:	2b00      	cmp	r3, #0
 8001446:	d005      	beq.n	8001454 <HAL_RCC_OscConfig+0x154>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d101      	bne.n	8001454 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e267      	b.n	8001924 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001454:	4b55      	ldr	r3, [pc, #340]	; (80015ac <HAL_RCC_OscConfig+0x2ac>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	061b      	lsls	r3, r3, #24
 8001462:	4952      	ldr	r1, [pc, #328]	; (80015ac <HAL_RCC_OscConfig+0x2ac>)
 8001464:	4313      	orrs	r3, r2
 8001466:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001468:	4b51      	ldr	r3, [pc, #324]	; (80015b0 <HAL_RCC_OscConfig+0x2b0>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fd57 	bl	8000f20 <HAL_InitTick>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d043      	beq.n	8001500 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e253      	b.n	8001924 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d023      	beq.n	80014cc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001484:	4b49      	ldr	r3, [pc, #292]	; (80015ac <HAL_RCC_OscConfig+0x2ac>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a48      	ldr	r2, [pc, #288]	; (80015ac <HAL_RCC_OscConfig+0x2ac>)
 800148a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800148e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001490:	f7ff fd92 	bl	8000fb8 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001498:	f7ff fd8e 	bl	8000fb8 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e23c      	b.n	8001924 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014aa:	4b40      	ldr	r3, [pc, #256]	; (80015ac <HAL_RCC_OscConfig+0x2ac>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f0      	beq.n	8001498 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b6:	4b3d      	ldr	r3, [pc, #244]	; (80015ac <HAL_RCC_OscConfig+0x2ac>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	061b      	lsls	r3, r3, #24
 80014c4:	4939      	ldr	r1, [pc, #228]	; (80015ac <HAL_RCC_OscConfig+0x2ac>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	604b      	str	r3, [r1, #4]
 80014ca:	e01a      	b.n	8001502 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014cc:	4b37      	ldr	r3, [pc, #220]	; (80015ac <HAL_RCC_OscConfig+0x2ac>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a36      	ldr	r2, [pc, #216]	; (80015ac <HAL_RCC_OscConfig+0x2ac>)
 80014d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d8:	f7ff fd6e 	bl	8000fb8 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014e0:	f7ff fd6a 	bl	8000fb8 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e218      	b.n	8001924 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014f2:	4b2e      	ldr	r3, [pc, #184]	; (80015ac <HAL_RCC_OscConfig+0x2ac>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f0      	bne.n	80014e0 <HAL_RCC_OscConfig+0x1e0>
 80014fe:	e000      	b.n	8001502 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001500:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0308 	and.w	r3, r3, #8
 800150a:	2b00      	cmp	r3, #0
 800150c:	d03c      	beq.n	8001588 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d01c      	beq.n	8001550 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001516:	4b25      	ldr	r3, [pc, #148]	; (80015ac <HAL_RCC_OscConfig+0x2ac>)
 8001518:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800151c:	4a23      	ldr	r2, [pc, #140]	; (80015ac <HAL_RCC_OscConfig+0x2ac>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001526:	f7ff fd47 	bl	8000fb8 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800152e:	f7ff fd43 	bl	8000fb8 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e1f1      	b.n	8001924 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001540:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <HAL_RCC_OscConfig+0x2ac>)
 8001542:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0ef      	beq.n	800152e <HAL_RCC_OscConfig+0x22e>
 800154e:	e01b      	b.n	8001588 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001550:	4b16      	ldr	r3, [pc, #88]	; (80015ac <HAL_RCC_OscConfig+0x2ac>)
 8001552:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001556:	4a15      	ldr	r2, [pc, #84]	; (80015ac <HAL_RCC_OscConfig+0x2ac>)
 8001558:	f023 0301 	bic.w	r3, r3, #1
 800155c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001560:	f7ff fd2a 	bl	8000fb8 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001568:	f7ff fd26 	bl	8000fb8 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e1d4      	b.n	8001924 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800157a:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <HAL_RCC_OscConfig+0x2ac>)
 800157c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1ef      	bne.n	8001568 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	2b00      	cmp	r3, #0
 8001592:	f000 80ab 	beq.w	80016ec <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001596:	2300      	movs	r3, #0
 8001598:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800159a:	4b04      	ldr	r3, [pc, #16]	; (80015ac <HAL_RCC_OscConfig+0x2ac>)
 800159c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d106      	bne.n	80015b4 <HAL_RCC_OscConfig+0x2b4>
 80015a6:	2301      	movs	r3, #1
 80015a8:	e005      	b.n	80015b6 <HAL_RCC_OscConfig+0x2b6>
 80015aa:	bf00      	nop
 80015ac:	40021000 	.word	0x40021000
 80015b0:	20000004 	.word	0x20000004
 80015b4:	2300      	movs	r3, #0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d00d      	beq.n	80015d6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ba:	4baf      	ldr	r3, [pc, #700]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 80015bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015be:	4aae      	ldr	r2, [pc, #696]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 80015c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c4:	6593      	str	r3, [r2, #88]	; 0x58
 80015c6:	4bac      	ldr	r3, [pc, #688]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 80015c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015d2:	2301      	movs	r3, #1
 80015d4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015d6:	4ba9      	ldr	r3, [pc, #676]	; (800187c <HAL_RCC_OscConfig+0x57c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d118      	bne.n	8001614 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015e2:	4ba6      	ldr	r3, [pc, #664]	; (800187c <HAL_RCC_OscConfig+0x57c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4aa5      	ldr	r2, [pc, #660]	; (800187c <HAL_RCC_OscConfig+0x57c>)
 80015e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ee:	f7ff fce3 	bl	8000fb8 <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f6:	f7ff fcdf 	bl	8000fb8 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e18d      	b.n	8001924 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001608:	4b9c      	ldr	r3, [pc, #624]	; (800187c <HAL_RCC_OscConfig+0x57c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0f0      	beq.n	80015f6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d108      	bne.n	800162e <HAL_RCC_OscConfig+0x32e>
 800161c:	4b96      	ldr	r3, [pc, #600]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 800161e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001622:	4a95      	ldr	r2, [pc, #596]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800162c:	e024      	b.n	8001678 <HAL_RCC_OscConfig+0x378>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	2b05      	cmp	r3, #5
 8001634:	d110      	bne.n	8001658 <HAL_RCC_OscConfig+0x358>
 8001636:	4b90      	ldr	r3, [pc, #576]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 8001638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800163c:	4a8e      	ldr	r2, [pc, #568]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 800163e:	f043 0304 	orr.w	r3, r3, #4
 8001642:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001646:	4b8c      	ldr	r3, [pc, #560]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 8001648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800164c:	4a8a      	ldr	r2, [pc, #552]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001656:	e00f      	b.n	8001678 <HAL_RCC_OscConfig+0x378>
 8001658:	4b87      	ldr	r3, [pc, #540]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 800165a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800165e:	4a86      	ldr	r2, [pc, #536]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 8001660:	f023 0301 	bic.w	r3, r3, #1
 8001664:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001668:	4b83      	ldr	r3, [pc, #524]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 800166a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800166e:	4a82      	ldr	r2, [pc, #520]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 8001670:	f023 0304 	bic.w	r3, r3, #4
 8001674:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d016      	beq.n	80016ae <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001680:	f7ff fc9a 	bl	8000fb8 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001686:	e00a      	b.n	800169e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001688:	f7ff fc96 	bl	8000fb8 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	f241 3288 	movw	r2, #5000	; 0x1388
 8001696:	4293      	cmp	r3, r2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e142      	b.n	8001924 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800169e:	4b76      	ldr	r3, [pc, #472]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 80016a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0ed      	beq.n	8001688 <HAL_RCC_OscConfig+0x388>
 80016ac:	e015      	b.n	80016da <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ae:	f7ff fc83 	bl	8000fb8 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016b4:	e00a      	b.n	80016cc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b6:	f7ff fc7f 	bl	8000fb8 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e12b      	b.n	8001924 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016cc:	4b6a      	ldr	r3, [pc, #424]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 80016ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1ed      	bne.n	80016b6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016da:	7ffb      	ldrb	r3, [r7, #31]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d105      	bne.n	80016ec <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016e0:	4b65      	ldr	r3, [pc, #404]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 80016e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e4:	4a64      	ldr	r2, [pc, #400]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 80016e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0320 	and.w	r3, r3, #32
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d03c      	beq.n	8001772 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d01c      	beq.n	800173a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001700:	4b5d      	ldr	r3, [pc, #372]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 8001702:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001706:	4a5c      	ldr	r2, [pc, #368]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001710:	f7ff fc52 	bl	8000fb8 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001718:	f7ff fc4e 	bl	8000fb8 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e0fc      	b.n	8001924 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800172a:	4b53      	ldr	r3, [pc, #332]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 800172c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0ef      	beq.n	8001718 <HAL_RCC_OscConfig+0x418>
 8001738:	e01b      	b.n	8001772 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800173a:	4b4f      	ldr	r3, [pc, #316]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 800173c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001740:	4a4d      	ldr	r2, [pc, #308]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 8001742:	f023 0301 	bic.w	r3, r3, #1
 8001746:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174a:	f7ff fc35 	bl	8000fb8 <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001752:	f7ff fc31 	bl	8000fb8 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e0df      	b.n	8001924 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001764:	4b44      	ldr	r3, [pc, #272]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 8001766:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1ef      	bne.n	8001752 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 80d3 	beq.w	8001922 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800177c:	4b3e      	ldr	r3, [pc, #248]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 030c 	and.w	r3, r3, #12
 8001784:	2b0c      	cmp	r3, #12
 8001786:	f000 808d 	beq.w	80018a4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	2b02      	cmp	r3, #2
 8001790:	d15a      	bne.n	8001848 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001792:	4b39      	ldr	r3, [pc, #228]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a38      	ldr	r2, [pc, #224]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 8001798:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800179c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179e:	f7ff fc0b 	bl	8000fb8 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a6:	f7ff fc07 	bl	8000fb8 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e0b5      	b.n	8001924 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017b8:	4b2f      	ldr	r3, [pc, #188]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1f0      	bne.n	80017a6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017c4:	4b2c      	ldr	r3, [pc, #176]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 80017c6:	68da      	ldr	r2, [r3, #12]
 80017c8:	4b2d      	ldr	r3, [pc, #180]	; (8001880 <HAL_RCC_OscConfig+0x580>)
 80017ca:	4013      	ands	r3, r2
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	6a11      	ldr	r1, [r2, #32]
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017d4:	3a01      	subs	r2, #1
 80017d6:	0112      	lsls	r2, r2, #4
 80017d8:	4311      	orrs	r1, r2
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80017de:	0212      	lsls	r2, r2, #8
 80017e0:	4311      	orrs	r1, r2
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017e6:	0852      	lsrs	r2, r2, #1
 80017e8:	3a01      	subs	r2, #1
 80017ea:	0552      	lsls	r2, r2, #21
 80017ec:	4311      	orrs	r1, r2
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017f2:	0852      	lsrs	r2, r2, #1
 80017f4:	3a01      	subs	r2, #1
 80017f6:	0652      	lsls	r2, r2, #25
 80017f8:	4311      	orrs	r1, r2
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80017fe:	06d2      	lsls	r2, r2, #27
 8001800:	430a      	orrs	r2, r1
 8001802:	491d      	ldr	r1, [pc, #116]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 8001804:	4313      	orrs	r3, r2
 8001806:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001808:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a1a      	ldr	r2, [pc, #104]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 800180e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001812:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001814:	4b18      	ldr	r3, [pc, #96]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	4a17      	ldr	r2, [pc, #92]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 800181a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800181e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001820:	f7ff fbca 	bl	8000fb8 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001828:	f7ff fbc6 	bl	8000fb8 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e074      	b.n	8001924 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f0      	beq.n	8001828 <HAL_RCC_OscConfig+0x528>
 8001846:	e06c      	b.n	8001922 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001848:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 800184e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001852:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001854:	4b08      	ldr	r3, [pc, #32]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	4a07      	ldr	r2, [pc, #28]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 800185a:	f023 0303 	bic.w	r3, r3, #3
 800185e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001860:	4b05      	ldr	r3, [pc, #20]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	4a04      	ldr	r2, [pc, #16]	; (8001878 <HAL_RCC_OscConfig+0x578>)
 8001866:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800186a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800186e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001870:	f7ff fba2 	bl	8000fb8 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001876:	e00e      	b.n	8001896 <HAL_RCC_OscConfig+0x596>
 8001878:	40021000 	.word	0x40021000
 800187c:	40007000 	.word	0x40007000
 8001880:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001884:	f7ff fb98 	bl	8000fb8 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e046      	b.n	8001924 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001896:	4b25      	ldr	r3, [pc, #148]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f0      	bne.n	8001884 <HAL_RCC_OscConfig+0x584>
 80018a2:	e03e      	b.n	8001922 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	69db      	ldr	r3, [r3, #28]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d101      	bne.n	80018b0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e039      	b.n	8001924 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80018b0:	4b1e      	ldr	r3, [pc, #120]	; (800192c <HAL_RCC_OscConfig+0x62c>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f003 0203 	and.w	r2, r3, #3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d12c      	bne.n	800191e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ce:	3b01      	subs	r3, #1
 80018d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d123      	bne.n	800191e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d11b      	bne.n	800191e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d113      	bne.n	800191e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001900:	085b      	lsrs	r3, r3, #1
 8001902:	3b01      	subs	r3, #1
 8001904:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001906:	429a      	cmp	r2, r3
 8001908:	d109      	bne.n	800191e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001914:	085b      	lsrs	r3, r3, #1
 8001916:	3b01      	subs	r3, #1
 8001918:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800191a:	429a      	cmp	r2, r3
 800191c:	d001      	beq.n	8001922 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e000      	b.n	8001924 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3720      	adds	r7, #32
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40021000 	.word	0x40021000

08001930 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d101      	bne.n	8001948 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e11e      	b.n	8001b86 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001948:	4b91      	ldr	r3, [pc, #580]	; (8001b90 <HAL_RCC_ClockConfig+0x260>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 030f 	and.w	r3, r3, #15
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	429a      	cmp	r2, r3
 8001954:	d910      	bls.n	8001978 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001956:	4b8e      	ldr	r3, [pc, #568]	; (8001b90 <HAL_RCC_ClockConfig+0x260>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f023 020f 	bic.w	r2, r3, #15
 800195e:	498c      	ldr	r1, [pc, #560]	; (8001b90 <HAL_RCC_ClockConfig+0x260>)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	4313      	orrs	r3, r2
 8001964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001966:	4b8a      	ldr	r3, [pc, #552]	; (8001b90 <HAL_RCC_ClockConfig+0x260>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	429a      	cmp	r2, r3
 8001972:	d001      	beq.n	8001978 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e106      	b.n	8001b86 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b00      	cmp	r3, #0
 8001982:	d073      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b03      	cmp	r3, #3
 800198a:	d129      	bne.n	80019e0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800198c:	4b81      	ldr	r3, [pc, #516]	; (8001b94 <HAL_RCC_ClockConfig+0x264>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d101      	bne.n	800199c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e0f4      	b.n	8001b86 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800199c:	f000 f964 	bl	8001c68 <RCC_GetSysClockFreqFromPLLSource>
 80019a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	4a7c      	ldr	r2, [pc, #496]	; (8001b98 <HAL_RCC_ClockConfig+0x268>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d93f      	bls.n	8001a2a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80019aa:	4b7a      	ldr	r3, [pc, #488]	; (8001b94 <HAL_RCC_ClockConfig+0x264>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d009      	beq.n	80019ca <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d033      	beq.n	8001a2a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d12f      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80019ca:	4b72      	ldr	r3, [pc, #456]	; (8001b94 <HAL_RCC_ClockConfig+0x264>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019d2:	4a70      	ldr	r2, [pc, #448]	; (8001b94 <HAL_RCC_ClockConfig+0x264>)
 80019d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019d8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	e024      	b.n	8001a2a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d107      	bne.n	80019f8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019e8:	4b6a      	ldr	r3, [pc, #424]	; (8001b94 <HAL_RCC_ClockConfig+0x264>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d109      	bne.n	8001a08 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e0c6      	b.n	8001b86 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019f8:	4b66      	ldr	r3, [pc, #408]	; (8001b94 <HAL_RCC_ClockConfig+0x264>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d101      	bne.n	8001a08 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e0be      	b.n	8001b86 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001a08:	f000 f8ce 	bl	8001ba8 <HAL_RCC_GetSysClockFreq>
 8001a0c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	4a61      	ldr	r2, [pc, #388]	; (8001b98 <HAL_RCC_ClockConfig+0x268>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d909      	bls.n	8001a2a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a16:	4b5f      	ldr	r3, [pc, #380]	; (8001b94 <HAL_RCC_ClockConfig+0x264>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a1e:	4a5d      	ldr	r2, [pc, #372]	; (8001b94 <HAL_RCC_ClockConfig+0x264>)
 8001a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a24:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001a26:	2380      	movs	r3, #128	; 0x80
 8001a28:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a2a:	4b5a      	ldr	r3, [pc, #360]	; (8001b94 <HAL_RCC_ClockConfig+0x264>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f023 0203 	bic.w	r2, r3, #3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	4957      	ldr	r1, [pc, #348]	; (8001b94 <HAL_RCC_ClockConfig+0x264>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a3c:	f7ff fabc 	bl	8000fb8 <HAL_GetTick>
 8001a40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a42:	e00a      	b.n	8001a5a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a44:	f7ff fab8 	bl	8000fb8 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e095      	b.n	8001b86 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5a:	4b4e      	ldr	r3, [pc, #312]	; (8001b94 <HAL_RCC_ClockConfig+0x264>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 020c 	and.w	r2, r3, #12
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d1eb      	bne.n	8001a44 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d023      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d005      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a84:	4b43      	ldr	r3, [pc, #268]	; (8001b94 <HAL_RCC_ClockConfig+0x264>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	4a42      	ldr	r2, [pc, #264]	; (8001b94 <HAL_RCC_ClockConfig+0x264>)
 8001a8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a8e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0308 	and.w	r3, r3, #8
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d007      	beq.n	8001aac <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001a9c:	4b3d      	ldr	r3, [pc, #244]	; (8001b94 <HAL_RCC_ClockConfig+0x264>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001aa4:	4a3b      	ldr	r2, [pc, #236]	; (8001b94 <HAL_RCC_ClockConfig+0x264>)
 8001aa6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001aaa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aac:	4b39      	ldr	r3, [pc, #228]	; (8001b94 <HAL_RCC_ClockConfig+0x264>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	4936      	ldr	r1, [pc, #216]	; (8001b94 <HAL_RCC_ClockConfig+0x264>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	608b      	str	r3, [r1, #8]
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	2b80      	cmp	r3, #128	; 0x80
 8001ac4:	d105      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001ac6:	4b33      	ldr	r3, [pc, #204]	; (8001b94 <HAL_RCC_ClockConfig+0x264>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	4a32      	ldr	r2, [pc, #200]	; (8001b94 <HAL_RCC_ClockConfig+0x264>)
 8001acc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ad0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad2:	4b2f      	ldr	r3, [pc, #188]	; (8001b90 <HAL_RCC_ClockConfig+0x260>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d21d      	bcs.n	8001b1c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae0:	4b2b      	ldr	r3, [pc, #172]	; (8001b90 <HAL_RCC_ClockConfig+0x260>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f023 020f 	bic.w	r2, r3, #15
 8001ae8:	4929      	ldr	r1, [pc, #164]	; (8001b90 <HAL_RCC_ClockConfig+0x260>)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001af0:	f7ff fa62 	bl	8000fb8 <HAL_GetTick>
 8001af4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af6:	e00a      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af8:	f7ff fa5e 	bl	8000fb8 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e03b      	b.n	8001b86 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0e:	4b20      	ldr	r3, [pc, #128]	; (8001b90 <HAL_RCC_ClockConfig+0x260>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d1ed      	bne.n	8001af8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d008      	beq.n	8001b3a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b28:	4b1a      	ldr	r3, [pc, #104]	; (8001b94 <HAL_RCC_ClockConfig+0x264>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	4917      	ldr	r1, [pc, #92]	; (8001b94 <HAL_RCC_ClockConfig+0x264>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d009      	beq.n	8001b5a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b46:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <HAL_RCC_ClockConfig+0x264>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	490f      	ldr	r1, [pc, #60]	; (8001b94 <HAL_RCC_ClockConfig+0x264>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b5a:	f000 f825 	bl	8001ba8 <HAL_RCC_GetSysClockFreq>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <HAL_RCC_ClockConfig+0x264>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	091b      	lsrs	r3, r3, #4
 8001b66:	f003 030f 	and.w	r3, r3, #15
 8001b6a:	490c      	ldr	r1, [pc, #48]	; (8001b9c <HAL_RCC_ClockConfig+0x26c>)
 8001b6c:	5ccb      	ldrb	r3, [r1, r3]
 8001b6e:	f003 031f 	and.w	r3, r3, #31
 8001b72:	fa22 f303 	lsr.w	r3, r2, r3
 8001b76:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <HAL_RCC_ClockConfig+0x270>)
 8001b78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <HAL_RCC_ClockConfig+0x274>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff f9ce 	bl	8000f20 <HAL_InitTick>
 8001b84:	4603      	mov	r3, r0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40022000 	.word	0x40022000
 8001b94:	40021000 	.word	0x40021000
 8001b98:	04c4b400 	.word	0x04c4b400
 8001b9c:	08003474 	.word	0x08003474
 8001ba0:	20000000 	.word	0x20000000
 8001ba4:	20000004 	.word	0x20000004

08001ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b087      	sub	sp, #28
 8001bac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001bae:	4b2c      	ldr	r3, [pc, #176]	; (8001c60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	d102      	bne.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bba:	4b2a      	ldr	r3, [pc, #168]	; (8001c64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	e047      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001bc0:	4b27      	ldr	r3, [pc, #156]	; (8001c60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f003 030c 	and.w	r3, r3, #12
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	d102      	bne.n	8001bd2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bcc:	4b25      	ldr	r3, [pc, #148]	; (8001c64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	e03e      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001bd2:	4b23      	ldr	r3, [pc, #140]	; (8001c60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	2b0c      	cmp	r3, #12
 8001bdc:	d136      	bne.n	8001c4c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bde:	4b20      	ldr	r3, [pc, #128]	; (8001c60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001be8:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	091b      	lsrs	r3, r3, #4
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	d10c      	bne.n	8001c16 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bfc:	4a19      	ldr	r2, [pc, #100]	; (8001c64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c04:	4a16      	ldr	r2, [pc, #88]	; (8001c60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c06:	68d2      	ldr	r2, [r2, #12]
 8001c08:	0a12      	lsrs	r2, r2, #8
 8001c0a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c0e:	fb02 f303 	mul.w	r3, r2, r3
 8001c12:	617b      	str	r3, [r7, #20]
      break;
 8001c14:	e00c      	b.n	8001c30 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c16:	4a13      	ldr	r2, [pc, #76]	; (8001c64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1e:	4a10      	ldr	r2, [pc, #64]	; (8001c60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c20:	68d2      	ldr	r2, [r2, #12]
 8001c22:	0a12      	lsrs	r2, r2, #8
 8001c24:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c28:	fb02 f303 	mul.w	r3, r2, r3
 8001c2c:	617b      	str	r3, [r7, #20]
      break;
 8001c2e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c30:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	0e5b      	lsrs	r3, r3, #25
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	e001      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c50:	693b      	ldr	r3, [r7, #16]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	371c      	adds	r7, #28
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	40021000 	.word	0x40021000
 8001c64:	00f42400 	.word	0x00f42400

08001c68 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b087      	sub	sp, #28
 8001c6c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ce8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c78:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	091b      	lsrs	r3, r3, #4
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	3301      	adds	r3, #1
 8001c84:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	2b03      	cmp	r3, #3
 8001c8a:	d10c      	bne.n	8001ca6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c8c:	4a17      	ldr	r2, [pc, #92]	; (8001cec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c94:	4a14      	ldr	r2, [pc, #80]	; (8001ce8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c96:	68d2      	ldr	r2, [r2, #12]
 8001c98:	0a12      	lsrs	r2, r2, #8
 8001c9a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ca2:	617b      	str	r3, [r7, #20]
    break;
 8001ca4:	e00c      	b.n	8001cc0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ca6:	4a11      	ldr	r2, [pc, #68]	; (8001cec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cae:	4a0e      	ldr	r2, [pc, #56]	; (8001ce8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cb0:	68d2      	ldr	r2, [r2, #12]
 8001cb2:	0a12      	lsrs	r2, r2, #8
 8001cb4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001cb8:	fb02 f303 	mul.w	r3, r2, r3
 8001cbc:	617b      	str	r3, [r7, #20]
    break;
 8001cbe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cc0:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	0e5b      	lsrs	r3, r3, #25
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	3301      	adds	r3, #1
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001cda:	687b      	ldr	r3, [r7, #4]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	371c      	adds	r7, #28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	00f42400 	.word	0x00f42400

08001cf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f000 8098 	beq.w	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d12:	4b43      	ldr	r3, [pc, #268]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d10d      	bne.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d1e:	4b40      	ldr	r3, [pc, #256]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d22:	4a3f      	ldr	r2, [pc, #252]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d28:	6593      	str	r3, [r2, #88]	; 0x58
 8001d2a:	4b3d      	ldr	r3, [pc, #244]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d36:	2301      	movs	r3, #1
 8001d38:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d3a:	4b3a      	ldr	r3, [pc, #232]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a39      	ldr	r2, [pc, #228]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d46:	f7ff f937 	bl	8000fb8 <HAL_GetTick>
 8001d4a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d4c:	e009      	b.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d4e:	f7ff f933 	bl	8000fb8 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d902      	bls.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	74fb      	strb	r3, [r7, #19]
        break;
 8001d60:	e005      	b.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d62:	4b30      	ldr	r3, [pc, #192]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0ef      	beq.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001d6e:	7cfb      	ldrb	r3, [r7, #19]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d159      	bne.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d74:	4b2a      	ldr	r3, [pc, #168]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d7e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d01e      	beq.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d019      	beq.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d90:	4b23      	ldr	r3, [pc, #140]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d9a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d9c:	4b20      	ldr	r3, [pc, #128]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da2:	4a1f      	ldr	r2, [pc, #124]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001dac:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db2:	4a1b      	ldr	r2, [pc, #108]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001dbc:	4a18      	ldr	r2, [pc, #96]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d016      	beq.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dce:	f7ff f8f3 	bl	8000fb8 <HAL_GetTick>
 8001dd2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dd4:	e00b      	b.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd6:	f7ff f8ef 	bl	8000fb8 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d902      	bls.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	74fb      	strb	r3, [r7, #19]
            break;
 8001dec:	e006      	b.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dee:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0ec      	beq.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001dfc:	7cfb      	ldrb	r3, [r7, #19]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10b      	bne.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e02:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	4903      	ldr	r1, [pc, #12]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001e18:	e008      	b.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e1a:	7cfb      	ldrb	r3, [r7, #19]
 8001e1c:	74bb      	strb	r3, [r7, #18]
 8001e1e:	e005      	b.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e28:	7cfb      	ldrb	r3, [r7, #19]
 8001e2a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e2c:	7c7b      	ldrb	r3, [r7, #17]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d105      	bne.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e32:	4ba6      	ldr	r3, [pc, #664]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e36:	4aa5      	ldr	r2, [pc, #660]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e3c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00a      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e4a:	4ba0      	ldr	r3, [pc, #640]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e50:	f023 0203 	bic.w	r2, r3, #3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	499c      	ldr	r1, [pc, #624]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00a      	beq.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e6c:	4b97      	ldr	r3, [pc, #604]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e72:	f023 020c 	bic.w	r2, r3, #12
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	4994      	ldr	r1, [pc, #592]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0304 	and.w	r3, r3, #4
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00a      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e8e:	4b8f      	ldr	r3, [pc, #572]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e94:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	498b      	ldr	r1, [pc, #556]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0308 	and.w	r3, r3, #8
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d00a      	beq.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001eb0:	4b86      	ldr	r3, [pc, #536]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	4983      	ldr	r1, [pc, #524]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0320 	and.w	r3, r3, #32
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00a      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ed2:	4b7e      	ldr	r3, [pc, #504]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ed8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	497a      	ldr	r1, [pc, #488]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00a      	beq.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ef4:	4b75      	ldr	r3, [pc, #468]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001efa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	4972      	ldr	r1, [pc, #456]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00a      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f16:	4b6d      	ldr	r3, [pc, #436]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f1c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	4969      	ldr	r1, [pc, #420]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00a      	beq.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f38:	4b64      	ldr	r3, [pc, #400]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	4961      	ldr	r1, [pc, #388]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00a      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f5a:	4b5c      	ldr	r3, [pc, #368]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f68:	4958      	ldr	r1, [pc, #352]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d015      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f7c:	4b53      	ldr	r3, [pc, #332]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8a:	4950      	ldr	r1, [pc, #320]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f9a:	d105      	bne.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f9c:	4b4b      	ldr	r3, [pc, #300]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	4a4a      	ldr	r2, [pc, #296]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fa6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d015      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001fb4:	4b45      	ldr	r3, [pc, #276]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc2:	4942      	ldr	r1, [pc, #264]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fd2:	d105      	bne.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fd4:	4b3d      	ldr	r3, [pc, #244]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	4a3c      	ldr	r2, [pc, #240]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fde:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d015      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001fec:	4b37      	ldr	r3, [pc, #220]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	4934      	ldr	r1, [pc, #208]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800200a:	d105      	bne.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800200c:	4b2f      	ldr	r3, [pc, #188]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	4a2e      	ldr	r2, [pc, #184]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002012:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002016:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d015      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002024:	4b29      	ldr	r3, [pc, #164]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800202a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002032:	4926      	ldr	r1, [pc, #152]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002034:	4313      	orrs	r3, r2
 8002036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800203e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002042:	d105      	bne.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002044:	4b21      	ldr	r3, [pc, #132]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	4a20      	ldr	r2, [pc, #128]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800204a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800204e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d015      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800205c:	4b1b      	ldr	r3, [pc, #108]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800205e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002062:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206a:	4918      	ldr	r1, [pc, #96]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800206c:	4313      	orrs	r3, r2
 800206e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002076:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800207a:	d105      	bne.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800207c:	4b13      	ldr	r3, [pc, #76]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	4a12      	ldr	r2, [pc, #72]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002082:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002086:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d015      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002094:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a2:	490a      	ldr	r1, [pc, #40]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020b2:	d105      	bne.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80020b4:	4b05      	ldr	r3, [pc, #20]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	4a04      	ldr	r2, [pc, #16]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020be:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80020c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40021000 	.word	0x40021000

080020d0 <LL_ADC_REG_SetSequencerLength>:
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	f023 020f 	bic.w	r2, r3, #15
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	431a      	orrs	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80020f6:	b480      	push	{r7}
 80020f8:	b083      	sub	sp, #12
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b01      	cmp	r3, #1
 8002108:	d101      	bne.n	800210e <LL_ADC_IsEnabled+0x18>
 800210a:	2301      	movs	r3, #1
 800210c:	e000      	b.n	8002110 <LL_ADC_IsEnabled+0x1a>
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 800211c:	b590      	push	{r4, r7, lr}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002126:	2300      	movs	r3, #0
 8002128:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 800212a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800212e:	f7ff ffe2 	bl	80020f6 <LL_ADC_IsEnabled>
 8002132:	4604      	mov	r4, r0
 8002134:	4817      	ldr	r0, [pc, #92]	; (8002194 <LL_ADC_CommonInit+0x78>)
 8002136:	f7ff ffde 	bl	80020f6 <LL_ADC_IsEnabled>
 800213a:	4603      	mov	r3, r0
 800213c:	4323      	orrs	r3, r4
 800213e:	2b00      	cmp	r3, #0
 8002140:	d120      	bne.n	8002184 <LL_ADC_CommonInit+0x68>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d012      	beq.n	8002170 <LL_ADC_CommonInit+0x54>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	4b12      	ldr	r3, [pc, #72]	; (8002198 <LL_ADC_CommonInit+0x7c>)
 8002150:	4013      	ands	r3, r2
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	6811      	ldr	r1, [r2, #0]
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	6852      	ldr	r2, [r2, #4]
 800215a:	4311      	orrs	r1, r2
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	6892      	ldr	r2, [r2, #8]
 8002160:	4311      	orrs	r1, r2
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	68d2      	ldr	r2, [r2, #12]
 8002166:	430a      	orrs	r2, r1
 8002168:	431a      	orrs	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	609a      	str	r2, [r3, #8]
 800216e:	e00b      	b.n	8002188 <LL_ADC_CommonInit+0x6c>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	4b08      	ldr	r3, [pc, #32]	; (8002198 <LL_ADC_CommonInit+0x7c>)
 8002176:	4013      	ands	r3, r2
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	6812      	ldr	r2, [r2, #0]
 800217c:	431a      	orrs	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	609a      	str	r2, [r3, #8]
 8002182:	e001      	b.n	8002188 <LL_ADC_CommonInit+0x6c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002188:	7bfb      	ldrb	r3, [r7, #15]
}
 800218a:	4618      	mov	r0, r3
 800218c:	3714      	adds	r7, #20
 800218e:	46bd      	mov	sp, r7
 8002190:	bd90      	pop	{r4, r7, pc}
 8002192:	bf00      	nop
 8002194:	50000100 	.word	0x50000100
 8002198:	ffc030e0 	.word	0xffc030e0

0800219c <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80021a6:	2300      	movs	r3, #0
 80021a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff ffa3 	bl	80020f6 <LL_ADC_IsEnabled>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d111      	bne.n	80021da <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80021be:	f023 0318 	bic.w	r3, r3, #24
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	6811      	ldr	r1, [r2, #0]
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	6852      	ldr	r2, [r2, #4]
 80021ca:	4311      	orrs	r1, r2
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	6892      	ldr	r2, [r2, #8]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	60da      	str	r2, [r3, #12]
 80021d8:	e001      	b.n	80021de <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80021de:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80021f2:	2300      	movs	r3, #0
 80021f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff ff7d 	bl	80020f6 <LL_ADC_IsEnabled>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d132      	bne.n	8002268 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d015      	beq.n	8002236 <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68da      	ldr	r2, [r3, #12]
 800220e:	4b1a      	ldr	r3, [pc, #104]	; (8002278 <LL_ADC_REG_Init+0x90>)
 8002210:	4013      	ands	r3, r2
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	6811      	ldr	r1, [r2, #0]
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	6892      	ldr	r2, [r2, #8]
 800221a:	4311      	orrs	r1, r2
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	68d2      	ldr	r2, [r2, #12]
 8002220:	4311      	orrs	r1, r2
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	6912      	ldr	r2, [r2, #16]
 8002226:	4311      	orrs	r1, r2
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	6952      	ldr	r2, [r2, #20]
 800222c:	430a      	orrs	r2, r1
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	60da      	str	r2, [r3, #12]
 8002234:	e011      	b.n	800225a <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	4b0f      	ldr	r3, [pc, #60]	; (8002278 <LL_ADC_REG_Init+0x90>)
 800223c:	4013      	ands	r3, r2
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	6811      	ldr	r1, [r2, #0]
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	68d2      	ldr	r2, [r2, #12]
 8002246:	4311      	orrs	r1, r2
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	6912      	ldr	r2, [r2, #16]
 800224c:	4311      	orrs	r1, r2
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	6952      	ldr	r2, [r2, #20]
 8002252:	430a      	orrs	r2, r1
 8002254:	431a      	orrs	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	4619      	mov	r1, r3
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff ff35 	bl	80020d0 <LL_ADC_REG_SetSequencerLength>
 8002266:	e001      	b.n	800226c <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800226c:	7bfb      	ldrb	r3, [r7, #15]
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	fff0c01c 	.word	0xfff0c01c

0800227c <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002284:	4b05      	ldr	r3, [pc, #20]	; (800229c <LL_EXTI_EnableIT_0_31+0x20>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4904      	ldr	r1, [pc, #16]	; (800229c <LL_EXTI_EnableIT_0_31+0x20>)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4313      	orrs	r3, r2
 800228e:	600b      	str	r3, [r1, #0]
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	40010400 	.word	0x40010400

080022a0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80022a8:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <LL_EXTI_EnableIT_32_63+0x20>)
 80022aa:	6a1a      	ldr	r2, [r3, #32]
 80022ac:	4904      	ldr	r1, [pc, #16]	; (80022c0 <LL_EXTI_EnableIT_32_63+0x20>)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	620b      	str	r3, [r1, #32]
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	40010400 	.word	0x40010400

080022c4 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80022cc:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <LL_EXTI_DisableIT_0_31+0x24>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	43db      	mvns	r3, r3
 80022d4:	4904      	ldr	r1, [pc, #16]	; (80022e8 <LL_EXTI_DisableIT_0_31+0x24>)
 80022d6:	4013      	ands	r3, r2
 80022d8:	600b      	str	r3, [r1, #0]
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	40010400 	.word	0x40010400

080022ec <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80022f4:	4b06      	ldr	r3, [pc, #24]	; (8002310 <LL_EXTI_DisableIT_32_63+0x24>)
 80022f6:	6a1a      	ldr	r2, [r3, #32]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	43db      	mvns	r3, r3
 80022fc:	4904      	ldr	r1, [pc, #16]	; (8002310 <LL_EXTI_DisableIT_32_63+0x24>)
 80022fe:	4013      	ands	r3, r2
 8002300:	620b      	str	r3, [r1, #32]
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	40010400 	.word	0x40010400

08002314 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800231c:	4b05      	ldr	r3, [pc, #20]	; (8002334 <LL_EXTI_EnableEvent_0_31+0x20>)
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	4904      	ldr	r1, [pc, #16]	; (8002334 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4313      	orrs	r3, r2
 8002326:	604b      	str	r3, [r1, #4]

}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	40010400 	.word	0x40010400

08002338 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8002340:	4b05      	ldr	r3, [pc, #20]	; (8002358 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002342:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002344:	4904      	ldr	r1, [pc, #16]	; (8002358 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4313      	orrs	r3, r2
 800234a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	40010400 	.word	0x40010400

0800235c <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002364:	4b06      	ldr	r3, [pc, #24]	; (8002380 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	43db      	mvns	r3, r3
 800236c:	4904      	ldr	r1, [pc, #16]	; (8002380 <LL_EXTI_DisableEvent_0_31+0x24>)
 800236e:	4013      	ands	r3, r2
 8002370:	604b      	str	r3, [r1, #4]
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40010400 	.word	0x40010400

08002384 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <LL_EXTI_DisableEvent_32_63+0x24>)
 800238e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	43db      	mvns	r3, r3
 8002394:	4904      	ldr	r1, [pc, #16]	; (80023a8 <LL_EXTI_DisableEvent_32_63+0x24>)
 8002396:	4013      	ands	r3, r2
 8002398:	624b      	str	r3, [r1, #36]	; 0x24
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	40010400 	.word	0x40010400

080023ac <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	4904      	ldr	r1, [pc, #16]	; (80023cc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4313      	orrs	r3, r2
 80023be:	608b      	str	r3, [r1, #8]

}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	40010400 	.word	0x40010400

080023d0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80023d8:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80023da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023dc:	4904      	ldr	r1, [pc, #16]	; (80023f0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	628b      	str	r3, [r1, #40]	; 0x28
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	40010400 	.word	0x40010400

080023f4 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	43db      	mvns	r3, r3
 8002404:	4904      	ldr	r1, [pc, #16]	; (8002418 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002406:	4013      	ands	r3, r2
 8002408:	608b      	str	r3, [r1, #8]

}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	40010400 	.word	0x40010400

0800241c <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8002424:	4b06      	ldr	r3, [pc, #24]	; (8002440 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002426:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	43db      	mvns	r3, r3
 800242c:	4904      	ldr	r1, [pc, #16]	; (8002440 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800242e:	4013      	ands	r3, r2
 8002430:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40010400 	.word	0x40010400

08002444 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800244c:	4b05      	ldr	r3, [pc, #20]	; (8002464 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	4904      	ldr	r1, [pc, #16]	; (8002464 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4313      	orrs	r3, r2
 8002456:	60cb      	str	r3, [r1, #12]
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	40010400 	.word	0x40010400

08002468 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8002470:	4b05      	ldr	r3, [pc, #20]	; (8002488 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002474:	4904      	ldr	r1, [pc, #16]	; (8002488 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4313      	orrs	r3, r2
 800247a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	40010400 	.word	0x40010400

0800248c <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8002494:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002496:	68da      	ldr	r2, [r3, #12]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	43db      	mvns	r3, r3
 800249c:	4904      	ldr	r1, [pc, #16]	; (80024b0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800249e:	4013      	ands	r3, r2
 80024a0:	60cb      	str	r3, [r1, #12]
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	40010400 	.word	0x40010400

080024b4 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80024bc:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80024be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	43db      	mvns	r3, r3
 80024c4:	4904      	ldr	r1, [pc, #16]	; (80024d8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80024c6:	4013      	ands	r3, r2
 80024c8:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	40010400 	.word	0x40010400

080024dc <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	7a1b      	ldrb	r3, [r3, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 80d3 	beq.w	8002698 <LL_EXTI_Init+0x1bc>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d063      	beq.n	80025c2 <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	7a5b      	ldrb	r3, [r3, #9]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d01c      	beq.n	800253c <LL_EXTI_Init+0x60>
 8002502:	2b02      	cmp	r3, #2
 8002504:	dc25      	bgt.n	8002552 <LL_EXTI_Init+0x76>
 8002506:	2b00      	cmp	r3, #0
 8002508:	d002      	beq.n	8002510 <LL_EXTI_Init+0x34>
 800250a:	2b01      	cmp	r3, #1
 800250c:	d00b      	beq.n	8002526 <LL_EXTI_Init+0x4a>
 800250e:	e020      	b.n	8002552 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff ff21 	bl	800235c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff feac 	bl	800227c <LL_EXTI_EnableIT_0_31>
          break;
 8002524:	e018      	b.n	8002558 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff feca 	bl	80022c4 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff feed 	bl	8002314 <LL_EXTI_EnableEvent_0_31>
          break;
 800253a:	e00d      	b.n	8002558 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff fe9b 	bl	800227c <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff fee2 	bl	8002314 <LL_EXTI_EnableEvent_0_31>
          break;
 8002550:	e002      	b.n	8002558 <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 8002552:	2301      	movs	r3, #1
 8002554:	60fb      	str	r3, [r7, #12]
          break;
 8002556:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	7a9b      	ldrb	r3, [r3, #10]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d030      	beq.n	80025c2 <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	7a9b      	ldrb	r3, [r3, #10]
 8002564:	2b03      	cmp	r3, #3
 8002566:	d01c      	beq.n	80025a2 <LL_EXTI_Init+0xc6>
 8002568:	2b03      	cmp	r3, #3
 800256a:	dc25      	bgt.n	80025b8 <LL_EXTI_Init+0xdc>
 800256c:	2b01      	cmp	r3, #1
 800256e:	d002      	beq.n	8002576 <LL_EXTI_Init+0x9a>
 8002570:	2b02      	cmp	r3, #2
 8002572:	d00b      	beq.n	800258c <LL_EXTI_Init+0xb0>
 8002574:	e020      	b.n	80025b8 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff ff86 	bl	800248c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff ff11 	bl	80023ac <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800258a:	e01b      	b.n	80025c4 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff ff2f 	bl	80023f4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff ff52 	bl	8002444 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80025a0:	e010      	b.n	80025c4 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff ff00 	bl	80023ac <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff ff47 	bl	8002444 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80025b6:	e005      	b.n	80025c4 <LL_EXTI_Init+0xe8>
          default:
            status |= 0x02u;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f043 0302 	orr.w	r3, r3, #2
 80025be:	60fb      	str	r3, [r7, #12]
            break;
 80025c0:	e000      	b.n	80025c4 <LL_EXTI_Init+0xe8>
        }
      }
 80025c2:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d07a      	beq.n	80026c2 <LL_EXTI_Init+0x1e6>
    {
      switch (EXTI_InitStruct->Mode)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	7a5b      	ldrb	r3, [r3, #9]
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d01c      	beq.n	800260e <LL_EXTI_Init+0x132>
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	dc25      	bgt.n	8002624 <LL_EXTI_Init+0x148>
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d002      	beq.n	80025e2 <LL_EXTI_Init+0x106>
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d00b      	beq.n	80025f8 <LL_EXTI_Init+0x11c>
 80025e0:	e020      	b.n	8002624 <LL_EXTI_Init+0x148>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff fecc 	bl	8002384 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff fe55 	bl	80022a0 <LL_EXTI_EnableIT_32_63>
          break;
 80025f6:	e01a      	b.n	800262e <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff fe75 	bl	80022ec <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff fe96 	bl	8002338 <LL_EXTI_EnableEvent_32_63>
          break;
 800260c:	e00f      	b.n	800262e <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff fe44 	bl	80022a0 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fe8b 	bl	8002338 <LL_EXTI_EnableEvent_32_63>
          break;
 8002622:	e004      	b.n	800262e <LL_EXTI_Init+0x152>
        default:
          status |= 0x04u;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f043 0304 	orr.w	r3, r3, #4
 800262a:	60fb      	str	r3, [r7, #12]
          break;
 800262c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	7a9b      	ldrb	r3, [r3, #10]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d045      	beq.n	80026c2 <LL_EXTI_Init+0x1e6>
      {
        switch (EXTI_InitStruct->Trigger)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	7a9b      	ldrb	r3, [r3, #10]
 800263a:	2b03      	cmp	r3, #3
 800263c:	d01c      	beq.n	8002678 <LL_EXTI_Init+0x19c>
 800263e:	2b03      	cmp	r3, #3
 8002640:	dc25      	bgt.n	800268e <LL_EXTI_Init+0x1b2>
 8002642:	2b01      	cmp	r3, #1
 8002644:	d002      	beq.n	800264c <LL_EXTI_Init+0x170>
 8002646:	2b02      	cmp	r3, #2
 8002648:	d00b      	beq.n	8002662 <LL_EXTI_Init+0x186>
 800264a:	e020      	b.n	800268e <LL_EXTI_Init+0x1b2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff ff2f 	bl	80024b4 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff feb8 	bl	80023d0 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8002660:	e030      	b.n	80026c4 <LL_EXTI_Init+0x1e8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff fed8 	bl	800241c <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff fef9 	bl	8002468 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8002676:	e025      	b.n	80026c4 <LL_EXTI_Init+0x1e8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff fea7 	bl	80023d0 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff feee 	bl	8002468 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800268c:	e01a      	b.n	80026c4 <LL_EXTI_Init+0x1e8>
          default:
            status |= 0x05u;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f043 0305 	orr.w	r3, r3, #5
 8002694:	60fb      	str	r3, [r7, #12]
            break;
 8002696:	e015      	b.n	80026c4 <LL_EXTI_Init+0x1e8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff fe11 	bl	80022c4 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff fe58 	bl	800235c <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff fe1b 	bl	80022ec <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff fe62 	bl	8002384 <LL_EXTI_DisableEvent_32_63>
 80026c0:	e000      	b.n	80026c4 <LL_EXTI_Init+0x1e8>
      }
 80026c2:	bf00      	nop
  }

  return status;
 80026c4:	68fb      	ldr	r3, [r7, #12]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <LL_GPIO_SetPinMode>:
{
 80026ce:	b480      	push	{r7}
 80026d0:	b08b      	sub	sp, #44	; 0x2c
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	60f8      	str	r0, [r7, #12]
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	fa93 f3a3 	rbit	r3, r3
 80026e8:	613b      	str	r3, [r7, #16]
  return result;
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80026f4:	2320      	movs	r3, #32
 80026f6:	e003      	b.n	8002700 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	fab3 f383 	clz	r3, r3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	2103      	movs	r1, #3
 8002704:	fa01 f303 	lsl.w	r3, r1, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	401a      	ands	r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002710:	6a3b      	ldr	r3, [r7, #32]
 8002712:	fa93 f3a3 	rbit	r3, r3
 8002716:	61fb      	str	r3, [r7, #28]
  return result;
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8002722:	2320      	movs	r3, #32
 8002724:	e003      	b.n	800272e <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	fab3 f383 	clz	r3, r3
 800272c:	b2db      	uxtb	r3, r3
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	fa01 f303 	lsl.w	r3, r1, r3
 8002736:	431a      	orrs	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	601a      	str	r2, [r3, #0]
}
 800273c:	bf00      	nop
 800273e:	372c      	adds	r7, #44	; 0x2c
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <LL_GPIO_SetPinOutputType>:
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	43db      	mvns	r3, r3
 800275c:	401a      	ands	r2, r3
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	fb01 f303 	mul.w	r3, r1, r3
 8002766:	431a      	orrs	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	605a      	str	r2, [r3, #4]
}
 800276c:	bf00      	nop
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <LL_GPIO_SetPinSpeed>:
{
 8002778:	b480      	push	{r7}
 800277a:	b08b      	sub	sp, #44	; 0x2c
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	fa93 f3a3 	rbit	r3, r3
 8002792:	613b      	str	r3, [r7, #16]
  return result;
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800279e:	2320      	movs	r3, #32
 80027a0:	e003      	b.n	80027aa <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	fab3 f383 	clz	r3, r3
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	2103      	movs	r1, #3
 80027ae:	fa01 f303 	lsl.w	r3, r1, r3
 80027b2:	43db      	mvns	r3, r3
 80027b4:	401a      	ands	r2, r3
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ba:	6a3b      	ldr	r3, [r7, #32]
 80027bc:	fa93 f3a3 	rbit	r3, r3
 80027c0:	61fb      	str	r3, [r7, #28]
  return result;
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80027cc:	2320      	movs	r3, #32
 80027ce:	e003      	b.n	80027d8 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	fab3 f383 	clz	r3, r3
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	fa01 f303 	lsl.w	r3, r1, r3
 80027e0:	431a      	orrs	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	609a      	str	r2, [r3, #8]
}
 80027e6:	bf00      	nop
 80027e8:	372c      	adds	r7, #44	; 0x2c
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <LL_GPIO_SetPinPull>:
{
 80027f2:	b480      	push	{r7}
 80027f4:	b08b      	sub	sp, #44	; 0x2c
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	fa93 f3a3 	rbit	r3, r3
 800280c:	613b      	str	r3, [r7, #16]
  return result;
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002818:	2320      	movs	r3, #32
 800281a:	e003      	b.n	8002824 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	fab3 f383 	clz	r3, r3
 8002822:	b2db      	uxtb	r3, r3
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	2103      	movs	r1, #3
 8002828:	fa01 f303 	lsl.w	r3, r1, r3
 800282c:	43db      	mvns	r3, r3
 800282e:	401a      	ands	r2, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002834:	6a3b      	ldr	r3, [r7, #32]
 8002836:	fa93 f3a3 	rbit	r3, r3
 800283a:	61fb      	str	r3, [r7, #28]
  return result;
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002846:	2320      	movs	r3, #32
 8002848:	e003      	b.n	8002852 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	fab3 f383 	clz	r3, r3
 8002850:	b2db      	uxtb	r3, r3
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	fa01 f303 	lsl.w	r3, r1, r3
 800285a:	431a      	orrs	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	60da      	str	r2, [r3, #12]
}
 8002860:	bf00      	nop
 8002862:	372c      	adds	r7, #44	; 0x2c
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <LL_GPIO_SetAFPin_0_7>:
{
 800286c:	b480      	push	{r7}
 800286e:	b08b      	sub	sp, #44	; 0x2c
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6a1a      	ldr	r2, [r3, #32]
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	fa93 f3a3 	rbit	r3, r3
 8002886:	613b      	str	r3, [r7, #16]
  return result;
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002892:	2320      	movs	r3, #32
 8002894:	e003      	b.n	800289e <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	fab3 f383 	clz	r3, r3
 800289c:	b2db      	uxtb	r3, r3
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	210f      	movs	r1, #15
 80028a2:	fa01 f303 	lsl.w	r3, r1, r3
 80028a6:	43db      	mvns	r3, r3
 80028a8:	401a      	ands	r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	fa93 f3a3 	rbit	r3, r3
 80028b4:	61fb      	str	r3, [r7, #28]
  return result;
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80028c0:	2320      	movs	r3, #32
 80028c2:	e003      	b.n	80028cc <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	fab3 f383 	clz	r3, r3
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	fa01 f303 	lsl.w	r3, r1, r3
 80028d4:	431a      	orrs	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	621a      	str	r2, [r3, #32]
}
 80028da:	bf00      	nop
 80028dc:	372c      	adds	r7, #44	; 0x2c
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <LL_GPIO_SetAFPin_8_15>:
{
 80028e6:	b480      	push	{r7}
 80028e8:	b08b      	sub	sp, #44	; 0x2c
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	60f8      	str	r0, [r7, #12]
 80028ee:	60b9      	str	r1, [r7, #8]
 80028f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	0a1b      	lsrs	r3, r3, #8
 80028fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	fa93 f3a3 	rbit	r3, r3
 8002902:	613b      	str	r3, [r7, #16]
  return result;
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800290e:	2320      	movs	r3, #32
 8002910:	e003      	b.n	800291a <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	fab3 f383 	clz	r3, r3
 8002918:	b2db      	uxtb	r3, r3
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	210f      	movs	r1, #15
 800291e:	fa01 f303 	lsl.w	r3, r1, r3
 8002922:	43db      	mvns	r3, r3
 8002924:	401a      	ands	r2, r3
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	0a1b      	lsrs	r3, r3, #8
 800292a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292c:	6a3b      	ldr	r3, [r7, #32]
 800292e:	fa93 f3a3 	rbit	r3, r3
 8002932:	61fb      	str	r3, [r7, #28]
  return result;
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800293e:	2320      	movs	r3, #32
 8002940:	e003      	b.n	800294a <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	fab3 f383 	clz	r3, r3
 8002948:	b2db      	uxtb	r3, r3
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	fa01 f303 	lsl.w	r3, r1, r3
 8002952:	431a      	orrs	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002958:	bf00      	nop
 800295a:	372c      	adds	r7, #44	; 0x2c
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b088      	sub	sp, #32
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	fa93 f3a3 	rbit	r3, r3
 800297a:	60fb      	str	r3, [r7, #12]
  return result;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <LL_GPIO_Init+0x26>
    return 32U;
 8002986:	2320      	movs	r3, #32
 8002988:	e003      	b.n	8002992 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	fab3 f383 	clz	r3, r3
 8002990:	b2db      	uxtb	r3, r3
 8002992:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002994:	e048      	b.n	8002a28 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	2101      	movs	r1, #1
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	fa01 f303 	lsl.w	r3, r1, r3
 80029a2:	4013      	ands	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d03a      	beq.n	8002a22 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d003      	beq.n	80029bc <LL_GPIO_Init+0x58>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d10e      	bne.n	80029da <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	461a      	mov	r2, r3
 80029c2:	69b9      	ldr	r1, [r7, #24]
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7ff fed7 	bl	8002778 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	6819      	ldr	r1, [r3, #0]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	461a      	mov	r2, r3
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f7ff feb7 	bl	8002748 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	461a      	mov	r2, r3
 80029e0:	69b9      	ldr	r1, [r7, #24]
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7ff ff05 	bl	80027f2 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d111      	bne.n	8002a14 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	2bff      	cmp	r3, #255	; 0xff
 80029f4:	d807      	bhi.n	8002a06 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	461a      	mov	r2, r3
 80029fc:	69b9      	ldr	r1, [r7, #24]
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7ff ff34 	bl	800286c <LL_GPIO_SetAFPin_0_7>
 8002a04:	e006      	b.n	8002a14 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	69b9      	ldr	r1, [r7, #24]
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7ff ff69 	bl	80028e6 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	69b9      	ldr	r1, [r7, #24]
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7ff fe56 	bl	80026ce <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	3301      	adds	r3, #1
 8002a26:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1af      	bne.n	8002996 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3720      	adds	r7, #32
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <LL_TIM_SetPrescaler>:
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <LL_TIM_SetAutoReload>:
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <LL_TIM_SetRepetitionCounter>:
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <LL_TIM_OC_SetCompareCH1>:
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <LL_TIM_OC_SetCompareCH2>:
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <LL_TIM_OC_SetCompareCH3>:
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <LL_TIM_OC_SetCompareCH4>:
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <LL_TIM_OC_SetCompareCH5>:
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	649a      	str	r2, [r3, #72]	; 0x48
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <LL_TIM_OC_SetCompareCH6>:
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	f043 0201 	orr.w	r2, r3, #1
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	615a      	str	r2, [r3, #20]
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a39      	ldr	r2, [pc, #228]	; (8002c58 <LL_TIM_Init+0xf8>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d00f      	beq.n	8002b98 <LL_TIM_Init+0x38>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b7e:	d00b      	beq.n	8002b98 <LL_TIM_Init+0x38>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a36      	ldr	r2, [pc, #216]	; (8002c5c <LL_TIM_Init+0xfc>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d007      	beq.n	8002b98 <LL_TIM_Init+0x38>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a35      	ldr	r2, [pc, #212]	; (8002c60 <LL_TIM_Init+0x100>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d003      	beq.n	8002b98 <LL_TIM_Init+0x38>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a34      	ldr	r2, [pc, #208]	; (8002c64 <LL_TIM_Init+0x104>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d106      	bne.n	8002ba6 <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a2b      	ldr	r2, [pc, #172]	; (8002c58 <LL_TIM_Init+0xf8>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d01b      	beq.n	8002be6 <LL_TIM_Init+0x86>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb4:	d017      	beq.n	8002be6 <LL_TIM_Init+0x86>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a28      	ldr	r2, [pc, #160]	; (8002c5c <LL_TIM_Init+0xfc>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d013      	beq.n	8002be6 <LL_TIM_Init+0x86>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a27      	ldr	r2, [pc, #156]	; (8002c60 <LL_TIM_Init+0x100>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d00f      	beq.n	8002be6 <LL_TIM_Init+0x86>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a26      	ldr	r2, [pc, #152]	; (8002c64 <LL_TIM_Init+0x104>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d00b      	beq.n	8002be6 <LL_TIM_Init+0x86>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a25      	ldr	r2, [pc, #148]	; (8002c68 <LL_TIM_Init+0x108>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d007      	beq.n	8002be6 <LL_TIM_Init+0x86>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a24      	ldr	r2, [pc, #144]	; (8002c6c <LL_TIM_Init+0x10c>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d003      	beq.n	8002be6 <LL_TIM_Init+0x86>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a23      	ldr	r2, [pc, #140]	; (8002c70 <LL_TIM_Init+0x110>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d106      	bne.n	8002bf4 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	4619      	mov	r1, r3
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7ff ff2b 	bl	8002a5c <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	881b      	ldrh	r3, [r3, #0]
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7ff ff17 	bl	8002a40 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a10      	ldr	r2, [pc, #64]	; (8002c58 <LL_TIM_Init+0xf8>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d00f      	beq.n	8002c3a <LL_TIM_Init+0xda>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a11      	ldr	r2, [pc, #68]	; (8002c64 <LL_TIM_Init+0x104>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d00b      	beq.n	8002c3a <LL_TIM_Init+0xda>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a10      	ldr	r2, [pc, #64]	; (8002c68 <LL_TIM_Init+0x108>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d007      	beq.n	8002c3a <LL_TIM_Init+0xda>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a0f      	ldr	r2, [pc, #60]	; (8002c6c <LL_TIM_Init+0x10c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d003      	beq.n	8002c3a <LL_TIM_Init+0xda>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a0e      	ldr	r2, [pc, #56]	; (8002c70 <LL_TIM_Init+0x110>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d105      	bne.n	8002c46 <LL_TIM_Init+0xe6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	4619      	mov	r1, r3
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f7ff ff19 	bl	8002a78 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7ff ff7a 	bl	8002b40 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40012c00 	.word	0x40012c00
 8002c5c:	40000400 	.word	0x40000400
 8002c60:	40000800 	.word	0x40000800
 8002c64:	40013400 	.word	0x40013400
 8002c68:	40014000 	.word	0x40014000
 8002c6c:	40014400 	.word	0x40014400
 8002c70:	40014800 	.word	0x40014800

08002c74 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c8a:	d045      	beq.n	8002d18 <LL_TIM_OC_Init+0xa4>
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c92:	d848      	bhi.n	8002d26 <LL_TIM_OC_Init+0xb2>
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c9a:	d036      	beq.n	8002d0a <LL_TIM_OC_Init+0x96>
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ca2:	d840      	bhi.n	8002d26 <LL_TIM_OC_Init+0xb2>
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002caa:	d027      	beq.n	8002cfc <LL_TIM_OC_Init+0x88>
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb2:	d838      	bhi.n	8002d26 <LL_TIM_OC_Init+0xb2>
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cba:	d018      	beq.n	8002cee <LL_TIM_OC_Init+0x7a>
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cc2:	d830      	bhi.n	8002d26 <LL_TIM_OC_Init+0xb2>
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d003      	beq.n	8002cd2 <LL_TIM_OC_Init+0x5e>
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2b10      	cmp	r3, #16
 8002cce:	d007      	beq.n	8002ce0 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002cd0:	e029      	b.n	8002d26 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 f8b5 	bl	8002e44 <OC1Config>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	75fb      	strb	r3, [r7, #23]
      break;
 8002cde:	e023      	b.n	8002d28 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 f92e 	bl	8002f44 <OC2Config>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	75fb      	strb	r3, [r7, #23]
      break;
 8002cec:	e01c      	b.n	8002d28 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 f9ab 	bl	800304c <OC3Config>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	75fb      	strb	r3, [r7, #23]
      break;
 8002cfa:	e015      	b.n	8002d28 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 fa28 	bl	8003154 <OC4Config>
 8002d04:	4603      	mov	r3, r0
 8002d06:	75fb      	strb	r3, [r7, #23]
      break;
 8002d08:	e00e      	b.n	8002d28 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 faa5 	bl	800325c <OC5Config>
 8002d12:	4603      	mov	r3, r0
 8002d14:	75fb      	strb	r3, [r7, #23]
      break;
 8002d16:	e007      	b.n	8002d28 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 fb02 	bl	8003324 <OC6Config>
 8002d20:	4603      	mov	r3, r0
 8002d22:	75fb      	strb	r3, [r7, #23]
      break;
 8002d24:	e000      	b.n	8002d28 <LL_TIM_OC_Init+0xb4>
      break;
 8002d26:	bf00      	nop
  }

  return result;
 8002d28:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3718      	adds	r7, #24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
	...

08002d34 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	7b12      	ldrb	r2, [r2, #12]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	89d2      	ldrh	r2, [r2, #14]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da0:	4313      	orrs	r3, r2
 8002da2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dae:	4313      	orrs	r3, r2
 8002db0:	60fb      	str	r3, [r7, #12]
  if (IS_TIM_ADVANCED_INSTANCE(TIMx))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a21      	ldr	r2, [pc, #132]	; (8002e3c <LL_TIM_BDTR_Init+0x108>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d003      	beq.n	8002dc2 <LL_TIM_BDTR_Init+0x8e>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a20      	ldr	r2, [pc, #128]	; (8002e40 <LL_TIM_BDTR_Init+0x10c>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d10d      	bne.n	8002dde <LL_TIM_BDTR_Init+0xaa>
  {
    assert_param(IS_LL_TIM_BREAK_FILTER(TIM_BDTRInitStruct->BreakFilter));
    assert_param(IS_LL_TIM_BREAK_AFMODE(TIM_BDTRInitStruct->BreakAFMode));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, TIM_BDTRInitStruct->BreakAFMode);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a16      	ldr	r2, [pc, #88]	; (8002e3c <LL_TIM_BDTR_Init+0x108>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d003      	beq.n	8002dee <LL_TIM_BDTR_Init+0xba>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a15      	ldr	r2, [pc, #84]	; (8002e40 <LL_TIM_BDTR_Init+0x10c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d11b      	bne.n	8002e26 <LL_TIM_BDTR_Init+0xf2>
    assert_param(IS_LL_TIM_BREAK2_POLARITY(TIM_BDTRInitStruct->Break2Polarity));
    assert_param(IS_LL_TIM_BREAK2_FILTER(TIM_BDTRInitStruct->Break2Filter));
    assert_param(IS_LL_TIM_BREAK2_AFMODE(TIM_BDTRInitStruct->Break2AFMode));

    /* Set the BREAK2 input related BDTR bit-fields */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, TIM_BDTRInitStruct->Break2AFMode);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e22:	4313      	orrs	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	40012c00 	.word	0x40012c00
 8002e40:	40013400 	.word	0x40013400

08002e44 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	f023 0201 	bic.w	r2, r3, #1
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f023 0303 	bic.w	r3, r3, #3
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	6812      	ldr	r2, [r2, #0]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f023 0202 	bic.w	r2, r3, #2
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	f023 0201 	bic.w	r2, r3, #1
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a22      	ldr	r2, [pc, #136]	; (8002f30 <OC1Config+0xec>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d00f      	beq.n	8002eca <OC1Config+0x86>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a21      	ldr	r2, [pc, #132]	; (8002f34 <OC1Config+0xf0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d00b      	beq.n	8002eca <OC1Config+0x86>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a20      	ldr	r2, [pc, #128]	; (8002f38 <OC1Config+0xf4>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d007      	beq.n	8002eca <OC1Config+0x86>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a1f      	ldr	r2, [pc, #124]	; (8002f3c <OC1Config+0xf8>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d003      	beq.n	8002eca <OC1Config+0x86>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a1e      	ldr	r2, [pc, #120]	; (8002f40 <OC1Config+0xfc>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d11e      	bne.n	8002f08 <OC1Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f023 0208 	bic.w	r2, r3, #8
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f023 0204 	bic.w	r2, r3, #4
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	4313      	orrs	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	4619      	mov	r1, r3
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7ff fdba 	bl	8002a94 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40012c00 	.word	0x40012c00
 8002f34:	40013400 	.word	0x40013400
 8002f38:	40014000 	.word	0x40014000
 8002f3c:	40014400 	.word	0x40014400
 8002f40:	40014800 	.word	0x40014800

08002f44 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	f023 0210 	bic.w	r2, r3, #16
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	6812      	ldr	r2, [r2, #0]
 8002f82:	0212      	lsls	r2, r2, #8
 8002f84:	4313      	orrs	r3, r2
 8002f86:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f023 0220 	bic.w	r2, r3, #32
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	4313      	orrs	r3, r2
 8002f96:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	f023 0210 	bic.w	r2, r3, #16
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a23      	ldr	r2, [pc, #140]	; (8003038 <OC2Config+0xf4>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d00f      	beq.n	8002fd0 <OC2Config+0x8c>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a22      	ldr	r2, [pc, #136]	; (800303c <OC2Config+0xf8>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d00b      	beq.n	8002fd0 <OC2Config+0x8c>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a21      	ldr	r2, [pc, #132]	; (8003040 <OC2Config+0xfc>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d007      	beq.n	8002fd0 <OC2Config+0x8c>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a20      	ldr	r2, [pc, #128]	; (8003044 <OC2Config+0x100>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d003      	beq.n	8002fd0 <OC2Config+0x8c>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a1f      	ldr	r2, [pc, #124]	; (8003048 <OC2Config+0x104>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d11f      	bne.n	8003010 <OC2Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	019b      	lsls	r3, r3, #6
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	019b      	lsls	r3, r3, #6
 8002fec:	4313      	orrs	r3, r2
 8002fee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	4313      	orrs	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	4619      	mov	r1, r3
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7ff fd44 	bl	8002ab0 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40012c00 	.word	0x40012c00
 800303c:	40013400 	.word	0x40013400
 8003040:	40014000 	.word	0x40014000
 8003044:	40014400 	.word	0x40014400
 8003048:	40014800 	.word	0x40014800

0800304c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f023 0303 	bic.w	r3, r3, #3
 800307a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	6812      	ldr	r2, [r2, #0]
 800308a:	4313      	orrs	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	021b      	lsls	r3, r3, #8
 800309a:	4313      	orrs	r3, r2
 800309c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	021b      	lsls	r3, r3, #8
 80030aa:	4313      	orrs	r3, r2
 80030ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a23      	ldr	r2, [pc, #140]	; (8003140 <OC3Config+0xf4>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d00f      	beq.n	80030d6 <OC3Config+0x8a>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a22      	ldr	r2, [pc, #136]	; (8003144 <OC3Config+0xf8>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d00b      	beq.n	80030d6 <OC3Config+0x8a>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a21      	ldr	r2, [pc, #132]	; (8003148 <OC3Config+0xfc>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d007      	beq.n	80030d6 <OC3Config+0x8a>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a20      	ldr	r2, [pc, #128]	; (800314c <OC3Config+0x100>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d003      	beq.n	80030d6 <OC3Config+0x8a>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a1f      	ldr	r2, [pc, #124]	; (8003150 <OC3Config+0x104>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d11f      	bne.n	8003116 <OC3Config+0xca>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	029b      	lsls	r3, r3, #10
 80030e2:	4313      	orrs	r3, r2
 80030e4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	029b      	lsls	r3, r3, #10
 80030f2:	4313      	orrs	r3, r2
 80030f4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	4313      	orrs	r3, r2
 8003104:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	015b      	lsls	r3, r3, #5
 8003112:	4313      	orrs	r3, r2
 8003114:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	4619      	mov	r1, r3
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7ff fccf 	bl	8002acc <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3718      	adds	r7, #24
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40012c00 	.word	0x40012c00
 8003144:	40013400 	.word	0x40013400
 8003148:	40014000 	.word	0x40014000
 800314c:	40014400 	.word	0x40014400
 8003150:	40014800 	.word	0x40014800

08003154 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003182:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800318a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	6812      	ldr	r2, [r2, #0]
 8003192:	0212      	lsls	r2, r2, #8
 8003194:	4313      	orrs	r3, r2
 8003196:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	031b      	lsls	r3, r3, #12
 80031a4:	4313      	orrs	r3, r2
 80031a6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	031b      	lsls	r3, r3, #12
 80031b4:	4313      	orrs	r3, r2
 80031b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a23      	ldr	r2, [pc, #140]	; (8003248 <OC4Config+0xf4>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d00f      	beq.n	80031e0 <OC4Config+0x8c>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a22      	ldr	r2, [pc, #136]	; (800324c <OC4Config+0xf8>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d00b      	beq.n	80031e0 <OC4Config+0x8c>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a21      	ldr	r2, [pc, #132]	; (8003250 <OC4Config+0xfc>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d007      	beq.n	80031e0 <OC4Config+0x8c>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a20      	ldr	r2, [pc, #128]	; (8003254 <OC4Config+0x100>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d003      	beq.n	80031e0 <OC4Config+0x8c>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a1f      	ldr	r2, [pc, #124]	; (8003258 <OC4Config+0x104>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d11f      	bne.n	8003220 <OC4Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NP, TIM_OCInitStruct->OCNPolarity << 14U);
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	039b      	lsls	r3, r3, #14
 80031ec:	4313      	orrs	r3, r2
 80031ee:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NE, TIM_OCInitStruct->OCNState << 14U);
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	039b      	lsls	r3, r3, #14
 80031fc:	4313      	orrs	r3, r2
 80031fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	019b      	lsls	r3, r3, #6
 800320c:	4313      	orrs	r3, r2
 800320e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4N, TIM_OCInitStruct->OCNIdleState << 7U);
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	01db      	lsls	r3, r3, #7
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	4619      	mov	r1, r3
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7ff fc58 	bl	8002ae8 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3718      	adds	r7, #24
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40012c00 	.word	0x40012c00
 800324c:	40013400 	.word	0x40013400
 8003250:	40014000 	.word	0x40014000
 8003254:	40014400 	.word	0x40014400
 8003258:	40014800 	.word	0x40014800

0800325c <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800327c:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	6812      	ldr	r2, [r2, #0]
 800328c:	4313      	orrs	r3, r2
 800328e:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	041b      	lsls	r3, r3, #16
 800329c:	4313      	orrs	r3, r2
 800329e:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	041b      	lsls	r3, r3, #16
 80032ac:	4313      	orrs	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a17      	ldr	r2, [pc, #92]	; (8003310 <OC5Config+0xb4>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d00f      	beq.n	80032d8 <OC5Config+0x7c>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a16      	ldr	r2, [pc, #88]	; (8003314 <OC5Config+0xb8>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d00b      	beq.n	80032d8 <OC5Config+0x7c>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a15      	ldr	r2, [pc, #84]	; (8003318 <OC5Config+0xbc>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d007      	beq.n	80032d8 <OC5Config+0x7c>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a14      	ldr	r2, [pc, #80]	; (800331c <OC5Config+0xc0>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d003      	beq.n	80032d8 <OC5Config+0x7c>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a13      	ldr	r2, [pc, #76]	; (8003320 <OC5Config+0xc4>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d109      	bne.n	80032ec <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	021b      	lsls	r3, r3, #8
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	4619      	mov	r1, r3
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f7ff fc03 	bl	8002b04 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40012c00 	.word	0x40012c00
 8003314:	40013400 	.word	0x40013400
 8003318:	40014000 	.word	0x40014000
 800331c:	40014400 	.word	0x40014400
 8003320:	40014800 	.word	0x40014800

08003324 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003344:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800334c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	6812      	ldr	r2, [r2, #0]
 8003354:	0212      	lsls	r2, r2, #8
 8003356:	4313      	orrs	r3, r2
 8003358:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	051b      	lsls	r3, r3, #20
 8003366:	4313      	orrs	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	051b      	lsls	r3, r3, #20
 8003376:	4313      	orrs	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a16      	ldr	r2, [pc, #88]	; (80033d8 <OC6Config+0xb4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00f      	beq.n	80033a2 <OC6Config+0x7e>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a15      	ldr	r2, [pc, #84]	; (80033dc <OC6Config+0xb8>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d00b      	beq.n	80033a2 <OC6Config+0x7e>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a14      	ldr	r2, [pc, #80]	; (80033e0 <OC6Config+0xbc>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d007      	beq.n	80033a2 <OC6Config+0x7e>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a13      	ldr	r2, [pc, #76]	; (80033e4 <OC6Config+0xc0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d003      	beq.n	80033a2 <OC6Config+0x7e>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a12      	ldr	r2, [pc, #72]	; (80033e8 <OC6Config+0xc4>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d109      	bne.n	80033b6 <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	029b      	lsls	r3, r3, #10
 80033b0:	431a      	orrs	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	4619      	mov	r1, r3
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff fbae 	bl	8002b24 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40012c00 	.word	0x40012c00
 80033dc:	40013400 	.word	0x40013400
 80033e0:	40014000 	.word	0x40014000
 80033e4:	40014400 	.word	0x40014400
 80033e8:	40014800 	.word	0x40014800

080033ec <__libc_init_array>:
 80033ec:	b570      	push	{r4, r5, r6, lr}
 80033ee:	4d0d      	ldr	r5, [pc, #52]	; (8003424 <__libc_init_array+0x38>)
 80033f0:	4c0d      	ldr	r4, [pc, #52]	; (8003428 <__libc_init_array+0x3c>)
 80033f2:	1b64      	subs	r4, r4, r5
 80033f4:	10a4      	asrs	r4, r4, #2
 80033f6:	2600      	movs	r6, #0
 80033f8:	42a6      	cmp	r6, r4
 80033fa:	d109      	bne.n	8003410 <__libc_init_array+0x24>
 80033fc:	4d0b      	ldr	r5, [pc, #44]	; (800342c <__libc_init_array+0x40>)
 80033fe:	4c0c      	ldr	r4, [pc, #48]	; (8003430 <__libc_init_array+0x44>)
 8003400:	f000 f820 	bl	8003444 <_init>
 8003404:	1b64      	subs	r4, r4, r5
 8003406:	10a4      	asrs	r4, r4, #2
 8003408:	2600      	movs	r6, #0
 800340a:	42a6      	cmp	r6, r4
 800340c:	d105      	bne.n	800341a <__libc_init_array+0x2e>
 800340e:	bd70      	pop	{r4, r5, r6, pc}
 8003410:	f855 3b04 	ldr.w	r3, [r5], #4
 8003414:	4798      	blx	r3
 8003416:	3601      	adds	r6, #1
 8003418:	e7ee      	b.n	80033f8 <__libc_init_array+0xc>
 800341a:	f855 3b04 	ldr.w	r3, [r5], #4
 800341e:	4798      	blx	r3
 8003420:	3601      	adds	r6, #1
 8003422:	e7f2      	b.n	800340a <__libc_init_array+0x1e>
 8003424:	08003484 	.word	0x08003484
 8003428:	08003484 	.word	0x08003484
 800342c:	08003484 	.word	0x08003484
 8003430:	08003488 	.word	0x08003488

08003434 <memset>:
 8003434:	4402      	add	r2, r0
 8003436:	4603      	mov	r3, r0
 8003438:	4293      	cmp	r3, r2
 800343a:	d100      	bne.n	800343e <memset+0xa>
 800343c:	4770      	bx	lr
 800343e:	f803 1b01 	strb.w	r1, [r3], #1
 8003442:	e7f9      	b.n	8003438 <memset+0x4>

08003444 <_init>:
 8003444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003446:	bf00      	nop
 8003448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800344a:	bc08      	pop	{r3}
 800344c:	469e      	mov	lr, r3
 800344e:	4770      	bx	lr

08003450 <_fini>:
 8003450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003452:	bf00      	nop
 8003454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003456:	bc08      	pop	{r3}
 8003458:	469e      	mov	lr, r3
 800345a:	4770      	bx	lr
