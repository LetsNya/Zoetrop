
Zoetrop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000417c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004354  08004354  00014354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004364  08004364  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004364  08004364  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004364  08004364  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004364  08004364  00014364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004368  08004368  00014368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800436c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  08004378  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08004378  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012506  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a01  00000000  00000000  00032542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  00034f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a8  00000000  00000000  00036138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023585  00000000  00000000  000371e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012001  00000000  00000000  0005a765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de0b4  00000000  00000000  0006c766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014a81a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b54  00000000  00000000  0014a870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800433c 	.word	0x0800433c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	0800433c 	.word	0x0800433c

08000218 <LL_ADC_REG_SetContinuousMode>:
  *         @arg @ref LL_ADC_REG_CONV_SINGLE
  *         @arg @ref LL_ADC_REG_CONV_CONTINUOUS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetContinuousMode(ADC_TypeDef *ADCx, uint32_t Continuous)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_CONT, Continuous);
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	68db      	ldr	r3, [r3, #12]
 8000226:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	431a      	orrs	r2, r3
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	60da      	str	r2, [r3, #12]
}
 8000232:	bf00      	nop
 8000234:	370c      	adds	r7, #12
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr

0800023e <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800023e:	b480      	push	{r7}
 8000240:	b083      	sub	sp, #12
 8000242:	af00      	add	r7, sp, #0
 8000244:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	689b      	ldr	r3, [r3, #8]
 800024a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800024e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000252:	f043 0201 	orr.w	r2, r3, #1
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800025a:	bf00      	nop
 800025c:	370c      	adds	r7, #12
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr

08000266 <LL_ADC_StartCalibration>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{
 8000266:	b480      	push	{r7}
 8000268:	b083      	sub	sp, #12
 800026a:	af00      	add	r7, sp, #0
 800026c:	6078      	str	r0, [r7, #4]
 800026e:	6039      	str	r1, [r7, #0]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	689b      	ldr	r3, [r3, #8]
 8000274:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000278:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800027c:	683a      	ldr	r2, [r7, #0]
 800027e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8000282:	4313      	orrs	r3, r2
 8000284:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	609a      	str	r2, [r3, #8]
             ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL | (SingleDiff & ADC_SINGLEDIFF_CALIB_START_MASK));
}
 800028c:	bf00      	nop
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr

08000298 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	689b      	ldr	r3, [r3, #8]
 80002a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80002a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80002ac:	d101      	bne.n	80002b2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80002ae:	2301      	movs	r3, #1
 80002b0:	e000      	b.n	80002b4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80002b2:	2300      	movs	r3, #0
}
 80002b4:	4618      	mov	r0, r3
 80002b6:	370c      	adds	r7, #12
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr

080002c0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	689b      	ldr	r3, [r3, #8]
 80002cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80002d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80002d4:	f043 0204 	orr.w	r2, r3, #4
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80002dc:	bf00      	nop
 80002de:	370c      	adds	r7, #12
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr

080002e8 <adc_init>:
#define ADC_POT2 ADC2


//Analog-to-digital converter initialization
void adc_init()
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	LL_ADC_StartCalibration(ADC_POT1, LL_ADC_SINGLE_ENDED);
 80002ec:	217f      	movs	r1, #127	; 0x7f
 80002ee:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80002f2:	f7ff ffb8 	bl	8000266 <LL_ADC_StartCalibration>
	LL_ADC_StartCalibration(ADC_POT2, LL_ADC_SINGLE_ENDED);
 80002f6:	217f      	movs	r1, #127	; 0x7f
 80002f8:	4817      	ldr	r0, [pc, #92]	; (8000358 <adc_init+0x70>)
 80002fa:	f7ff ffb4 	bl	8000266 <LL_ADC_StartCalibration>

	while(LL_ADC_IsCalibrationOnGoing(ADC_POT1));
 80002fe:	bf00      	nop
 8000300:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000304:	f7ff ffc8 	bl	8000298 <LL_ADC_IsCalibrationOnGoing>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d1f8      	bne.n	8000300 <adc_init+0x18>
	while(LL_ADC_IsCalibrationOnGoing(ADC_POT2));
 800030e:	bf00      	nop
 8000310:	4811      	ldr	r0, [pc, #68]	; (8000358 <adc_init+0x70>)
 8000312:	f7ff ffc1 	bl	8000298 <LL_ADC_IsCalibrationOnGoing>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d1f9      	bne.n	8000310 <adc_init+0x28>

	HAL_Delay(100);
 800031c:	2064      	movs	r0, #100	; 0x64
 800031e:	f001 f8d7 	bl	80014d0 <HAL_Delay>

	LL_ADC_Enable(ADC_POT1);
 8000322:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000326:	f7ff ff8a 	bl	800023e <LL_ADC_Enable>
	LL_ADC_Enable(ADC_POT2);
 800032a:	480b      	ldr	r0, [pc, #44]	; (8000358 <adc_init+0x70>)
 800032c:	f7ff ff87 	bl	800023e <LL_ADC_Enable>

	LL_ADC_REG_SetContinuousMode(ADC_POT1, LL_ADC_REG_CONV_CONTINUOUS);
 8000330:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000334:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000338:	f7ff ff6e 	bl	8000218 <LL_ADC_REG_SetContinuousMode>
	LL_ADC_REG_SetContinuousMode(ADC_POT2, LL_ADC_REG_CONV_CONTINUOUS);
 800033c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000340:	4805      	ldr	r0, [pc, #20]	; (8000358 <adc_init+0x70>)
 8000342:	f7ff ff69 	bl	8000218 <LL_ADC_REG_SetContinuousMode>

	LL_ADC_REG_StartConversion (ADC_POT1);
 8000346:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800034a:	f7ff ffb9 	bl	80002c0 <LL_ADC_REG_StartConversion>
	LL_ADC_REG_StartConversion (ADC_POT2);
 800034e:	4802      	ldr	r0, [pc, #8]	; (8000358 <adc_init+0x70>)
 8000350:	f7ff ffb6 	bl	80002c0 <LL_ADC_REG_StartConversion>
}
 8000354:	bf00      	nop
 8000356:	bd80      	pop	{r7, pc}
 8000358:	50000100 	.word	0x50000100

0800035c <normalisef>:
#include <commons.h>


//Helper function for capping minimal and maximal value of float type variable
float normalisef(float a, float min, float max)
{
 800035c:	b480      	push	{r7}
 800035e:	b085      	sub	sp, #20
 8000360:	af00      	add	r7, sp, #0
 8000362:	ed87 0a03 	vstr	s0, [r7, #12]
 8000366:	edc7 0a02 	vstr	s1, [r7, #8]
 800036a:	ed87 1a01 	vstr	s2, [r7, #4]
	if(a <= min) return min;
 800036e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000372:	edd7 7a02 	vldr	s15, [r7, #8]
 8000376:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800037a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800037e:	d801      	bhi.n	8000384 <normalisef+0x28>
 8000380:	68bb      	ldr	r3, [r7, #8]
 8000382:	e00b      	b.n	800039c <normalisef+0x40>
	else if(a >= max) return max;
 8000384:	ed97 7a03 	vldr	s14, [r7, #12]
 8000388:	edd7 7a01 	vldr	s15, [r7, #4]
 800038c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000394:	db01      	blt.n	800039a <normalisef+0x3e>
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	e000      	b.n	800039c <normalisef+0x40>
	else return a;
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	ee07 3a90 	vmov	s15, r3
}
 80003a0:	eeb0 0a67 	vmov.f32	s0, s15
 80003a4:	3714      	adds	r7, #20
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
	...

080003b0 <encoder_measureVelocity>:
	LL_EXTI_EnableIT_0_31 (ENC_EXTI);
}

//measures velocity in rad/s
void encoder_measureVelocity()
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
	uint32_t time = timers_getVelocityTimer();
 80003b6:	f000 ffdf 	bl	8001378 <timers_getVelocityTimer>
 80003ba:	6078      	str	r0, [r7, #4]
	timers_resetVeloctiyTimer();
 80003bc:	f000 ffe5 	bl	800138a <timers_resetVeloctiyTimer>
	currentVelocity = (float)time;
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	ee07 3a90 	vmov	s15, r3
 80003c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80003ca:	4b0a      	ldr	r3, [pc, #40]	; (80003f4 <encoder_measureVelocity+0x44>)
 80003cc:	edc3 7a00 	vstr	s15, [r3]
	currentVelocity = PULSE_NUMBER * PIx2 / (currentVelocity * TIMER_FREQUENCY);
 80003d0:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <encoder_measureVelocity+0x44>)
 80003d2:	edd3 7a00 	vldr	s15, [r3]
 80003d6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80003f8 <encoder_measureVelocity+0x48>
 80003da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80003de:	eddf 6a07 	vldr	s13, [pc, #28]	; 80003fc <encoder_measureVelocity+0x4c>
 80003e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80003e6:	4b03      	ldr	r3, [pc, #12]	; (80003f4 <encoder_measureVelocity+0x44>)
 80003e8:	edc3 7a00 	vstr	s15, [r3]
}
 80003ec:	bf00      	nop
 80003ee:	3708      	adds	r7, #8
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	20000028 	.word	0x20000028
 80003f8:	47c35000 	.word	0x47c35000
 80003fc:	4316cbe4 	.word	0x4316cbe4

08000400 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000404:	4b04      	ldr	r3, [pc, #16]	; (8000418 <__NVIC_GetPriorityGrouping+0x18>)
 8000406:	68db      	ldr	r3, [r3, #12]
 8000408:	0a1b      	lsrs	r3, r3, #8
 800040a:	f003 0307 	and.w	r3, r3, #7
}
 800040e:	4618      	mov	r0, r3
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr
 8000418:	e000ed00 	.word	0xe000ed00

0800041c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	4603      	mov	r3, r0
 8000424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800042a:	2b00      	cmp	r3, #0
 800042c:	db0b      	blt.n	8000446 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800042e:	79fb      	ldrb	r3, [r7, #7]
 8000430:	f003 021f 	and.w	r2, r3, #31
 8000434:	4907      	ldr	r1, [pc, #28]	; (8000454 <__NVIC_EnableIRQ+0x38>)
 8000436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800043a:	095b      	lsrs	r3, r3, #5
 800043c:	2001      	movs	r0, #1
 800043e:	fa00 f202 	lsl.w	r2, r0, r2
 8000442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000446:	bf00      	nop
 8000448:	370c      	adds	r7, #12
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	e000e100 	.word	0xe000e100

08000458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	4603      	mov	r3, r0
 8000460:	6039      	str	r1, [r7, #0]
 8000462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000468:	2b00      	cmp	r3, #0
 800046a:	db0a      	blt.n	8000482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	b2da      	uxtb	r2, r3
 8000470:	490c      	ldr	r1, [pc, #48]	; (80004a4 <__NVIC_SetPriority+0x4c>)
 8000472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000476:	0112      	lsls	r2, r2, #4
 8000478:	b2d2      	uxtb	r2, r2
 800047a:	440b      	add	r3, r1
 800047c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000480:	e00a      	b.n	8000498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	b2da      	uxtb	r2, r3
 8000486:	4908      	ldr	r1, [pc, #32]	; (80004a8 <__NVIC_SetPriority+0x50>)
 8000488:	79fb      	ldrb	r3, [r7, #7]
 800048a:	f003 030f 	and.w	r3, r3, #15
 800048e:	3b04      	subs	r3, #4
 8000490:	0112      	lsls	r2, r2, #4
 8000492:	b2d2      	uxtb	r2, r2
 8000494:	440b      	add	r3, r1
 8000496:	761a      	strb	r2, [r3, #24]
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	e000e100 	.word	0xe000e100
 80004a8:	e000ed00 	.word	0xe000ed00

080004ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b089      	sub	sp, #36	; 0x24
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	60f8      	str	r0, [r7, #12]
 80004b4:	60b9      	str	r1, [r7, #8]
 80004b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	f003 0307 	and.w	r3, r3, #7
 80004be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80004c0:	69fb      	ldr	r3, [r7, #28]
 80004c2:	f1c3 0307 	rsb	r3, r3, #7
 80004c6:	2b04      	cmp	r3, #4
 80004c8:	bf28      	it	cs
 80004ca:	2304      	movcs	r3, #4
 80004cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004ce:	69fb      	ldr	r3, [r7, #28]
 80004d0:	3304      	adds	r3, #4
 80004d2:	2b06      	cmp	r3, #6
 80004d4:	d902      	bls.n	80004dc <NVIC_EncodePriority+0x30>
 80004d6:	69fb      	ldr	r3, [r7, #28]
 80004d8:	3b03      	subs	r3, #3
 80004da:	e000      	b.n	80004de <NVIC_EncodePriority+0x32>
 80004dc:	2300      	movs	r3, #0
 80004de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004e0:	f04f 32ff 	mov.w	r2, #4294967295
 80004e4:	69bb      	ldr	r3, [r7, #24]
 80004e6:	fa02 f303 	lsl.w	r3, r2, r3
 80004ea:	43da      	mvns	r2, r3
 80004ec:	68bb      	ldr	r3, [r7, #8]
 80004ee:	401a      	ands	r2, r3
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80004f4:	f04f 31ff 	mov.w	r1, #4294967295
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	fa01 f303 	lsl.w	r3, r1, r3
 80004fe:	43d9      	mvns	r1, r3
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000504:	4313      	orrs	r3, r2
         );
}
 8000506:	4618      	mov	r0, r3
 8000508:	3724      	adds	r7, #36	; 0x24
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr

08000512 <LL_ADC_SetGainCompensation>:
{
 8000512:	b480      	push	{r7}
 8000514:	b083      	sub	sp, #12
 8000516:	af00      	add	r7, sp, #0
 8000518:	6078      	str	r0, [r7, #4]
 800051a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000522:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000526:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800052a:	683a      	ldr	r2, [r7, #0]
 800052c:	431a      	orrs	r2, r3
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_CFGR2_GCOMP_Pos);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	691b      	ldr	r3, [r3, #16]
 8000538:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800053c:	683a      	ldr	r2, [r7, #0]
 800053e:	2a00      	cmp	r2, #0
 8000540:	d002      	beq.n	8000548 <LL_ADC_SetGainCompensation+0x36>
 8000542:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000546:	e000      	b.n	800054a <LL_ADC_SetGainCompensation+0x38>
 8000548:	2200      	movs	r2, #0
 800054a:	431a      	orrs	r2, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	611a      	str	r2, [r3, #16]
}
 8000550:	bf00      	nop
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <LL_ADC_REG_SetSequencerRanks>:
{
 800055c:	b480      	push	{r7}
 800055e:	b087      	sub	sp, #28
 8000560:	af00      	add	r7, sp, #0
 8000562:	60f8      	str	r0, [r7, #12]
 8000564:	60b9      	str	r1, [r7, #8]
 8000566:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	3330      	adds	r3, #48	; 0x30
 800056c:	461a      	mov	r2, r3
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	0a1b      	lsrs	r3, r3, #8
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	f003 030c 	and.w	r3, r3, #12
 8000578:	4413      	add	r3, r2
 800057a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	681a      	ldr	r2, [r3, #0]
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	f003 031f 	and.w	r3, r3, #31
 8000586:	211f      	movs	r1, #31
 8000588:	fa01 f303 	lsl.w	r3, r1, r3
 800058c:	43db      	mvns	r3, r3
 800058e:	401a      	ands	r2, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	0e9b      	lsrs	r3, r3, #26
 8000594:	f003 011f 	and.w	r1, r3, #31
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	f003 031f 	and.w	r3, r3, #31
 800059e:	fa01 f303 	lsl.w	r3, r1, r3
 80005a2:	431a      	orrs	r2, r3
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	601a      	str	r2, [r3, #0]
}
 80005a8:	bf00      	nop
 80005aa:	371c      	adds	r7, #28
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr

080005b4 <LL_ADC_SetChannelSamplingTime>:
{
 80005b4:	b480      	push	{r7}
 80005b6:	b087      	sub	sp, #28
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	3314      	adds	r3, #20
 80005c4:	461a      	mov	r2, r3
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	0e5b      	lsrs	r3, r3, #25
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	f003 0304 	and.w	r3, r3, #4
 80005d0:	4413      	add	r3, r2
 80005d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	0d1b      	lsrs	r3, r3, #20
 80005dc:	f003 031f 	and.w	r3, r3, #31
 80005e0:	2107      	movs	r1, #7
 80005e2:	fa01 f303 	lsl.w	r3, r1, r3
 80005e6:	43db      	mvns	r3, r3
 80005e8:	401a      	ands	r2, r3
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	0d1b      	lsrs	r3, r3, #20
 80005ee:	f003 031f 	and.w	r3, r3, #31
 80005f2:	6879      	ldr	r1, [r7, #4]
 80005f4:	fa01 f303 	lsl.w	r3, r1, r3
 80005f8:	431a      	orrs	r2, r3
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	601a      	str	r2, [r3, #0]
}
 80005fe:	bf00      	nop
 8000600:	371c      	adds	r7, #28
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
	...

0800060c <LL_ADC_SetChannelSingleDiff>:
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a0f      	ldr	r2, [pc, #60]	; (8000658 <LL_ADC_SetChannelSingleDiff+0x4c>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d10a      	bne.n	8000636 <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800062c:	431a      	orrs	r2, r3
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8000634:	e00a      	b.n	800064c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000642:	43db      	mvns	r3, r3
 8000644:	401a      	ands	r2, r3
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800064c:	bf00      	nop
 800064e:	3714      	adds	r7, #20
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	407f0000 	.word	0x407f0000

0800065c <LL_ADC_SetOverSamplingScope>:
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	691b      	ldr	r3, [r3, #16]
 800066a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800066e:	f023 0303 	bic.w	r3, r3, #3
 8000672:	683a      	ldr	r2, [r7, #0]
 8000674:	431a      	orrs	r2, r3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	611a      	str	r2, [r3, #16]
}
 800067a:	bf00      	nop
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr

08000686 <LL_ADC_DisableDeepPowerDown>:
{
 8000686:	b480      	push	{r7}
 8000688:	b083      	sub	sp, #12
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	689b      	ldr	r3, [r3, #8]
 8000692:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000696:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	6093      	str	r3, [r2, #8]
}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr

080006aa <LL_ADC_EnableInternalRegulator>:
{
 80006aa:	b480      	push	{r7}
 80006ac:	b083      	sub	sp, #12
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	689b      	ldr	r3, [r3, #8]
 80006b6:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80006ba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80006be:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	609a      	str	r2, [r3, #8]
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 80006d2:	b480      	push	{r7}
 80006d4:	b083      	sub	sp, #12
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	601a      	str	r2, [r3, #0]
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80006f2:	b480      	push	{r7}
 80006f4:	b083      	sub	sp, #12
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
 80006fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8000704:	f023 0307 	bic.w	r3, r3, #7
 8000708:	683a      	ldr	r2, [r7, #0]
 800070a:	431a      	orrs	r2, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	609a      	str	r2, [r3, #8]
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr

0800071c <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC4REF
  *         @arg @ref LL_TIM_TRGO_ENCODERCLK
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800072e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000732:	683a      	ldr	r2, [r7, #0]
 8000734:	431a      	orrs	r2, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	605a      	str	r2, [r3, #4]
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr

08000746 <LL_TIM_SetTriggerOutput2>:
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_RISING
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
 8000746:	b480      	push	{r7}
 8000748:	b083      	sub	sp, #12
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
 800074e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	431a      	orrs	r2, r3
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	605a      	str	r2, [r3, #4]
}
 8000760:	bf00      	nop
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr

0800076c <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	689b      	ldr	r3, [r3, #8]
 8000778:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	609a      	str	r2, [r3, #8]
}
 8000780:	bf00      	nop
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800078c:	b480      	push	{r7}
 800078e:	b087      	sub	sp, #28
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8000796:	4a18      	ldr	r2, [pc, #96]	; (80007f8 <LL_SYSCFG_SetEXTISource+0x6c>)
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	f003 0303 	and.w	r3, r3, #3
 800079e:	3302      	adds	r3, #2
 80007a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	0c1b      	lsrs	r3, r3, #16
 80007a8:	43db      	mvns	r3, r3
 80007aa:	ea02 0103 	and.w	r1, r2, r3
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	0c1b      	lsrs	r3, r3, #16
 80007b2:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007b4:	693b      	ldr	r3, [r7, #16]
 80007b6:	fa93 f3a3 	rbit	r3, r3
 80007ba:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d101      	bne.n	80007ca <LL_SYSCFG_SetEXTISource+0x3e>
  {
    return 32U;
 80007c6:	2320      	movs	r3, #32
 80007c8:	e003      	b.n	80007d2 <LL_SYSCFG_SetEXTISource+0x46>
  }
  return __builtin_clz(value);
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	fab3 f383 	clz	r3, r3
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	f003 031f 	and.w	r3, r3, #31
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	409a      	lsls	r2, r3
 80007da:	4807      	ldr	r0, [pc, #28]	; (80007f8 <LL_SYSCFG_SetEXTISource+0x6c>)
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	f003 0303 	and.w	r3, r3, #3
 80007e2:	430a      	orrs	r2, r1
 80007e4:	3302      	adds	r3, #2
 80007e6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80007ea:	bf00      	nop
 80007ec:	371c      	adds	r7, #28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	40010000 	.word	0x40010000

080007fc <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b08b      	sub	sp, #44	; 0x2c
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	fa93 f3a3 	rbit	r3, r3
 8000816:	613b      	str	r3, [r7, #16]
  return result;
 8000818:	693b      	ldr	r3, [r7, #16]
 800081a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800081c:	69bb      	ldr	r3, [r7, #24]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d101      	bne.n	8000826 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000822:	2320      	movs	r3, #32
 8000824:	e003      	b.n	800082e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000826:	69bb      	ldr	r3, [r7, #24]
 8000828:	fab3 f383 	clz	r3, r3
 800082c:	b2db      	uxtb	r3, r3
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	2103      	movs	r1, #3
 8000832:	fa01 f303 	lsl.w	r3, r1, r3
 8000836:	43db      	mvns	r3, r3
 8000838:	401a      	ands	r2, r3
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800083e:	6a3b      	ldr	r3, [r7, #32]
 8000840:	fa93 f3a3 	rbit	r3, r3
 8000844:	61fb      	str	r3, [r7, #28]
  return result;
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800084a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084c:	2b00      	cmp	r3, #0
 800084e:	d101      	bne.n	8000854 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000850:	2320      	movs	r3, #32
 8000852:	e003      	b.n	800085c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000856:	fab3 f383 	clz	r3, r3
 800085a:	b2db      	uxtb	r3, r3
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	6879      	ldr	r1, [r7, #4]
 8000860:	fa01 f303 	lsl.w	r3, r1, r3
 8000864:	431a      	orrs	r2, r3
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	601a      	str	r2, [r3, #0]
}
 800086a:	bf00      	nop
 800086c:	372c      	adds	r7, #44	; 0x2c
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000876:	b480      	push	{r7}
 8000878:	b08b      	sub	sp, #44	; 0x2c
 800087a:	af00      	add	r7, sp, #0
 800087c:	60f8      	str	r0, [r7, #12]
 800087e:	60b9      	str	r1, [r7, #8]
 8000880:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	68da      	ldr	r2, [r3, #12]
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	fa93 f3a3 	rbit	r3, r3
 8000890:	613b      	str	r3, [r7, #16]
  return result;
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000896:	69bb      	ldr	r3, [r7, #24]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d101      	bne.n	80008a0 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800089c:	2320      	movs	r3, #32
 800089e:	e003      	b.n	80008a8 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	fab3 f383 	clz	r3, r3
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	2103      	movs	r1, #3
 80008ac:	fa01 f303 	lsl.w	r3, r1, r3
 80008b0:	43db      	mvns	r3, r3
 80008b2:	401a      	ands	r2, r3
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008b8:	6a3b      	ldr	r3, [r7, #32]
 80008ba:	fa93 f3a3 	rbit	r3, r3
 80008be:	61fb      	str	r3, [r7, #28]
  return result;
 80008c0:	69fb      	ldr	r3, [r7, #28]
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80008c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d101      	bne.n	80008ce <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80008ca:	2320      	movs	r3, #32
 80008cc:	e003      	b.n	80008d6 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80008ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d0:	fab3 f383 	clz	r3, r3
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	6879      	ldr	r1, [r7, #4]
 80008da:	fa01 f303 	lsl.w	r3, r1, r3
 80008de:	431a      	orrs	r2, r3
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	60da      	str	r2, [r3, #12]
}
 80008e4:	bf00      	nop
 80008e6:	372c      	adds	r7, #44	; 0x2c
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	683a      	ldr	r2, [r7, #0]
 80008fe:	619a      	str	r2, [r3, #24]
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000916:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000918:	4907      	ldr	r1, [pc, #28]	; (8000938 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4313      	orrs	r3, r2
 800091e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000922:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4013      	ands	r3, r2
 8000928:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800092a:	68fb      	ldr	r3, [r7, #12]
}
 800092c:	bf00      	nop
 800092e:	3714      	adds	r7, #20
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	40021000 	.word	0x40021000

0800093c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000944:	4b08      	ldr	r3, [pc, #32]	; (8000968 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000946:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000948:	4907      	ldr	r1, [pc, #28]	; (8000968 <LL_APB1_GRP1_EnableClock+0x2c>)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4313      	orrs	r3, r2
 800094e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000950:	4b05      	ldr	r3, [pc, #20]	; (8000968 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000952:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4013      	ands	r3, r2
 8000958:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800095a:	68fb      	ldr	r3, [r7, #12]
}
 800095c:	bf00      	nop
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	40021000 	.word	0x40021000

0800096c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000976:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000978:	4907      	ldr	r1, [pc, #28]	; (8000998 <LL_APB2_GRP1_EnableClock+0x2c>)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4313      	orrs	r3, r2
 800097e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000982:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4013      	ands	r3, r2
 8000988:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800098a:	68fb      	ldr	r3, [r7, #12]
}
 800098c:	bf00      	nop
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	40021000 	.word	0x40021000

0800099c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a0:	f000 fd25 	bl	80013ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a4:	f000 f81b 	bl	80009de <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a8:	f000 fabc 	bl	8000f24 <MX_GPIO_Init>
  MX_ADC1_Init();
 80009ac:	f000 f860 	bl	8000a70 <MX_ADC1_Init>
  MX_ADC2_Init();
 80009b0:	f000 f928 	bl	8000c04 <MX_ADC2_Init>
  MX_TIM1_Init();
 80009b4:	f000 f9d2 	bl	8000d5c <MX_TIM1_Init>
  MX_TIM2_Init();
 80009b8:	f000 fa06 	bl	8000dc8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80009bc:	f000 fa38 	bl	8000e30 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  //Initialize timers
  adc_init();
 80009c0:	f7ff fc92 	bl	80002e8 <adc_init>
  timers_init();
 80009c4:	f000 fc86 	bl	80012d4 <timers_init>
  timers_enablePWM(1);
 80009c8:	2001      	movs	r0, #1
 80009ca:	f000 fc9d 	bl	8001308 <timers_enablePWM>
//		//anti wind up
//		 integral = normalisef(integral,  0.0f, max_integral);
//
//		 derivative = error - last_error;
//		 fPWM = (kp*error) + (ki * integral) + (kd * derivative);
	  	  timers_enablePWM(1);
 80009ce:	2001      	movs	r0, #1
 80009d0:	f000 fc9a 	bl	8001308 <timers_enablePWM>
		 timers_setPWM(0.5f/*adc_pot_return(potenciometer_1)*/);
 80009d4:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80009d8:	f000 fca4 	bl	8001324 <timers_setPWM>
	  	  timers_enablePWM(1);
 80009dc:	e7f7      	b.n	80009ce <main+0x32>

080009de <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b094      	sub	sp, #80	; 0x50
 80009e2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e4:	f107 0318 	add.w	r3, r7, #24
 80009e8:	2238      	movs	r2, #56	; 0x38
 80009ea:	2100      	movs	r1, #0
 80009ec:	4618      	mov	r0, r3
 80009ee:	f003 fc9d 	bl	800432c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000a00:	2000      	movs	r0, #0
 8000a02:	f000 ffed 	bl	80019e0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a06:	2301      	movs	r3, #1
 8000a08:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a10:	2302      	movs	r3, #2
 8000a12:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a14:	2303      	movs	r3, #3
 8000a16:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000a1c:	2314      	movs	r3, #20
 8000a1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a20:	2302      	movs	r3, #2
 8000a22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a24:	2302      	movs	r3, #2
 8000a26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a2c:	f107 0318 	add.w	r3, r7, #24
 8000a30:	4618      	mov	r0, r3
 8000a32:	f001 f889 	bl	8001b48 <HAL_RCC_OscConfig>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000a3c:	f000 fb15 	bl	800106a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a40:	230f      	movs	r3, #15
 8000a42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a44:	2303      	movs	r3, #3
 8000a46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	2104      	movs	r1, #4
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f001 fb8d 	bl	8002178 <HAL_RCC_ClockConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000a64:	f000 fb01 	bl	800106a <Error_Handler>
  }
}
 8000a68:	bf00      	nop
 8000a6a:	3750      	adds	r7, #80	; 0x50
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b0a6      	sub	sp, #152	; 0x98
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000a76:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000a82:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]
 8000a92:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000a94:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]
 8000ab2:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2244      	movs	r2, #68	; 0x44
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f003 fc36 	bl	800432c <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000ac0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ac4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000ac6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000aca:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f001 fd32 	bl	8002538 <HAL_RCCEx_PeriphCLKConfig>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ada:	f000 fac6 	bl	800106a <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC12);
 8000ade:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ae2:	f7ff ff13 	bl	800090c <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	f7ff ff10 	bl	800090c <LL_AHB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA0   ------> ADC1_IN1
  */
  GPIO_InitStruct.Pin = POT_1_Pin;
 8000aec:	2301      	movs	r3, #1
 8000aee:	64bb      	str	r3, [r7, #72]	; 0x48
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000af0:	2303      	movs	r3, #3
 8000af2:	64fb      	str	r3, [r7, #76]	; 0x4c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000af4:	2300      	movs	r3, #0
 8000af6:	65bb      	str	r3, [r7, #88]	; 0x58
  LL_GPIO_Init(POT_1_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000afc:	4619      	mov	r1, r3
 8000afe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b02:	f003 fabd 	bl	8004080 <LL_GPIO_Init>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000b06:	2300      	movs	r3, #0
 8000b08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000b12:	2300      	movs	r3, #0
 8000b14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000b18:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000b22:	f002 fec9 	bl	80038b8 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000b26:	2300      	movs	r3, #0
 8000b28:	673b      	str	r3, [r7, #112]	; 0x70
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	677b      	str	r3, [r7, #116]	; 0x74
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	67bb      	str	r3, [r7, #120]	; 0x78
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8000b32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b36:	67fb      	str	r3, [r7, #124]	; 0x7c
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000b44:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000b4e:	f002 fed9 	bl	8003904 <LL_ADC_REG_Init>
  LL_ADC_SetGainCompensation(ADC1, 0);
 8000b52:	2100      	movs	r1, #0
 8000b54:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000b58:	f7ff fcdb 	bl	8000512 <LL_ADC_SetGainCompensation>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000b62:	f7ff fd7b 	bl	800065c <LL_ADC_SetOverSamplingScope>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b66:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000b6a:	663b      	str	r3, [r7, #96]	; 0x60
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	667b      	str	r3, [r7, #100]	; 0x64
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000b70:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000b74:	4619      	mov	r1, r3
 8000b76:	481e      	ldr	r0, [pc, #120]	; (8000bf0 <MX_ADC1_Init+0x180>)
 8000b78:	f002 fe5e 	bl	8003838 <LL_ADC_CommonInit>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 8000b7c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000b80:	f7ff fd81 	bl	8000686 <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8000b84:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000b88:	f7ff fd8f 	bl	80006aa <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000b8c:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <MX_ADC1_Init+0x184>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	099b      	lsrs	r3, r3, #6
 8000b92:	4a19      	ldr	r2, [pc, #100]	; (8000bf8 <MX_ADC1_Init+0x188>)
 8000b94:	fba2 2303 	umull	r2, r3, r2, r3
 8000b98:	099a      	lsrs	r2, r3, #6
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	4413      	add	r3, r2
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <MX_ADC1_Init+0x18c>)
 8000ba6:	fba3 2302 	umull	r2, r3, r3, r2
 8000baa:	08db      	lsrs	r3, r3, #3
 8000bac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  while(wait_loop_index != 0)
 8000bb0:	e004      	b.n	8000bbc <MX_ADC1_Init+0x14c>
  {
    wait_loop_index--;
 8000bb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  while(wait_loop_index != 0)
 8000bbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d1f6      	bne.n	8000bb2 <MX_ADC1_Init+0x142>
  }
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8000bc4:	4a0e      	ldr	r2, [pc, #56]	; (8000c00 <MX_ADC1_Init+0x190>)
 8000bc6:	2106      	movs	r1, #6
 8000bc8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000bcc:	f7ff fcc6 	bl	800055c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_640CYCLES_5);
 8000bd0:	2207      	movs	r2, #7
 8000bd2:	490b      	ldr	r1, [pc, #44]	; (8000c00 <MX_ADC1_Init+0x190>)
 8000bd4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000bd8:	f7ff fcec 	bl	80005b4 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 8000bdc:	227f      	movs	r2, #127	; 0x7f
 8000bde:	4908      	ldr	r1, [pc, #32]	; (8000c00 <MX_ADC1_Init+0x190>)
 8000be0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000be4:	f7ff fd12 	bl	800060c <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000be8:	bf00      	nop
 8000bea:	3798      	adds	r7, #152	; 0x98
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	50000300 	.word	0x50000300
 8000bf4:	20000000 	.word	0x20000000
 8000bf8:	053e2d63 	.word	0x053e2d63
 8000bfc:	cccccccd 	.word	0xcccccccd
 8000c00:	04300002 	.word	0x04300002

08000c04 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b0a2      	sub	sp, #136	; 0x88
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000c0a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000c16:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
 8000c24:	611a      	str	r2, [r3, #16]
 8000c26:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
 8000c38:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	2244      	movs	r2, #68	; 0x44
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4618      	mov	r0, r3
 8000c42:	f003 fb73 	bl	800432c <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000c46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c4a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000c4c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000c50:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	4618      	mov	r0, r3
 8000c56:	f001 fc6f 	bl	8002538 <HAL_RCCEx_PeriphCLKConfig>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_ADC2_Init+0x60>
  {
    Error_Handler();
 8000c60:	f000 fa03 	bl	800106a <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC12);
 8000c64:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c68:	f7ff fe50 	bl	800090c <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f7ff fe4d 	bl	800090c <LL_AHB2_GRP1_EnableClock>
  /**ADC2 GPIO Configuration
  PA1   ------> ADC2_IN2
  */
  GPIO_InitStruct.Pin = POT_2_Pin;
 8000c72:	2302      	movs	r3, #2
 8000c74:	64bb      	str	r3, [r7, #72]	; 0x48
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000c76:	2303      	movs	r3, #3
 8000c78:	64fb      	str	r3, [r7, #76]	; 0x4c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	65bb      	str	r3, [r7, #88]	; 0x58
  LL_GPIO_Init(POT_2_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c82:	4619      	mov	r1, r3
 8000c84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c88:	f003 f9fa 	bl	8004080 <LL_GPIO_Init>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	67bb      	str	r3, [r7, #120]	; 0x78
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000c90:	2300      	movs	r3, #0
 8000c92:	67fb      	str	r3, [r7, #124]	; 0x7c
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8000c9a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4829      	ldr	r0, [pc, #164]	; (8000d48 <MX_ADC2_Init+0x144>)
 8000ca2:	f002 fe09 	bl	80038b8 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	663b      	str	r3, [r7, #96]	; 0x60
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000caa:	2300      	movs	r3, #0
 8000cac:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	66bb      	str	r3, [r7, #104]	; 0x68
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8000cb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cb6:	66fb      	str	r3, [r7, #108]	; 0x6c
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	673b      	str	r3, [r7, #112]	; 0x70
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	677b      	str	r3, [r7, #116]	; 0x74
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8000cc0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4820      	ldr	r0, [pc, #128]	; (8000d48 <MX_ADC2_Init+0x144>)
 8000cc8:	f002 fe1c 	bl	8003904 <LL_ADC_REG_Init>
  LL_ADC_SetGainCompensation(ADC2, 0);
 8000ccc:	2100      	movs	r1, #0
 8000cce:	481e      	ldr	r0, [pc, #120]	; (8000d48 <MX_ADC2_Init+0x144>)
 8000cd0:	f7ff fc1f 	bl	8000512 <LL_ADC_SetGainCompensation>
  LL_ADC_SetOverSamplingScope(ADC2, LL_ADC_OVS_DISABLE);
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	481c      	ldr	r0, [pc, #112]	; (8000d48 <MX_ADC2_Init+0x144>)
 8000cd8:	f7ff fcc0 	bl	800065c <LL_ADC_SetOverSamplingScope>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC2);
 8000cdc:	481a      	ldr	r0, [pc, #104]	; (8000d48 <MX_ADC2_Init+0x144>)
 8000cde:	f7ff fcd2 	bl	8000686 <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC2);
 8000ce2:	4819      	ldr	r0, [pc, #100]	; (8000d48 <MX_ADC2_Init+0x144>)
 8000ce4:	f7ff fce1 	bl	80006aa <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000ce8:	4b18      	ldr	r3, [pc, #96]	; (8000d4c <MX_ADC2_Init+0x148>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	099b      	lsrs	r3, r3, #6
 8000cee:	4a18      	ldr	r2, [pc, #96]	; (8000d50 <MX_ADC2_Init+0x14c>)
 8000cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf4:	099a      	lsrs	r2, r3, #6
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	4413      	add	r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	461a      	mov	r2, r3
 8000d00:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <MX_ADC2_Init+0x150>)
 8000d02:	fba3 2302 	umull	r2, r3, r3, r2
 8000d06:	08db      	lsrs	r3, r3, #3
 8000d08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  while(wait_loop_index != 0)
 8000d0c:	e004      	b.n	8000d18 <MX_ADC2_Init+0x114>
  {
    wait_loop_index--;
 8000d0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000d12:	3b01      	subs	r3, #1
 8000d14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  while(wait_loop_index != 0)
 8000d18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d1f6      	bne.n	8000d0e <MX_ADC2_Init+0x10a>
  }
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_2);
 8000d20:	4a0d      	ldr	r2, [pc, #52]	; (8000d58 <MX_ADC2_Init+0x154>)
 8000d22:	2106      	movs	r1, #6
 8000d24:	4808      	ldr	r0, [pc, #32]	; (8000d48 <MX_ADC2_Init+0x144>)
 8000d26:	f7ff fc19 	bl	800055c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_640CYCLES_5);
 8000d2a:	2207      	movs	r2, #7
 8000d2c:	490a      	ldr	r1, [pc, #40]	; (8000d58 <MX_ADC2_Init+0x154>)
 8000d2e:	4806      	ldr	r0, [pc, #24]	; (8000d48 <MX_ADC2_Init+0x144>)
 8000d30:	f7ff fc40 	bl	80005b4 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_2, LL_ADC_SINGLE_ENDED);
 8000d34:	227f      	movs	r2, #127	; 0x7f
 8000d36:	4908      	ldr	r1, [pc, #32]	; (8000d58 <MX_ADC2_Init+0x154>)
 8000d38:	4803      	ldr	r0, [pc, #12]	; (8000d48 <MX_ADC2_Init+0x144>)
 8000d3a:	f7ff fc67 	bl	800060c <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	3788      	adds	r7, #136	; 0x88
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	50000100 	.word	0x50000100
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	053e2d63 	.word	0x053e2d63
 8000d54:	cccccccd 	.word	0xcccccccd
 8000d58:	08600004 	.word	0x08600004

08000d5c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8000d70:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000d74:	f7ff fdfa 	bl	800096c <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 8000;
 8000d80:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8000d84:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	4619      	mov	r1, r3
 8000d92:	480c      	ldr	r0, [pc, #48]	; (8000dc4 <MX_TIM1_Init+0x68>)
 8000d94:	f003 fa1c 	bl	80041d0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8000d98:	480a      	ldr	r0, [pc, #40]	; (8000dc4 <MX_TIM1_Init+0x68>)
 8000d9a:	f7ff fc9a 	bl	80006d2 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4808      	ldr	r0, [pc, #32]	; (8000dc4 <MX_TIM1_Init+0x68>)
 8000da2:	f7ff fca6 	bl	80006f2 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8000da6:	2100      	movs	r1, #0
 8000da8:	4806      	ldr	r0, [pc, #24]	; (8000dc4 <MX_TIM1_Init+0x68>)
 8000daa:	f7ff fcb7 	bl	800071c <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 8000dae:	2100      	movs	r1, #0
 8000db0:	4804      	ldr	r0, [pc, #16]	; (8000dc4 <MX_TIM1_Init+0x68>)
 8000db2:	f7ff fcc8 	bl	8000746 <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8000db6:	4803      	ldr	r0, [pc, #12]	; (8000dc4 <MX_TIM1_Init+0x68>)
 8000db8:	f7ff fcd8 	bl	800076c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000dbc:	bf00      	nop
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40012c00 	.word	0x40012c00

08000dc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000ddc:	2001      	movs	r0, #1
 8000dde:	f7ff fdad 	bl	800093c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 1599;
 8000de2:	f240 633f 	movw	r3, #1599	; 0x63f
 8000de6:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 1.0E8;
 8000dec:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <MX_TIM2_Init+0x64>)
 8000dee:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000df0:	2300      	movs	r3, #0
 8000df2:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	4619      	mov	r1, r3
 8000df8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000dfc:	f003 f9e8 	bl	80041d0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8000e00:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e04:	f7ff fc65 	bl	80006d2 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000e08:	2100      	movs	r1, #0
 8000e0a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e0e:	f7ff fc70 	bl	80006f2 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8000e12:	2100      	movs	r1, #0
 8000e14:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e18:	f7ff fc80 	bl	800071c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8000e1c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e20:	f7ff fca4 	bl	800076c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	05f5e100 	.word	0x05f5e100

08000e30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08e      	sub	sp, #56	; 0x38
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e44:	f107 031c 	add.w	r3, r7, #28
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e50:	463b      	mov	r3, r7
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
 8000e5c:	611a      	str	r2, [r3, #16]
 8000e5e:	615a      	str	r2, [r3, #20]
 8000e60:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e62:	4b2e      	ldr	r3, [pc, #184]	; (8000f1c <MX_TIM3_Init+0xec>)
 8000e64:	4a2e      	ldr	r2, [pc, #184]	; (8000f20 <MX_TIM3_Init+0xf0>)
 8000e66:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1599;
 8000e68:	4b2c      	ldr	r3, [pc, #176]	; (8000f1c <MX_TIM3_Init+0xec>)
 8000e6a:	f240 623f 	movw	r2, #1599	; 0x63f
 8000e6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e70:	4b2a      	ldr	r3, [pc, #168]	; (8000f1c <MX_TIM3_Init+0xec>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e76:	4b29      	ldr	r3, [pc, #164]	; (8000f1c <MX_TIM3_Init+0xec>)
 8000e78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000e7e:	4b27      	ldr	r3, [pc, #156]	; (8000f1c <MX_TIM3_Init+0xec>)
 8000e80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e84:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e86:	4b25      	ldr	r3, [pc, #148]	; (8000f1c <MX_TIM3_Init+0xec>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e8c:	4823      	ldr	r0, [pc, #140]	; (8000f1c <MX_TIM3_Init+0xec>)
 8000e8e:	f001 fd43 	bl	8002918 <HAL_TIM_Base_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8000e98:	f000 f8e7 	bl	800106a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ea2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	481c      	ldr	r0, [pc, #112]	; (8000f1c <MX_TIM3_Init+0xec>)
 8000eaa:	f001 ff01 	bl	8002cb0 <HAL_TIM_ConfigClockSource>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000eb4:	f000 f8d9 	bl	800106a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000eb8:	4818      	ldr	r0, [pc, #96]	; (8000f1c <MX_TIM3_Init+0xec>)
 8000eba:	f001 fd84 	bl	80029c6 <HAL_TIM_PWM_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000ec4:	f000 f8d1 	bl	800106a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ed0:	f107 031c 	add.w	r3, r7, #28
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4811      	ldr	r0, [pc, #68]	; (8000f1c <MX_TIM3_Init+0xec>)
 8000ed8:	f002 fc06 	bl	80036e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8000ee2:	f000 f8c2 	bl	800106a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ee6:	2360      	movs	r3, #96	; 0x60
 8000ee8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	2200      	movs	r2, #0
 8000efa:	4619      	mov	r1, r3
 8000efc:	4807      	ldr	r0, [pc, #28]	; (8000f1c <MX_TIM3_Init+0xec>)
 8000efe:	f001 fdc3 	bl	8002a88 <HAL_TIM_PWM_ConfigChannel>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8000f08:	f000 f8af 	bl	800106a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f0c:	4803      	ldr	r0, [pc, #12]	; (8000f1c <MX_TIM3_Init+0xec>)
 8000f0e:	f000 f8f5 	bl	80010fc <HAL_TIM_MspPostInit>

}
 8000f12:	bf00      	nop
 8000f14:	3738      	adds	r7, #56	; 0x38
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	2000002c 	.word	0x2000002c
 8000f20:	40000400 	.word	0x40000400

08000f24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08a      	sub	sp, #40	; 0x28
 8000f28:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000f2a:	f107 031c 	add.w	r3, r7, #28
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
 8000f44:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8000f46:	2020      	movs	r0, #32
 8000f48:	f7ff fce0 	bl	800090c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f7ff fcdd 	bl	800090c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000f52:	2002      	movs	r0, #2
 8000f54:	f7ff fcda 	bl	800090c <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8000f58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f60:	f7ff fcc6 	bl	80008f0 <LL_GPIO_SetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE2);
 8000f64:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f7ff fc0f 	bl	800078c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE3);
 8000f6e:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 8000f72:	2000      	movs	r0, #0
 8000f74:	f7ff fc0a 	bl	800078c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8000f78:	2304      	movs	r3, #4
 8000f7a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000f82:	2300      	movs	r3, #0
 8000f84:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000f8e:	f107 031c 	add.w	r3, r7, #28
 8000f92:	4618      	mov	r0, r3
 8000f94:	f002 fe30 	bl	8003bf8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8000f98:	2308      	movs	r3, #8
 8000f9a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000fae:	f107 031c 	add.w	r3, r7, #28
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f002 fe20 	bl	8003bf8 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(ENC_GPIO_Port, ENC_Pin, LL_GPIO_PULL_NO);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2104      	movs	r1, #4
 8000fbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc0:	f7ff fc59 	bl	8000876 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_3, LL_GPIO_PULL_NO);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2108      	movs	r1, #8
 8000fc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fcc:	f7ff fc53 	bl	8000876 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(ENC_GPIO_Port, ENC_Pin, LL_GPIO_MODE_INPUT);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2104      	movs	r1, #4
 8000fd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd8:	f7ff fc10 	bl	80007fc <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_3, LL_GPIO_MODE_INPUT);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2108      	movs	r1, #8
 8000fe0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe4:	f7ff fc0a 	bl	80007fc <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = ON_OFF_Pin;
 8000fe8:	2310      	movs	r3, #16
 8000fea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ffc:	f003 f840 	bl	8004080 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8001000:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001004:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001006:	2301      	movs	r3, #1
 8001008:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	4619      	mov	r1, r3
 800101a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800101e:	f003 f82f 	bl	8004080 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001022:	f7ff f9ed 	bl	8000400 <__NVIC_GetPriorityGrouping>
 8001026:	4603      	mov	r3, r0
 8001028:	2200      	movs	r2, #0
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fa3d 	bl	80004ac <NVIC_EncodePriority>
 8001032:	4603      	mov	r3, r0
 8001034:	4619      	mov	r1, r3
 8001036:	2008      	movs	r0, #8
 8001038:	f7ff fa0e 	bl	8000458 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 800103c:	2008      	movs	r0, #8
 800103e:	f7ff f9ed 	bl	800041c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001042:	f7ff f9dd 	bl	8000400 <__NVIC_GetPriorityGrouping>
 8001046:	4603      	mov	r3, r0
 8001048:	2200      	movs	r2, #0
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fa2d 	bl	80004ac <NVIC_EncodePriority>
 8001052:	4603      	mov	r3, r0
 8001054:	4619      	mov	r1, r3
 8001056:	2009      	movs	r0, #9
 8001058:	f7ff f9fe 	bl	8000458 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 800105c:	2009      	movs	r0, #9
 800105e:	f7ff f9dd 	bl	800041c <__NVIC_EnableIRQ>

}
 8001062:	bf00      	nop
 8001064:	3728      	adds	r7, #40	; 0x28
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800106e:	b672      	cpsid	i
}
 8001070:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001072:	e7fe      	b.n	8001072 <Error_Handler+0x8>

08001074 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <HAL_MspInit+0x44>)
 800107c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107e:	4a0e      	ldr	r2, [pc, #56]	; (80010b8 <HAL_MspInit+0x44>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6613      	str	r3, [r2, #96]	; 0x60
 8001086:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <HAL_MspInit+0x44>)
 8001088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001092:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <HAL_MspInit+0x44>)
 8001094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001096:	4a08      	ldr	r2, [pc, #32]	; (80010b8 <HAL_MspInit+0x44>)
 8001098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109c:	6593      	str	r3, [r2, #88]	; 0x58
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_MspInit+0x44>)
 80010a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80010aa:	f000 fd3d 	bl	8001b28 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40021000 	.word	0x40021000

080010bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <HAL_TIM_Base_MspInit+0x38>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d10b      	bne.n	80010e6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010ce:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <HAL_TIM_Base_MspInit+0x3c>)
 80010d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d2:	4a09      	ldr	r2, [pc, #36]	; (80010f8 <HAL_TIM_Base_MspInit+0x3c>)
 80010d4:	f043 0302 	orr.w	r3, r3, #2
 80010d8:	6593      	str	r3, [r2, #88]	; 0x58
 80010da:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <HAL_TIM_Base_MspInit+0x3c>)
 80010dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80010e6:	bf00      	nop
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	40000400 	.word	0x40000400
 80010f8:	40021000 	.word	0x40021000

080010fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a11      	ldr	r2, [pc, #68]	; (8001160 <HAL_TIM_MspPostInit+0x64>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d11b      	bne.n	8001156 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <HAL_TIM_MspPostInit+0x68>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	4a10      	ldr	r2, [pc, #64]	; (8001164 <HAL_TIM_MspPostInit+0x68>)
 8001124:	f043 0302 	orr.w	r3, r3, #2
 8001128:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112a:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <HAL_TIM_MspPostInit+0x68>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001136:	2310      	movs	r3, #16
 8001138:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	2302      	movs	r3, #2
 800113c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001146:	2302      	movs	r3, #2
 8001148:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114a:	f107 030c 	add.w	r3, r7, #12
 800114e:	4619      	mov	r1, r3
 8001150:	4805      	ldr	r0, [pc, #20]	; (8001168 <HAL_TIM_MspPostInit+0x6c>)
 8001152:	f000 fac3 	bl	80016dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001156:	bf00      	nop
 8001158:	3720      	adds	r7, #32
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40000400 	.word	0x40000400
 8001164:	40021000 	.word	0x40021000
 8001168:	48000400 	.word	0x48000400

0800116c <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001174:	4a04      	ldr	r2, [pc, #16]	; (8001188 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6153      	str	r3, [r2, #20]
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40010400 	.word	0x40010400

0800118c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001190:	e7fe      	b.n	8001190 <NMI_Handler+0x4>

08001192 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001196:	e7fe      	b.n	8001196 <HardFault_Handler+0x4>

08001198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800119c:	e7fe      	b.n	800119c <MemManage_Handler+0x4>

0800119e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <BusFault_Handler+0x4>

080011a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <UsageFault_Handler+0x4>

080011aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d8:	f000 f95c 	bl	8001494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}

080011e0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	encoder_measureVelocity();
 80011e4:	f7ff f8e4 	bl	80003b0 <encoder_measureVelocity>

  /* USER CODE END EXTI2_IRQn 0 */
  /* USER CODE BEGIN EXTI2_IRQn 1 */
	LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 80011e8:	2004      	movs	r0, #4
 80011ea:	f7ff ffbf 	bl	800116c <LL_EXTI_ClearFlag_0_31>

  /* USER CODE END EXTI2_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  /* USER CODE BEGIN EXTI3_IRQn 1 */
	LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 80011f6:	2008      	movs	r0, #8
 80011f8:	f7ff ffb8 	bl	800116c <LL_EXTI_ClearFlag_0_31>

  /* USER CODE END EXTI3_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}

08001200 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <SystemInit+0x20>)
 8001206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800120a:	4a05      	ldr	r2, [pc, #20]	; (8001220 <SystemInit+0x20>)
 800120c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001210:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <LL_TIM_EnableCounter>:
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f043 0201 	orr.w	r2, r3, #1
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	601a      	str	r2, [r3, #0]
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <LL_TIM_SetCounter>:
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <LL_TIM_GetCounter>:
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800126c:	4618      	mov	r0, r3
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <LL_TIM_OC_SetCompareCH1>:
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a0:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	645a      	str	r2, [r3, #68]	; 0x44
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <LL_TIM_DisableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_DisableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableAllOutputs(TIM_TypeDef *TIMx)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	645a      	str	r2, [r3, #68]	; 0x44
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <timers_init>:
#define PWM_MAX 		8000
#define CLOCK_FREQUENCY	160000000

//Initialization of timer perypherial (called once at the begining)
void timers_init()
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
	LL_TIM_OC_SetCompareCH1(timerPWM,0);
 80012d8:	2100      	movs	r1, #0
 80012da:	4809      	ldr	r0, [pc, #36]	; (8001300 <timers_init+0x2c>)
 80012dc:	f7ff ffcc 	bl	8001278 <LL_TIM_OC_SetCompareCH1>
	LL_TIM_EnableCounter(timerPWM);
 80012e0:	4807      	ldr	r0, [pc, #28]	; (8001300 <timers_init+0x2c>)
 80012e2:	f7ff ff9f 	bl	8001224 <LL_TIM_EnableCounter>
	LL_TIM_EnableCounter(timerVelocity);
 80012e6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80012ea:	f7ff ff9b 	bl	8001224 <LL_TIM_EnableCounter>
	LL_TIM_EnableCounter(timerLED);
 80012ee:	4805      	ldr	r0, [pc, #20]	; (8001304 <timers_init+0x30>)
 80012f0:	f7ff ff98 	bl	8001224 <LL_TIM_EnableCounter>
	LL_TIM_EnableAllOutputs(timerLED);
 80012f4:	4803      	ldr	r0, [pc, #12]	; (8001304 <timers_init+0x30>)
 80012f6:	f7ff ffcd 	bl	8001294 <LL_TIM_EnableAllOutputs>
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40012c00 	.word	0x40012c00
 8001304:	40000400 	.word	0x40000400

08001308 <timers_enablePWM>:


//Enable timer output (0 - disable, >0 - enable)
void timers_enablePWM(char enable)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
	if(enable < 0)
	LL_TIM_EnableAllOutputs(timerPWM);
	else
	LL_TIM_DisableAllOutputs(timerPWM);
 8001312:	4803      	ldr	r0, [pc, #12]	; (8001320 <timers_enablePWM+0x18>)
 8001314:	f7ff ffce 	bl	80012b4 <LL_TIM_DisableAllOutputs>
}
 8001318:	bf00      	nop
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40012c00 	.word	0x40012c00

08001324 <timers_setPWM>:

//Sets PWM of a function (range from 0.0f to 1.0f)
void timers_setPWM(float fPWM)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	ed87 0a01 	vstr	s0, [r7, #4]
	fPWM = normalisef(fPWM, 0.0f, 1.0f);
 800132e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001332:	eddf 0a0e 	vldr	s1, [pc, #56]	; 800136c <timers_setPWM+0x48>
 8001336:	ed97 0a01 	vldr	s0, [r7, #4]
 800133a:	f7ff f80f 	bl	800035c <normalisef>
 800133e:	ed87 0a01 	vstr	s0, [r7, #4]
	int iPWM = (int)(fPWM * 8000.0f);
 8001342:	edd7 7a01 	vldr	s15, [r7, #4]
 8001346:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001370 <timers_setPWM+0x4c>
 800134a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800134e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001352:	ee17 3a90 	vmov	r3, s15
 8001356:	60fb      	str	r3, [r7, #12]
	LL_TIM_OC_SetCompareCH1(timerPWM,iPWM);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	4619      	mov	r1, r3
 800135c:	4805      	ldr	r0, [pc, #20]	; (8001374 <timers_setPWM+0x50>)
 800135e:	f7ff ff8b 	bl	8001278 <LL_TIM_OC_SetCompareCH1>
}
 8001362:	bf00      	nop
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	00000000 	.word	0x00000000
 8001370:	45fa0000 	.word	0x45fa0000
 8001374:	40012c00 	.word	0x40012c00

08001378 <timers_getVelocityTimer>:


//Gets current velocity counter value
uint32_t timers_getVelocityTimer()
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
	return LL_TIM_GetCounter(timerVelocity);
 800137c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001380:	f7ff ff6e 	bl	8001260 <LL_TIM_GetCounter>
 8001384:	4603      	mov	r3, r0
}
 8001386:	4618      	mov	r0, r3
 8001388:	bd80      	pop	{r7, pc}

0800138a <timers_resetVeloctiyTimer>:

//Resets current velocity counter value
void timers_resetVeloctiyTimer()
{
 800138a:	b580      	push	{r7, lr}
 800138c:	af00      	add	r7, sp, #0
	LL_TIM_SetCounter(timerVelocity,0);
 800138e:	2100      	movs	r1, #0
 8001390:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001394:	f7ff ff56 	bl	8001244 <LL_TIM_SetCounter>
}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}

0800139c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800139c:	480d      	ldr	r0, [pc, #52]	; (80013d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800139e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013a0:	480d      	ldr	r0, [pc, #52]	; (80013d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80013a2:	490e      	ldr	r1, [pc, #56]	; (80013dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80013a4:	4a0e      	ldr	r2, [pc, #56]	; (80013e0 <LoopForever+0xe>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80013a8:	e002      	b.n	80013b0 <LoopCopyDataInit>

080013aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ae:	3304      	adds	r3, #4

080013b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b4:	d3f9      	bcc.n	80013aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b6:	4a0b      	ldr	r2, [pc, #44]	; (80013e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013b8:	4c0b      	ldr	r4, [pc, #44]	; (80013e8 <LoopForever+0x16>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013bc:	e001      	b.n	80013c2 <LoopFillZerobss>

080013be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c0:	3204      	adds	r2, #4

080013c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c4:	d3fb      	bcc.n	80013be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013c6:	f7ff ff1b 	bl	8001200 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ca:	f002 ff8b 	bl	80042e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013ce:	f7ff fae5 	bl	800099c <main>

080013d2 <LoopForever>:

LoopForever:
    b LoopForever
 80013d2:	e7fe      	b.n	80013d2 <LoopForever>
  ldr   r0, =_estack
 80013d4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80013d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013e0:	0800436c 	.word	0x0800436c
  ldr r2, =_sbss
 80013e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013e8:	2000007c 	.word	0x2000007c

080013ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013ec:	e7fe      	b.n	80013ec <ADC1_2_IRQHandler>

080013ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013f4:	2300      	movs	r3, #0
 80013f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f8:	2003      	movs	r0, #3
 80013fa:	f000 f93d 	bl	8001678 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013fe:	200f      	movs	r0, #15
 8001400:	f000 f80e 	bl	8001420 <HAL_InitTick>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d002      	beq.n	8001410 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	71fb      	strb	r3, [r7, #7]
 800140e:	e001      	b.n	8001414 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001410:	f7ff fe30 	bl	8001074 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001414:	79fb      	ldrb	r3, [r7, #7]

}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001428:	2300      	movs	r3, #0
 800142a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800142c:	4b16      	ldr	r3, [pc, #88]	; (8001488 <HAL_InitTick+0x68>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d022      	beq.n	800147a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001434:	4b15      	ldr	r3, [pc, #84]	; (800148c <HAL_InitTick+0x6c>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b13      	ldr	r3, [pc, #76]	; (8001488 <HAL_InitTick+0x68>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001440:	fbb1 f3f3 	udiv	r3, r1, r3
 8001444:	fbb2 f3f3 	udiv	r3, r2, r3
 8001448:	4618      	mov	r0, r3
 800144a:	f000 f93a 	bl	80016c2 <HAL_SYSTICK_Config>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d10f      	bne.n	8001474 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b0f      	cmp	r3, #15
 8001458:	d809      	bhi.n	800146e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800145a:	2200      	movs	r2, #0
 800145c:	6879      	ldr	r1, [r7, #4]
 800145e:	f04f 30ff 	mov.w	r0, #4294967295
 8001462:	f000 f914 	bl	800168e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001466:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <HAL_InitTick+0x70>)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	e007      	b.n	800147e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	73fb      	strb	r3, [r7, #15]
 8001472:	e004      	b.n	800147e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	73fb      	strb	r3, [r7, #15]
 8001478:	e001      	b.n	800147e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800147e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000008 	.word	0x20000008
 800148c:	20000000 	.word	0x20000000
 8001490:	20000004 	.word	0x20000004

08001494 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <HAL_IncTick+0x1c>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <HAL_IncTick+0x20>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4413      	add	r3, r2
 80014a2:	4a03      	ldr	r2, [pc, #12]	; (80014b0 <HAL_IncTick+0x1c>)
 80014a4:	6013      	str	r3, [r2, #0]
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	20000078 	.word	0x20000078
 80014b4:	20000008 	.word	0x20000008

080014b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return uwTick;
 80014bc:	4b03      	ldr	r3, [pc, #12]	; (80014cc <HAL_GetTick+0x14>)
 80014be:	681b      	ldr	r3, [r3, #0]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	20000078 	.word	0x20000078

080014d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014d8:	f7ff ffee 	bl	80014b8 <HAL_GetTick>
 80014dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e8:	d004      	beq.n	80014f4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_Delay+0x40>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	4413      	add	r3, r2
 80014f2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014f4:	bf00      	nop
 80014f6:	f7ff ffdf 	bl	80014b8 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	429a      	cmp	r2, r3
 8001504:	d8f7      	bhi.n	80014f6 <HAL_Delay+0x26>
  {
  }
}
 8001506:	bf00      	nop
 8001508:	bf00      	nop
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000008 	.word	0x20000008

08001514 <__NVIC_SetPriorityGrouping>:
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <__NVIC_SetPriorityGrouping+0x44>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001530:	4013      	ands	r3, r2
 8001532:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800153c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001546:	4a04      	ldr	r2, [pc, #16]	; (8001558 <__NVIC_SetPriorityGrouping+0x44>)
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	60d3      	str	r3, [r2, #12]
}
 800154c:	bf00      	nop
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <__NVIC_GetPriorityGrouping>:
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001560:	4b04      	ldr	r3, [pc, #16]	; (8001574 <__NVIC_GetPriorityGrouping+0x18>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	0a1b      	lsrs	r3, r3, #8
 8001566:	f003 0307 	and.w	r3, r3, #7
}
 800156a:	4618      	mov	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <__NVIC_SetPriority>:
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	6039      	str	r1, [r7, #0]
 8001582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001588:	2b00      	cmp	r3, #0
 800158a:	db0a      	blt.n	80015a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	b2da      	uxtb	r2, r3
 8001590:	490c      	ldr	r1, [pc, #48]	; (80015c4 <__NVIC_SetPriority+0x4c>)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	0112      	lsls	r2, r2, #4
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	440b      	add	r3, r1
 800159c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80015a0:	e00a      	b.n	80015b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	4908      	ldr	r1, [pc, #32]	; (80015c8 <__NVIC_SetPriority+0x50>)
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	3b04      	subs	r3, #4
 80015b0:	0112      	lsls	r2, r2, #4
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	440b      	add	r3, r1
 80015b6:	761a      	strb	r2, [r3, #24]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000e100 	.word	0xe000e100
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <NVIC_EncodePriority>:
{
 80015cc:	b480      	push	{r7}
 80015ce:	b089      	sub	sp, #36	; 0x24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f1c3 0307 	rsb	r3, r3, #7
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	bf28      	it	cs
 80015ea:	2304      	movcs	r3, #4
 80015ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3304      	adds	r3, #4
 80015f2:	2b06      	cmp	r3, #6
 80015f4:	d902      	bls.n	80015fc <NVIC_EncodePriority+0x30>
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3b03      	subs	r3, #3
 80015fa:	e000      	b.n	80015fe <NVIC_EncodePriority+0x32>
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001600:	f04f 32ff 	mov.w	r2, #4294967295
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43da      	mvns	r2, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	401a      	ands	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001614:	f04f 31ff 	mov.w	r1, #4294967295
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	fa01 f303 	lsl.w	r3, r1, r3
 800161e:	43d9      	mvns	r1, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	4313      	orrs	r3, r2
}
 8001626:	4618      	mov	r0, r3
 8001628:	3724      	adds	r7, #36	; 0x24
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001644:	d301      	bcc.n	800164a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001646:	2301      	movs	r3, #1
 8001648:	e00f      	b.n	800166a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164a:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <SysTick_Config+0x40>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001652:	210f      	movs	r1, #15
 8001654:	f04f 30ff 	mov.w	r0, #4294967295
 8001658:	f7ff ff8e 	bl	8001578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <SysTick_Config+0x40>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001662:	4b04      	ldr	r3, [pc, #16]	; (8001674 <SysTick_Config+0x40>)
 8001664:	2207      	movs	r2, #7
 8001666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	e000e010 	.word	0xe000e010

08001678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ff47 	bl	8001514 <__NVIC_SetPriorityGrouping>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b086      	sub	sp, #24
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
 800169a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800169c:	f7ff ff5e 	bl	800155c <__NVIC_GetPriorityGrouping>
 80016a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	68b9      	ldr	r1, [r7, #8]
 80016a6:	6978      	ldr	r0, [r7, #20]
 80016a8:	f7ff ff90 	bl	80015cc <NVIC_EncodePriority>
 80016ac:	4602      	mov	r2, r0
 80016ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b2:	4611      	mov	r1, r2
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ff5f 	bl	8001578 <__NVIC_SetPriority>
}
 80016ba:	bf00      	nop
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff ffb2 	bl	8001634 <SysTick_Config>
 80016d0:	4603      	mov	r3, r0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
	...

080016dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016dc:	b480      	push	{r7}
 80016de:	b087      	sub	sp, #28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016ea:	e15a      	b.n	80019a2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	2101      	movs	r1, #1
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	fa01 f303 	lsl.w	r3, r1, r3
 80016f8:	4013      	ands	r3, r2
 80016fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f000 814c 	beq.w	800199c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 0303 	and.w	r3, r3, #3
 800170c:	2b01      	cmp	r3, #1
 800170e:	d005      	beq.n	800171c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001718:	2b02      	cmp	r3, #2
 800171a:	d130      	bne.n	800177e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	2203      	movs	r2, #3
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4013      	ands	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	68da      	ldr	r2, [r3, #12]
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	4313      	orrs	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001752:	2201      	movs	r2, #1
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43db      	mvns	r3, r3
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	4013      	ands	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	091b      	lsrs	r3, r3, #4
 8001768:	f003 0201 	and.w	r2, r3, #1
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4313      	orrs	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	2b03      	cmp	r3, #3
 8001788:	d017      	beq.n	80017ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	2203      	movs	r2, #3
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43db      	mvns	r3, r3
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4013      	ands	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d123      	bne.n	800180e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	08da      	lsrs	r2, r3, #3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3208      	adds	r2, #8
 80017ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	220f      	movs	r2, #15
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	691a      	ldr	r2, [r3, #16]
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	08da      	lsrs	r2, r3, #3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3208      	adds	r2, #8
 8001808:	6939      	ldr	r1, [r7, #16]
 800180a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	2203      	movs	r2, #3
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 0203 	and.w	r2, r3, #3
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4313      	orrs	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 80a6 	beq.w	800199c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001850:	4b5b      	ldr	r3, [pc, #364]	; (80019c0 <HAL_GPIO_Init+0x2e4>)
 8001852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001854:	4a5a      	ldr	r2, [pc, #360]	; (80019c0 <HAL_GPIO_Init+0x2e4>)
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	6613      	str	r3, [r2, #96]	; 0x60
 800185c:	4b58      	ldr	r3, [pc, #352]	; (80019c0 <HAL_GPIO_Init+0x2e4>)
 800185e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001868:	4a56      	ldr	r2, [pc, #344]	; (80019c4 <HAL_GPIO_Init+0x2e8>)
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	089b      	lsrs	r3, r3, #2
 800186e:	3302      	adds	r3, #2
 8001870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001874:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f003 0303 	and.w	r3, r3, #3
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	220f      	movs	r2, #15
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001892:	d01f      	beq.n	80018d4 <HAL_GPIO_Init+0x1f8>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a4c      	ldr	r2, [pc, #304]	; (80019c8 <HAL_GPIO_Init+0x2ec>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d019      	beq.n	80018d0 <HAL_GPIO_Init+0x1f4>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a4b      	ldr	r2, [pc, #300]	; (80019cc <HAL_GPIO_Init+0x2f0>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d013      	beq.n	80018cc <HAL_GPIO_Init+0x1f0>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a4a      	ldr	r2, [pc, #296]	; (80019d0 <HAL_GPIO_Init+0x2f4>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d00d      	beq.n	80018c8 <HAL_GPIO_Init+0x1ec>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a49      	ldr	r2, [pc, #292]	; (80019d4 <HAL_GPIO_Init+0x2f8>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d007      	beq.n	80018c4 <HAL_GPIO_Init+0x1e8>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a48      	ldr	r2, [pc, #288]	; (80019d8 <HAL_GPIO_Init+0x2fc>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d101      	bne.n	80018c0 <HAL_GPIO_Init+0x1e4>
 80018bc:	2305      	movs	r3, #5
 80018be:	e00a      	b.n	80018d6 <HAL_GPIO_Init+0x1fa>
 80018c0:	2306      	movs	r3, #6
 80018c2:	e008      	b.n	80018d6 <HAL_GPIO_Init+0x1fa>
 80018c4:	2304      	movs	r3, #4
 80018c6:	e006      	b.n	80018d6 <HAL_GPIO_Init+0x1fa>
 80018c8:	2303      	movs	r3, #3
 80018ca:	e004      	b.n	80018d6 <HAL_GPIO_Init+0x1fa>
 80018cc:	2302      	movs	r3, #2
 80018ce:	e002      	b.n	80018d6 <HAL_GPIO_Init+0x1fa>
 80018d0:	2301      	movs	r3, #1
 80018d2:	e000      	b.n	80018d6 <HAL_GPIO_Init+0x1fa>
 80018d4:	2300      	movs	r3, #0
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	f002 0203 	and.w	r2, r2, #3
 80018dc:	0092      	lsls	r2, r2, #2
 80018de:	4093      	lsls	r3, r2
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018e6:	4937      	ldr	r1, [pc, #220]	; (80019c4 <HAL_GPIO_Init+0x2e8>)
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	089b      	lsrs	r3, r3, #2
 80018ec:	3302      	adds	r3, #2
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018f4:	4b39      	ldr	r3, [pc, #228]	; (80019dc <HAL_GPIO_Init+0x300>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4013      	ands	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4313      	orrs	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001918:	4a30      	ldr	r2, [pc, #192]	; (80019dc <HAL_GPIO_Init+0x300>)
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800191e:	4b2f      	ldr	r3, [pc, #188]	; (80019dc <HAL_GPIO_Init+0x300>)
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	43db      	mvns	r3, r3
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	4013      	ands	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4313      	orrs	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001942:	4a26      	ldr	r2, [pc, #152]	; (80019dc <HAL_GPIO_Init+0x300>)
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001948:	4b24      	ldr	r3, [pc, #144]	; (80019dc <HAL_GPIO_Init+0x300>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	43db      	mvns	r3, r3
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4013      	ands	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800196c:	4a1b      	ldr	r2, [pc, #108]	; (80019dc <HAL_GPIO_Init+0x300>)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001972:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <HAL_GPIO_Init+0x300>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	43db      	mvns	r3, r3
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4013      	ands	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4313      	orrs	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001996:	4a11      	ldr	r2, [pc, #68]	; (80019dc <HAL_GPIO_Init+0x300>)
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	3301      	adds	r3, #1
 80019a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	fa22 f303 	lsr.w	r3, r2, r3
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f47f ae9d 	bne.w	80016ec <HAL_GPIO_Init+0x10>
  }
}
 80019b2:	bf00      	nop
 80019b4:	bf00      	nop
 80019b6:	371c      	adds	r7, #28
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40010000 	.word	0x40010000
 80019c8:	48000400 	.word	0x48000400
 80019cc:	48000800 	.word	0x48000800
 80019d0:	48000c00 	.word	0x48000c00
 80019d4:	48001000 	.word	0x48001000
 80019d8:	48001400 	.word	0x48001400
 80019dc:	40010400 	.word	0x40010400

080019e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d141      	bne.n	8001a72 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019ee:	4b4b      	ldr	r3, [pc, #300]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019fa:	d131      	bne.n	8001a60 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019fc:	4b47      	ldr	r3, [pc, #284]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a02:	4a46      	ldr	r2, [pc, #280]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a0c:	4b43      	ldr	r3, [pc, #268]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a14:	4a41      	ldr	r2, [pc, #260]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a1a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a1c:	4b40      	ldr	r3, [pc, #256]	; (8001b20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2232      	movs	r2, #50	; 0x32
 8001a22:	fb02 f303 	mul.w	r3, r2, r3
 8001a26:	4a3f      	ldr	r2, [pc, #252]	; (8001b24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a28:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2c:	0c9b      	lsrs	r3, r3, #18
 8001a2e:	3301      	adds	r3, #1
 8001a30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a32:	e002      	b.n	8001a3a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a3a:	4b38      	ldr	r3, [pc, #224]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a46:	d102      	bne.n	8001a4e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f2      	bne.n	8001a34 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a4e:	4b33      	ldr	r3, [pc, #204]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a5a:	d158      	bne.n	8001b0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e057      	b.n	8001b10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a60:	4b2e      	ldr	r3, [pc, #184]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a66:	4a2d      	ldr	r2, [pc, #180]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a70:	e04d      	b.n	8001b0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a78:	d141      	bne.n	8001afe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a7a:	4b28      	ldr	r3, [pc, #160]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a86:	d131      	bne.n	8001aec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a88:	4b24      	ldr	r3, [pc, #144]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a8e:	4a23      	ldr	r2, [pc, #140]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a98:	4b20      	ldr	r3, [pc, #128]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001aa0:	4a1e      	ldr	r2, [pc, #120]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aa6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001aa8:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2232      	movs	r2, #50	; 0x32
 8001aae:	fb02 f303 	mul.w	r3, r2, r3
 8001ab2:	4a1c      	ldr	r2, [pc, #112]	; (8001b24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab8:	0c9b      	lsrs	r3, r3, #18
 8001aba:	3301      	adds	r3, #1
 8001abc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001abe:	e002      	b.n	8001ac6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ac6:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ad2:	d102      	bne.n	8001ada <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f2      	bne.n	8001ac0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ada:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ae6:	d112      	bne.n	8001b0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e011      	b.n	8001b10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001aec:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001af2:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001afc:	e007      	b.n	8001b0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001afe:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b06:	4a05      	ldr	r2, [pc, #20]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b0c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	40007000 	.word	0x40007000
 8001b20:	20000000 	.word	0x20000000
 8001b24:	431bde83 	.word	0x431bde83

08001b28 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001b2c:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	4a04      	ldr	r2, [pc, #16]	; (8001b44 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b36:	6093      	str	r3, [r2, #8]
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40007000 	.word	0x40007000

08001b48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e308      	b.n	800216c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d075      	beq.n	8001c52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b66:	4ba3      	ldr	r3, [pc, #652]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
 8001b6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b70:	4ba0      	ldr	r3, [pc, #640]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	2b0c      	cmp	r3, #12
 8001b7e:	d102      	bne.n	8001b86 <HAL_RCC_OscConfig+0x3e>
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	d002      	beq.n	8001b8c <HAL_RCC_OscConfig+0x44>
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	d10b      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b8c:	4b99      	ldr	r3, [pc, #612]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d05b      	beq.n	8001c50 <HAL_RCC_OscConfig+0x108>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d157      	bne.n	8001c50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e2e3      	b.n	800216c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bac:	d106      	bne.n	8001bbc <HAL_RCC_OscConfig+0x74>
 8001bae:	4b91      	ldr	r3, [pc, #580]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a90      	ldr	r2, [pc, #576]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	e01d      	b.n	8001bf8 <HAL_RCC_OscConfig+0xb0>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bc4:	d10c      	bne.n	8001be0 <HAL_RCC_OscConfig+0x98>
 8001bc6:	4b8b      	ldr	r3, [pc, #556]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a8a      	ldr	r2, [pc, #552]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001bcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	4b88      	ldr	r3, [pc, #544]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a87      	ldr	r2, [pc, #540]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	e00b      	b.n	8001bf8 <HAL_RCC_OscConfig+0xb0>
 8001be0:	4b84      	ldr	r3, [pc, #528]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a83      	ldr	r2, [pc, #524]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bea:	6013      	str	r3, [r2, #0]
 8001bec:	4b81      	ldr	r3, [pc, #516]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a80      	ldr	r2, [pc, #512]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001bf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d013      	beq.n	8001c28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c00:	f7ff fc5a 	bl	80014b8 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c08:	f7ff fc56 	bl	80014b8 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b64      	cmp	r3, #100	; 0x64
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e2a8      	b.n	800216c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c1a:	4b76      	ldr	r3, [pc, #472]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0f0      	beq.n	8001c08 <HAL_RCC_OscConfig+0xc0>
 8001c26:	e014      	b.n	8001c52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c28:	f7ff fc46 	bl	80014b8 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c30:	f7ff fc42 	bl	80014b8 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b64      	cmp	r3, #100	; 0x64
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e294      	b.n	800216c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c42:	4b6c      	ldr	r3, [pc, #432]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f0      	bne.n	8001c30 <HAL_RCC_OscConfig+0xe8>
 8001c4e:	e000      	b.n	8001c52 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d075      	beq.n	8001d4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c5e:	4b65      	ldr	r3, [pc, #404]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 030c 	and.w	r3, r3, #12
 8001c66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c68:	4b62      	ldr	r3, [pc, #392]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	f003 0303 	and.w	r3, r3, #3
 8001c70:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	2b0c      	cmp	r3, #12
 8001c76:	d102      	bne.n	8001c7e <HAL_RCC_OscConfig+0x136>
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d002      	beq.n	8001c84 <HAL_RCC_OscConfig+0x13c>
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	2b04      	cmp	r3, #4
 8001c82:	d11f      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c84:	4b5b      	ldr	r3, [pc, #364]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d005      	beq.n	8001c9c <HAL_RCC_OscConfig+0x154>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e267      	b.n	800216c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9c:	4b55      	ldr	r3, [pc, #340]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	061b      	lsls	r3, r3, #24
 8001caa:	4952      	ldr	r1, [pc, #328]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001cb0:	4b51      	ldr	r3, [pc, #324]	; (8001df8 <HAL_RCC_OscConfig+0x2b0>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff fbb3 	bl	8001420 <HAL_InitTick>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d043      	beq.n	8001d48 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e253      	b.n	800216c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d023      	beq.n	8001d14 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ccc:	4b49      	ldr	r3, [pc, #292]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a48      	ldr	r2, [pc, #288]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd8:	f7ff fbee 	bl	80014b8 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce0:	f7ff fbea 	bl	80014b8 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e23c      	b.n	800216c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cf2:	4b40      	ldr	r3, [pc, #256]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfe:	4b3d      	ldr	r3, [pc, #244]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	061b      	lsls	r3, r3, #24
 8001d0c:	4939      	ldr	r1, [pc, #228]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	604b      	str	r3, [r1, #4]
 8001d12:	e01a      	b.n	8001d4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d14:	4b37      	ldr	r3, [pc, #220]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a36      	ldr	r2, [pc, #216]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001d1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d20:	f7ff fbca 	bl	80014b8 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d28:	f7ff fbc6 	bl	80014b8 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e218      	b.n	800216c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d3a:	4b2e      	ldr	r3, [pc, #184]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x1e0>
 8001d46:	e000      	b.n	8001d4a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d48:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d03c      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d01c      	beq.n	8001d98 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d5e:	4b25      	ldr	r3, [pc, #148]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d64:	4a23      	ldr	r2, [pc, #140]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d6e:	f7ff fba3 	bl	80014b8 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d76:	f7ff fb9f 	bl	80014b8 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e1f1      	b.n	800216c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d88:	4b1a      	ldr	r3, [pc, #104]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0ef      	beq.n	8001d76 <HAL_RCC_OscConfig+0x22e>
 8001d96:	e01b      	b.n	8001dd0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d98:	4b16      	ldr	r3, [pc, #88]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d9e:	4a15      	ldr	r2, [pc, #84]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001da0:	f023 0301 	bic.w	r3, r3, #1
 8001da4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da8:	f7ff fb86 	bl	80014b8 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db0:	f7ff fb82 	bl	80014b8 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e1d4      	b.n	800216c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dc2:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001dc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1ef      	bne.n	8001db0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f000 80ab 	beq.w	8001f34 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dde:	2300      	movs	r3, #0
 8001de0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001de2:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <HAL_RCC_OscConfig+0x2ac>)
 8001de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d106      	bne.n	8001dfc <HAL_RCC_OscConfig+0x2b4>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e005      	b.n	8001dfe <HAL_RCC_OscConfig+0x2b6>
 8001df2:	bf00      	nop
 8001df4:	40021000 	.word	0x40021000
 8001df8:	20000004 	.word	0x20000004
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00d      	beq.n	8001e1e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e02:	4baf      	ldr	r3, [pc, #700]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e06:	4aae      	ldr	r2, [pc, #696]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e0e:	4bac      	ldr	r3, [pc, #688]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e1e:	4ba9      	ldr	r3, [pc, #676]	; (80020c4 <HAL_RCC_OscConfig+0x57c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d118      	bne.n	8001e5c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e2a:	4ba6      	ldr	r3, [pc, #664]	; (80020c4 <HAL_RCC_OscConfig+0x57c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4aa5      	ldr	r2, [pc, #660]	; (80020c4 <HAL_RCC_OscConfig+0x57c>)
 8001e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e36:	f7ff fb3f 	bl	80014b8 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e3e:	f7ff fb3b 	bl	80014b8 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e18d      	b.n	800216c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e50:	4b9c      	ldr	r3, [pc, #624]	; (80020c4 <HAL_RCC_OscConfig+0x57c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0f0      	beq.n	8001e3e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d108      	bne.n	8001e76 <HAL_RCC_OscConfig+0x32e>
 8001e64:	4b96      	ldr	r3, [pc, #600]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6a:	4a95      	ldr	r2, [pc, #596]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e74:	e024      	b.n	8001ec0 <HAL_RCC_OscConfig+0x378>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	2b05      	cmp	r3, #5
 8001e7c:	d110      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x358>
 8001e7e:	4b90      	ldr	r3, [pc, #576]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e84:	4a8e      	ldr	r2, [pc, #568]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001e86:	f043 0304 	orr.w	r3, r3, #4
 8001e8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e8e:	4b8c      	ldr	r3, [pc, #560]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e94:	4a8a      	ldr	r2, [pc, #552]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e9e:	e00f      	b.n	8001ec0 <HAL_RCC_OscConfig+0x378>
 8001ea0:	4b87      	ldr	r3, [pc, #540]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea6:	4a86      	ldr	r2, [pc, #536]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001ea8:	f023 0301 	bic.w	r3, r3, #1
 8001eac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001eb0:	4b83      	ldr	r3, [pc, #524]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb6:	4a82      	ldr	r2, [pc, #520]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001eb8:	f023 0304 	bic.w	r3, r3, #4
 8001ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d016      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec8:	f7ff faf6 	bl	80014b8 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ece:	e00a      	b.n	8001ee6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed0:	f7ff faf2 	bl	80014b8 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e142      	b.n	800216c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ee6:	4b76      	ldr	r3, [pc, #472]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0ed      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x388>
 8001ef4:	e015      	b.n	8001f22 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef6:	f7ff fadf 	bl	80014b8 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001efc:	e00a      	b.n	8001f14 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001efe:	f7ff fadb 	bl	80014b8 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e12b      	b.n	800216c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f14:	4b6a      	ldr	r3, [pc, #424]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1ed      	bne.n	8001efe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f22:	7ffb      	ldrb	r3, [r7, #31]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d105      	bne.n	8001f34 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f28:	4b65      	ldr	r3, [pc, #404]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2c:	4a64      	ldr	r2, [pc, #400]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001f2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f32:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0320 	and.w	r3, r3, #32
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d03c      	beq.n	8001fba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d01c      	beq.n	8001f82 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f48:	4b5d      	ldr	r3, [pc, #372]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001f4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f4e:	4a5c      	ldr	r2, [pc, #368]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f58:	f7ff faae 	bl	80014b8 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f60:	f7ff faaa 	bl	80014b8 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e0fc      	b.n	800216c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f72:	4b53      	ldr	r3, [pc, #332]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001f74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0ef      	beq.n	8001f60 <HAL_RCC_OscConfig+0x418>
 8001f80:	e01b      	b.n	8001fba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f82:	4b4f      	ldr	r3, [pc, #316]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001f84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f88:	4a4d      	ldr	r2, [pc, #308]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001f8a:	f023 0301 	bic.w	r3, r3, #1
 8001f8e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f92:	f7ff fa91 	bl	80014b8 <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f9a:	f7ff fa8d 	bl	80014b8 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e0df      	b.n	800216c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fac:	4b44      	ldr	r3, [pc, #272]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001fae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1ef      	bne.n	8001f9a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 80d3 	beq.w	800216a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fc4:	4b3e      	ldr	r3, [pc, #248]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 030c 	and.w	r3, r3, #12
 8001fcc:	2b0c      	cmp	r3, #12
 8001fce:	f000 808d 	beq.w	80020ec <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d15a      	bne.n	8002090 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fda:	4b39      	ldr	r3, [pc, #228]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a38      	ldr	r2, [pc, #224]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8001fe0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe6:	f7ff fa67 	bl	80014b8 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fee:	f7ff fa63 	bl	80014b8 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e0b5      	b.n	800216c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002000:	4b2f      	ldr	r3, [pc, #188]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1f0      	bne.n	8001fee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800200c:	4b2c      	ldr	r3, [pc, #176]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 800200e:	68da      	ldr	r2, [r3, #12]
 8002010:	4b2d      	ldr	r3, [pc, #180]	; (80020c8 <HAL_RCC_OscConfig+0x580>)
 8002012:	4013      	ands	r3, r2
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6a11      	ldr	r1, [r2, #32]
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800201c:	3a01      	subs	r2, #1
 800201e:	0112      	lsls	r2, r2, #4
 8002020:	4311      	orrs	r1, r2
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002026:	0212      	lsls	r2, r2, #8
 8002028:	4311      	orrs	r1, r2
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800202e:	0852      	lsrs	r2, r2, #1
 8002030:	3a01      	subs	r2, #1
 8002032:	0552      	lsls	r2, r2, #21
 8002034:	4311      	orrs	r1, r2
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800203a:	0852      	lsrs	r2, r2, #1
 800203c:	3a01      	subs	r2, #1
 800203e:	0652      	lsls	r2, r2, #25
 8002040:	4311      	orrs	r1, r2
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002046:	06d2      	lsls	r2, r2, #27
 8002048:	430a      	orrs	r2, r1
 800204a:	491d      	ldr	r1, [pc, #116]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 800204c:	4313      	orrs	r3, r2
 800204e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002050:	4b1b      	ldr	r3, [pc, #108]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a1a      	ldr	r2, [pc, #104]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8002056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800205a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800205c:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	4a17      	ldr	r2, [pc, #92]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8002062:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002066:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002068:	f7ff fa26 	bl	80014b8 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002070:	f7ff fa22 	bl	80014b8 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e074      	b.n	800216c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002082:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0f0      	beq.n	8002070 <HAL_RCC_OscConfig+0x528>
 800208e:	e06c      	b.n	800216a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002090:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a0a      	ldr	r2, [pc, #40]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 8002096:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800209a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800209c:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	4a07      	ldr	r2, [pc, #28]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 80020a2:	f023 0303 	bic.w	r3, r3, #3
 80020a6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80020a8:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	4a04      	ldr	r2, [pc, #16]	; (80020c0 <HAL_RCC_OscConfig+0x578>)
 80020ae:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80020b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7ff f9fe 	bl	80014b8 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020be:	e00e      	b.n	80020de <HAL_RCC_OscConfig+0x596>
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40007000 	.word	0x40007000
 80020c8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020cc:	f7ff f9f4 	bl	80014b8 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e046      	b.n	800216c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020de:	4b25      	ldr	r3, [pc, #148]	; (8002174 <HAL_RCC_OscConfig+0x62c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f0      	bne.n	80020cc <HAL_RCC_OscConfig+0x584>
 80020ea:	e03e      	b.n	800216a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	69db      	ldr	r3, [r3, #28]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d101      	bne.n	80020f8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e039      	b.n	800216c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80020f8:	4b1e      	ldr	r3, [pc, #120]	; (8002174 <HAL_RCC_OscConfig+0x62c>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	f003 0203 	and.w	r2, r3, #3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	429a      	cmp	r2, r3
 800210a:	d12c      	bne.n	8002166 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	3b01      	subs	r3, #1
 8002118:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800211a:	429a      	cmp	r2, r3
 800211c:	d123      	bne.n	8002166 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002128:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800212a:	429a      	cmp	r2, r3
 800212c:	d11b      	bne.n	8002166 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002138:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800213a:	429a      	cmp	r2, r3
 800213c:	d113      	bne.n	8002166 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	085b      	lsrs	r3, r3, #1
 800214a:	3b01      	subs	r3, #1
 800214c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800214e:	429a      	cmp	r2, r3
 8002150:	d109      	bne.n	8002166 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800215c:	085b      	lsrs	r3, r3, #1
 800215e:	3b01      	subs	r3, #1
 8002160:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002162:	429a      	cmp	r2, r3
 8002164:	d001      	beq.n	800216a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3720      	adds	r7, #32
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40021000 	.word	0x40021000

08002178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e11e      	b.n	80023ce <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002190:	4b91      	ldr	r3, [pc, #580]	; (80023d8 <HAL_RCC_ClockConfig+0x260>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 030f 	and.w	r3, r3, #15
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	d910      	bls.n	80021c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219e:	4b8e      	ldr	r3, [pc, #568]	; (80023d8 <HAL_RCC_ClockConfig+0x260>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f023 020f 	bic.w	r2, r3, #15
 80021a6:	498c      	ldr	r1, [pc, #560]	; (80023d8 <HAL_RCC_ClockConfig+0x260>)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ae:	4b8a      	ldr	r3, [pc, #552]	; (80023d8 <HAL_RCC_ClockConfig+0x260>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d001      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e106      	b.n	80023ce <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d073      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b03      	cmp	r3, #3
 80021d2:	d129      	bne.n	8002228 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021d4:	4b81      	ldr	r3, [pc, #516]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e0f4      	b.n	80023ce <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80021e4:	f000 f964 	bl	80024b0 <RCC_GetSysClockFreqFromPLLSource>
 80021e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4a7c      	ldr	r2, [pc, #496]	; (80023e0 <HAL_RCC_ClockConfig+0x268>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d93f      	bls.n	8002272 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80021f2:	4b7a      	ldr	r3, [pc, #488]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d009      	beq.n	8002212 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002206:	2b00      	cmp	r3, #0
 8002208:	d033      	beq.n	8002272 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800220e:	2b00      	cmp	r3, #0
 8002210:	d12f      	bne.n	8002272 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002212:	4b72      	ldr	r3, [pc, #456]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800221a:	4a70      	ldr	r2, [pc, #448]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 800221c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002220:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002222:	2380      	movs	r3, #128	; 0x80
 8002224:	617b      	str	r3, [r7, #20]
 8002226:	e024      	b.n	8002272 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b02      	cmp	r3, #2
 800222e:	d107      	bne.n	8002240 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002230:	4b6a      	ldr	r3, [pc, #424]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d109      	bne.n	8002250 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e0c6      	b.n	80023ce <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002240:	4b66      	ldr	r3, [pc, #408]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e0be      	b.n	80023ce <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002250:	f000 f8ce 	bl	80023f0 <HAL_RCC_GetSysClockFreq>
 8002254:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	4a61      	ldr	r2, [pc, #388]	; (80023e0 <HAL_RCC_ClockConfig+0x268>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d909      	bls.n	8002272 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800225e:	4b5f      	ldr	r3, [pc, #380]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002266:	4a5d      	ldr	r2, [pc, #372]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 8002268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800226c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800226e:	2380      	movs	r3, #128	; 0x80
 8002270:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002272:	4b5a      	ldr	r3, [pc, #360]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f023 0203 	bic.w	r2, r3, #3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	4957      	ldr	r1, [pc, #348]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 8002280:	4313      	orrs	r3, r2
 8002282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002284:	f7ff f918 	bl	80014b8 <HAL_GetTick>
 8002288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228a:	e00a      	b.n	80022a2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800228c:	f7ff f914 	bl	80014b8 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	f241 3288 	movw	r2, #5000	; 0x1388
 800229a:	4293      	cmp	r3, r2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e095      	b.n	80023ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a2:	4b4e      	ldr	r3, [pc, #312]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 020c 	and.w	r2, r3, #12
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d1eb      	bne.n	800228c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d023      	beq.n	8002308 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d005      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022cc:	4b43      	ldr	r3, [pc, #268]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	4a42      	ldr	r2, [pc, #264]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 80022d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022d6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0308 	and.w	r3, r3, #8
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d007      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80022e4:	4b3d      	ldr	r3, [pc, #244]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80022ec:	4a3b      	ldr	r2, [pc, #236]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 80022ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022f4:	4b39      	ldr	r3, [pc, #228]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	4936      	ldr	r1, [pc, #216]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 8002302:	4313      	orrs	r3, r2
 8002304:	608b      	str	r3, [r1, #8]
 8002306:	e008      	b.n	800231a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	2b80      	cmp	r3, #128	; 0x80
 800230c:	d105      	bne.n	800231a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800230e:	4b33      	ldr	r3, [pc, #204]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	4a32      	ldr	r2, [pc, #200]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 8002314:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002318:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800231a:	4b2f      	ldr	r3, [pc, #188]	; (80023d8 <HAL_RCC_ClockConfig+0x260>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	429a      	cmp	r2, r3
 8002326:	d21d      	bcs.n	8002364 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002328:	4b2b      	ldr	r3, [pc, #172]	; (80023d8 <HAL_RCC_ClockConfig+0x260>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f023 020f 	bic.w	r2, r3, #15
 8002330:	4929      	ldr	r1, [pc, #164]	; (80023d8 <HAL_RCC_ClockConfig+0x260>)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	4313      	orrs	r3, r2
 8002336:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002338:	f7ff f8be 	bl	80014b8 <HAL_GetTick>
 800233c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800233e:	e00a      	b.n	8002356 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002340:	f7ff f8ba 	bl	80014b8 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	f241 3288 	movw	r2, #5000	; 0x1388
 800234e:	4293      	cmp	r3, r2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e03b      	b.n	80023ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002356:	4b20      	ldr	r3, [pc, #128]	; (80023d8 <HAL_RCC_ClockConfig+0x260>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	429a      	cmp	r2, r3
 8002362:	d1ed      	bne.n	8002340 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	2b00      	cmp	r3, #0
 800236e:	d008      	beq.n	8002382 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002370:	4b1a      	ldr	r3, [pc, #104]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	4917      	ldr	r1, [pc, #92]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 800237e:	4313      	orrs	r3, r2
 8002380:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	2b00      	cmp	r3, #0
 800238c:	d009      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800238e:	4b13      	ldr	r3, [pc, #76]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	490f      	ldr	r1, [pc, #60]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023a2:	f000 f825 	bl	80023f0 <HAL_RCC_GetSysClockFreq>
 80023a6:	4602      	mov	r2, r0
 80023a8:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <HAL_RCC_ClockConfig+0x264>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	091b      	lsrs	r3, r3, #4
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	490c      	ldr	r1, [pc, #48]	; (80023e4 <HAL_RCC_ClockConfig+0x26c>)
 80023b4:	5ccb      	ldrb	r3, [r1, r3]
 80023b6:	f003 031f 	and.w	r3, r3, #31
 80023ba:	fa22 f303 	lsr.w	r3, r2, r3
 80023be:	4a0a      	ldr	r2, [pc, #40]	; (80023e8 <HAL_RCC_ClockConfig+0x270>)
 80023c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80023c2:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <HAL_RCC_ClockConfig+0x274>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff f82a 	bl	8001420 <HAL_InitTick>
 80023cc:	4603      	mov	r3, r0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40022000 	.word	0x40022000
 80023dc:	40021000 	.word	0x40021000
 80023e0:	04c4b400 	.word	0x04c4b400
 80023e4:	08004354 	.word	0x08004354
 80023e8:	20000000 	.word	0x20000000
 80023ec:	20000004 	.word	0x20000004

080023f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b087      	sub	sp, #28
 80023f4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80023f6:	4b2c      	ldr	r3, [pc, #176]	; (80024a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 030c 	and.w	r3, r3, #12
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d102      	bne.n	8002408 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002402:	4b2a      	ldr	r3, [pc, #168]	; (80024ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	e047      	b.n	8002498 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002408:	4b27      	ldr	r3, [pc, #156]	; (80024a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 030c 	and.w	r3, r3, #12
 8002410:	2b08      	cmp	r3, #8
 8002412:	d102      	bne.n	800241a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002414:	4b25      	ldr	r3, [pc, #148]	; (80024ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	e03e      	b.n	8002498 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800241a:	4b23      	ldr	r3, [pc, #140]	; (80024a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 030c 	and.w	r3, r3, #12
 8002422:	2b0c      	cmp	r3, #12
 8002424:	d136      	bne.n	8002494 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002426:	4b20      	ldr	r3, [pc, #128]	; (80024a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002430:	4b1d      	ldr	r3, [pc, #116]	; (80024a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	091b      	lsrs	r3, r3, #4
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	3301      	adds	r3, #1
 800243c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2b03      	cmp	r3, #3
 8002442:	d10c      	bne.n	800245e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002444:	4a19      	ldr	r2, [pc, #100]	; (80024ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	fbb2 f3f3 	udiv	r3, r2, r3
 800244c:	4a16      	ldr	r2, [pc, #88]	; (80024a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800244e:	68d2      	ldr	r2, [r2, #12]
 8002450:	0a12      	lsrs	r2, r2, #8
 8002452:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002456:	fb02 f303 	mul.w	r3, r2, r3
 800245a:	617b      	str	r3, [r7, #20]
      break;
 800245c:	e00c      	b.n	8002478 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800245e:	4a13      	ldr	r2, [pc, #76]	; (80024ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	fbb2 f3f3 	udiv	r3, r2, r3
 8002466:	4a10      	ldr	r2, [pc, #64]	; (80024a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002468:	68d2      	ldr	r2, [r2, #12]
 800246a:	0a12      	lsrs	r2, r2, #8
 800246c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002470:	fb02 f303 	mul.w	r3, r2, r3
 8002474:	617b      	str	r3, [r7, #20]
      break;
 8002476:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002478:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	0e5b      	lsrs	r3, r3, #25
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	3301      	adds	r3, #1
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002490:	613b      	str	r3, [r7, #16]
 8002492:	e001      	b.n	8002498 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002494:	2300      	movs	r3, #0
 8002496:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002498:	693b      	ldr	r3, [r7, #16]
}
 800249a:	4618      	mov	r0, r3
 800249c:	371c      	adds	r7, #28
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	40021000 	.word	0x40021000
 80024ac:	00f42400 	.word	0x00f42400

080024b0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b087      	sub	sp, #28
 80024b4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024b6:	4b1e      	ldr	r3, [pc, #120]	; (8002530 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024c0:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	091b      	lsrs	r3, r3, #4
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	3301      	adds	r3, #1
 80024cc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d10c      	bne.n	80024ee <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024d4:	4a17      	ldr	r2, [pc, #92]	; (8002534 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024dc:	4a14      	ldr	r2, [pc, #80]	; (8002530 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024de:	68d2      	ldr	r2, [r2, #12]
 80024e0:	0a12      	lsrs	r2, r2, #8
 80024e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024e6:	fb02 f303 	mul.w	r3, r2, r3
 80024ea:	617b      	str	r3, [r7, #20]
    break;
 80024ec:	e00c      	b.n	8002508 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024ee:	4a11      	ldr	r2, [pc, #68]	; (8002534 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f6:	4a0e      	ldr	r2, [pc, #56]	; (8002530 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024f8:	68d2      	ldr	r2, [r2, #12]
 80024fa:	0a12      	lsrs	r2, r2, #8
 80024fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002500:	fb02 f303 	mul.w	r3, r2, r3
 8002504:	617b      	str	r3, [r7, #20]
    break;
 8002506:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002508:	4b09      	ldr	r3, [pc, #36]	; (8002530 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	0e5b      	lsrs	r3, r3, #25
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	3301      	adds	r3, #1
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002520:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002522:	687b      	ldr	r3, [r7, #4]
}
 8002524:	4618      	mov	r0, r3
 8002526:	371c      	adds	r7, #28
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	40021000 	.word	0x40021000
 8002534:	00f42400 	.word	0x00f42400

08002538 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002540:	2300      	movs	r3, #0
 8002542:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002544:	2300      	movs	r3, #0
 8002546:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 8098 	beq.w	8002686 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002556:	2300      	movs	r3, #0
 8002558:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800255a:	4b43      	ldr	r3, [pc, #268]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800255c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10d      	bne.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002566:	4b40      	ldr	r3, [pc, #256]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256a:	4a3f      	ldr	r2, [pc, #252]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800256c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002570:	6593      	str	r3, [r2, #88]	; 0x58
 8002572:	4b3d      	ldr	r3, [pc, #244]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257a:	60bb      	str	r3, [r7, #8]
 800257c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800257e:	2301      	movs	r3, #1
 8002580:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002582:	4b3a      	ldr	r3, [pc, #232]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a39      	ldr	r2, [pc, #228]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800258c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800258e:	f7fe ff93 	bl	80014b8 <HAL_GetTick>
 8002592:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002594:	e009      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002596:	f7fe ff8f 	bl	80014b8 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d902      	bls.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	74fb      	strb	r3, [r7, #19]
        break;
 80025a8:	e005      	b.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025aa:	4b30      	ldr	r3, [pc, #192]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0ef      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80025b6:	7cfb      	ldrb	r3, [r7, #19]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d159      	bne.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025bc:	4b2a      	ldr	r3, [pc, #168]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025c6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d01e      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d019      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025d8:	4b23      	ldr	r3, [pc, #140]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025e4:	4b20      	ldr	r3, [pc, #128]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ea:	4a1f      	ldr	r2, [pc, #124]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025f4:	4b1c      	ldr	r3, [pc, #112]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fa:	4a1b      	ldr	r2, [pc, #108]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002600:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002604:	4a18      	ldr	r2, [pc, #96]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d016      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002616:	f7fe ff4f 	bl	80014b8 <HAL_GetTick>
 800261a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800261c:	e00b      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261e:	f7fe ff4b 	bl	80014b8 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	f241 3288 	movw	r2, #5000	; 0x1388
 800262c:	4293      	cmp	r3, r2
 800262e:	d902      	bls.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	74fb      	strb	r3, [r7, #19]
            break;
 8002634:	e006      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002636:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0ec      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002644:	7cfb      	ldrb	r3, [r7, #19]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10b      	bne.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800264a:	4b07      	ldr	r3, [pc, #28]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800264c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002650:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	4903      	ldr	r1, [pc, #12]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800265a:	4313      	orrs	r3, r2
 800265c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002660:	e008      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002662:	7cfb      	ldrb	r3, [r7, #19]
 8002664:	74bb      	strb	r3, [r7, #18]
 8002666:	e005      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002668:	40021000 	.word	0x40021000
 800266c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002670:	7cfb      	ldrb	r3, [r7, #19]
 8002672:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002674:	7c7b      	ldrb	r3, [r7, #17]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d105      	bne.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800267a:	4ba6      	ldr	r3, [pc, #664]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800267c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267e:	4aa5      	ldr	r2, [pc, #660]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002680:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002684:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00a      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002692:	4ba0      	ldr	r3, [pc, #640]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002698:	f023 0203 	bic.w	r2, r3, #3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	499c      	ldr	r1, [pc, #624]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00a      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026b4:	4b97      	ldr	r3, [pc, #604]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ba:	f023 020c 	bic.w	r2, r3, #12
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	4994      	ldr	r1, [pc, #592]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00a      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026d6:	4b8f      	ldr	r3, [pc, #572]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	498b      	ldr	r1, [pc, #556]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0308 	and.w	r3, r3, #8
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00a      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026f8:	4b86      	ldr	r3, [pc, #536]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	4983      	ldr	r1, [pc, #524]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002708:	4313      	orrs	r3, r2
 800270a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0320 	and.w	r3, r3, #32
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00a      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800271a:	4b7e      	ldr	r3, [pc, #504]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800271c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002720:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	497a      	ldr	r1, [pc, #488]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800272a:	4313      	orrs	r3, r2
 800272c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00a      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800273c:	4b75      	ldr	r3, [pc, #468]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800273e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002742:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	4972      	ldr	r1, [pc, #456]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800274c:	4313      	orrs	r3, r2
 800274e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00a      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800275e:	4b6d      	ldr	r3, [pc, #436]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002764:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	69db      	ldr	r3, [r3, #28]
 800276c:	4969      	ldr	r1, [pc, #420]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800276e:	4313      	orrs	r3, r2
 8002770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00a      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002780:	4b64      	ldr	r3, [pc, #400]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002786:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	4961      	ldr	r1, [pc, #388]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002790:	4313      	orrs	r3, r2
 8002792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00a      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027a2:	4b5c      	ldr	r3, [pc, #368]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	4958      	ldr	r1, [pc, #352]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d015      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027c4:	4b53      	ldr	r3, [pc, #332]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d2:	4950      	ldr	r1, [pc, #320]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027e2:	d105      	bne.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027e4:	4b4b      	ldr	r3, [pc, #300]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	4a4a      	ldr	r2, [pc, #296]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027ee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d015      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027fc:	4b45      	ldr	r3, [pc, #276]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002802:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280a:	4942      	ldr	r1, [pc, #264]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800280c:	4313      	orrs	r3, r2
 800280e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002816:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800281a:	d105      	bne.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800281c:	4b3d      	ldr	r3, [pc, #244]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	4a3c      	ldr	r2, [pc, #240]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002822:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002826:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d015      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002834:	4b37      	ldr	r3, [pc, #220]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	4934      	ldr	r1, [pc, #208]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002844:	4313      	orrs	r3, r2
 8002846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002852:	d105      	bne.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002854:	4b2f      	ldr	r3, [pc, #188]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	4a2e      	ldr	r2, [pc, #184]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800285a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800285e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d015      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800286c:	4b29      	ldr	r3, [pc, #164]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800286e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002872:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287a:	4926      	ldr	r1, [pc, #152]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800287c:	4313      	orrs	r3, r2
 800287e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002886:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800288a:	d105      	bne.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800288c:	4b21      	ldr	r3, [pc, #132]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	4a20      	ldr	r2, [pc, #128]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002892:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002896:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d015      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028a4:	4b1b      	ldr	r3, [pc, #108]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b2:	4918      	ldr	r1, [pc, #96]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028c2:	d105      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028c4:	4b13      	ldr	r3, [pc, #76]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	4a12      	ldr	r2, [pc, #72]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d015      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80028dc:	4b0d      	ldr	r3, [pc, #52]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ea:	490a      	ldr	r1, [pc, #40]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028fa:	d105      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	4a04      	ldr	r2, [pc, #16]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002902:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002906:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002908:	7cbb      	ldrb	r3, [r7, #18]
}
 800290a:	4618      	mov	r0, r3
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40021000 	.word	0x40021000

08002918 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e049      	b.n	80029be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7fe fbbc 	bl	80010bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3304      	adds	r3, #4
 8002954:	4619      	mov	r1, r3
 8002956:	4610      	mov	r0, r2
 8002958:	f000 faa4 	bl	8002ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b082      	sub	sp, #8
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e049      	b.n	8002a6c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d106      	bne.n	80029f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f841 	bl	8002a74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2202      	movs	r2, #2
 80029f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3304      	adds	r3, #4
 8002a02:	4619      	mov	r1, r3
 8002a04:	4610      	mov	r0, r2
 8002a06:	f000 fa4d 	bl	8002ea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a94:	2300      	movs	r3, #0
 8002a96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d101      	bne.n	8002aa6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e0ff      	b.n	8002ca6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b14      	cmp	r3, #20
 8002ab2:	f200 80f0 	bhi.w	8002c96 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002ab6:	a201      	add	r2, pc, #4	; (adr r2, 8002abc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002abc:	08002b11 	.word	0x08002b11
 8002ac0:	08002c97 	.word	0x08002c97
 8002ac4:	08002c97 	.word	0x08002c97
 8002ac8:	08002c97 	.word	0x08002c97
 8002acc:	08002b51 	.word	0x08002b51
 8002ad0:	08002c97 	.word	0x08002c97
 8002ad4:	08002c97 	.word	0x08002c97
 8002ad8:	08002c97 	.word	0x08002c97
 8002adc:	08002b93 	.word	0x08002b93
 8002ae0:	08002c97 	.word	0x08002c97
 8002ae4:	08002c97 	.word	0x08002c97
 8002ae8:	08002c97 	.word	0x08002c97
 8002aec:	08002bd3 	.word	0x08002bd3
 8002af0:	08002c97 	.word	0x08002c97
 8002af4:	08002c97 	.word	0x08002c97
 8002af8:	08002c97 	.word	0x08002c97
 8002afc:	08002c15 	.word	0x08002c15
 8002b00:	08002c97 	.word	0x08002c97
 8002b04:	08002c97 	.word	0x08002c97
 8002b08:	08002c97 	.word	0x08002c97
 8002b0c:	08002c55 	.word	0x08002c55
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68b9      	ldr	r1, [r7, #8]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 fa54 	bl	8002fc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699a      	ldr	r2, [r3, #24]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f042 0208 	orr.w	r2, r2, #8
 8002b2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	699a      	ldr	r2, [r3, #24]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0204 	bic.w	r2, r2, #4
 8002b3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6999      	ldr	r1, [r3, #24]
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	691a      	ldr	r2, [r3, #16]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	619a      	str	r2, [r3, #24]
      break;
 8002b4e:	e0a5      	b.n	8002c9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68b9      	ldr	r1, [r7, #8]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 fac4 	bl	80030e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	699a      	ldr	r2, [r3, #24]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	699a      	ldr	r2, [r3, #24]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6999      	ldr	r1, [r3, #24]
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	021a      	lsls	r2, r3, #8
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	619a      	str	r2, [r3, #24]
      break;
 8002b90:	e084      	b.n	8002c9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68b9      	ldr	r1, [r7, #8]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f000 fb2d 	bl	80031f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	69da      	ldr	r2, [r3, #28]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f042 0208 	orr.w	r2, r2, #8
 8002bac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	69da      	ldr	r2, [r3, #28]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0204 	bic.w	r2, r2, #4
 8002bbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	69d9      	ldr	r1, [r3, #28]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	691a      	ldr	r2, [r3, #16]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	61da      	str	r2, [r3, #28]
      break;
 8002bd0:	e064      	b.n	8002c9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68b9      	ldr	r1, [r7, #8]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f000 fb95 	bl	8003308 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	69da      	ldr	r2, [r3, #28]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	69da      	ldr	r2, [r3, #28]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	69d9      	ldr	r1, [r3, #28]
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	021a      	lsls	r2, r3, #8
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	61da      	str	r2, [r3, #28]
      break;
 8002c12:	e043      	b.n	8002c9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68b9      	ldr	r1, [r7, #8]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 fbfe 	bl	800341c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0208 	orr.w	r2, r2, #8
 8002c2e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0204 	bic.w	r2, r2, #4
 8002c3e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	691a      	ldr	r2, [r3, #16]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002c52:	e023      	b.n	8002c9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68b9      	ldr	r1, [r7, #8]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 fc42 	bl	80034e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c6e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c7e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	021a      	lsls	r2, r3, #8
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002c94:	e002      	b.n	8002c9c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	75fb      	strb	r3, [r7, #23]
      break;
 8002c9a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ca4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop

08002cb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d101      	bne.n	8002ccc <HAL_TIM_ConfigClockSource+0x1c>
 8002cc8:	2302      	movs	r3, #2
 8002cca:	e0de      	b.n	8002e8a <HAL_TIM_ConfigClockSource+0x1da>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002cea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002cee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cf6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a63      	ldr	r2, [pc, #396]	; (8002e94 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	f000 80a9 	beq.w	8002e5e <HAL_TIM_ConfigClockSource+0x1ae>
 8002d0c:	4a61      	ldr	r2, [pc, #388]	; (8002e94 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	f200 80ae 	bhi.w	8002e70 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d14:	4a60      	ldr	r2, [pc, #384]	; (8002e98 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	f000 80a1 	beq.w	8002e5e <HAL_TIM_ConfigClockSource+0x1ae>
 8002d1c:	4a5e      	ldr	r2, [pc, #376]	; (8002e98 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	f200 80a6 	bhi.w	8002e70 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d24:	4a5d      	ldr	r2, [pc, #372]	; (8002e9c <HAL_TIM_ConfigClockSource+0x1ec>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	f000 8099 	beq.w	8002e5e <HAL_TIM_ConfigClockSource+0x1ae>
 8002d2c:	4a5b      	ldr	r2, [pc, #364]	; (8002e9c <HAL_TIM_ConfigClockSource+0x1ec>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	f200 809e 	bhi.w	8002e70 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d34:	4a5a      	ldr	r2, [pc, #360]	; (8002ea0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	f000 8091 	beq.w	8002e5e <HAL_TIM_ConfigClockSource+0x1ae>
 8002d3c:	4a58      	ldr	r2, [pc, #352]	; (8002ea0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	f200 8096 	bhi.w	8002e70 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d44:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002d48:	f000 8089 	beq.w	8002e5e <HAL_TIM_ConfigClockSource+0x1ae>
 8002d4c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002d50:	f200 808e 	bhi.w	8002e70 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d58:	d03e      	beq.n	8002dd8 <HAL_TIM_ConfigClockSource+0x128>
 8002d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d5e:	f200 8087 	bhi.w	8002e70 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d66:	f000 8086 	beq.w	8002e76 <HAL_TIM_ConfigClockSource+0x1c6>
 8002d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d6e:	d87f      	bhi.n	8002e70 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d70:	2b70      	cmp	r3, #112	; 0x70
 8002d72:	d01a      	beq.n	8002daa <HAL_TIM_ConfigClockSource+0xfa>
 8002d74:	2b70      	cmp	r3, #112	; 0x70
 8002d76:	d87b      	bhi.n	8002e70 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d78:	2b60      	cmp	r3, #96	; 0x60
 8002d7a:	d050      	beq.n	8002e1e <HAL_TIM_ConfigClockSource+0x16e>
 8002d7c:	2b60      	cmp	r3, #96	; 0x60
 8002d7e:	d877      	bhi.n	8002e70 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d80:	2b50      	cmp	r3, #80	; 0x50
 8002d82:	d03c      	beq.n	8002dfe <HAL_TIM_ConfigClockSource+0x14e>
 8002d84:	2b50      	cmp	r3, #80	; 0x50
 8002d86:	d873      	bhi.n	8002e70 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d88:	2b40      	cmp	r3, #64	; 0x40
 8002d8a:	d058      	beq.n	8002e3e <HAL_TIM_ConfigClockSource+0x18e>
 8002d8c:	2b40      	cmp	r3, #64	; 0x40
 8002d8e:	d86f      	bhi.n	8002e70 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d90:	2b30      	cmp	r3, #48	; 0x30
 8002d92:	d064      	beq.n	8002e5e <HAL_TIM_ConfigClockSource+0x1ae>
 8002d94:	2b30      	cmp	r3, #48	; 0x30
 8002d96:	d86b      	bhi.n	8002e70 <HAL_TIM_ConfigClockSource+0x1c0>
 8002d98:	2b20      	cmp	r3, #32
 8002d9a:	d060      	beq.n	8002e5e <HAL_TIM_ConfigClockSource+0x1ae>
 8002d9c:	2b20      	cmp	r3, #32
 8002d9e:	d867      	bhi.n	8002e70 <HAL_TIM_ConfigClockSource+0x1c0>
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d05c      	beq.n	8002e5e <HAL_TIM_ConfigClockSource+0x1ae>
 8002da4:	2b10      	cmp	r3, #16
 8002da6:	d05a      	beq.n	8002e5e <HAL_TIM_ConfigClockSource+0x1ae>
 8002da8:	e062      	b.n	8002e70 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6818      	ldr	r0, [r3, #0]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	6899      	ldr	r1, [r3, #8]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f000 fc75 	bl	80036a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002dcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	609a      	str	r2, [r3, #8]
      break;
 8002dd6:	e04f      	b.n	8002e78 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6818      	ldr	r0, [r3, #0]
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	6899      	ldr	r1, [r3, #8]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f000 fc5e 	bl	80036a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dfa:	609a      	str	r2, [r3, #8]
      break;
 8002dfc:	e03c      	b.n	8002e78 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6818      	ldr	r0, [r3, #0]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	6859      	ldr	r1, [r3, #4]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	f000 fbd0 	bl	80035b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2150      	movs	r1, #80	; 0x50
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 fc29 	bl	800366e <TIM_ITRx_SetConfig>
      break;
 8002e1c:	e02c      	b.n	8002e78 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6818      	ldr	r0, [r3, #0]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	6859      	ldr	r1, [r3, #4]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	f000 fbef 	bl	800360e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2160      	movs	r1, #96	; 0x60
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 fc19 	bl	800366e <TIM_ITRx_SetConfig>
      break;
 8002e3c:	e01c      	b.n	8002e78 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6818      	ldr	r0, [r3, #0]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	6859      	ldr	r1, [r3, #4]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	f000 fbb0 	bl	80035b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2140      	movs	r1, #64	; 0x40
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 fc09 	bl	800366e <TIM_ITRx_SetConfig>
      break;
 8002e5c:	e00c      	b.n	8002e78 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4619      	mov	r1, r3
 8002e68:	4610      	mov	r0, r2
 8002e6a:	f000 fc00 	bl	800366e <TIM_ITRx_SetConfig>
      break;
 8002e6e:	e003      	b.n	8002e78 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	73fb      	strb	r3, [r7, #15]
      break;
 8002e74:	e000      	b.n	8002e78 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8002e76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	00100070 	.word	0x00100070
 8002e98:	00100040 	.word	0x00100040
 8002e9c:	00100030 	.word	0x00100030
 8002ea0:	00100020 	.word	0x00100020

08002ea4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a3c      	ldr	r2, [pc, #240]	; (8002fa8 <TIM_Base_SetConfig+0x104>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d00f      	beq.n	8002edc <TIM_Base_SetConfig+0x38>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec2:	d00b      	beq.n	8002edc <TIM_Base_SetConfig+0x38>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a39      	ldr	r2, [pc, #228]	; (8002fac <TIM_Base_SetConfig+0x108>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d007      	beq.n	8002edc <TIM_Base_SetConfig+0x38>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a38      	ldr	r2, [pc, #224]	; (8002fb0 <TIM_Base_SetConfig+0x10c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d003      	beq.n	8002edc <TIM_Base_SetConfig+0x38>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a37      	ldr	r2, [pc, #220]	; (8002fb4 <TIM_Base_SetConfig+0x110>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d108      	bne.n	8002eee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a2d      	ldr	r2, [pc, #180]	; (8002fa8 <TIM_Base_SetConfig+0x104>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d01b      	beq.n	8002f2e <TIM_Base_SetConfig+0x8a>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002efc:	d017      	beq.n	8002f2e <TIM_Base_SetConfig+0x8a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a2a      	ldr	r2, [pc, #168]	; (8002fac <TIM_Base_SetConfig+0x108>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d013      	beq.n	8002f2e <TIM_Base_SetConfig+0x8a>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a29      	ldr	r2, [pc, #164]	; (8002fb0 <TIM_Base_SetConfig+0x10c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d00f      	beq.n	8002f2e <TIM_Base_SetConfig+0x8a>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a28      	ldr	r2, [pc, #160]	; (8002fb4 <TIM_Base_SetConfig+0x110>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d00b      	beq.n	8002f2e <TIM_Base_SetConfig+0x8a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a27      	ldr	r2, [pc, #156]	; (8002fb8 <TIM_Base_SetConfig+0x114>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d007      	beq.n	8002f2e <TIM_Base_SetConfig+0x8a>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a26      	ldr	r2, [pc, #152]	; (8002fbc <TIM_Base_SetConfig+0x118>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d003      	beq.n	8002f2e <TIM_Base_SetConfig+0x8a>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a25      	ldr	r2, [pc, #148]	; (8002fc0 <TIM_Base_SetConfig+0x11c>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d108      	bne.n	8002f40 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a10      	ldr	r2, [pc, #64]	; (8002fa8 <TIM_Base_SetConfig+0x104>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d00f      	beq.n	8002f8c <TIM_Base_SetConfig+0xe8>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a11      	ldr	r2, [pc, #68]	; (8002fb4 <TIM_Base_SetConfig+0x110>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d00b      	beq.n	8002f8c <TIM_Base_SetConfig+0xe8>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a10      	ldr	r2, [pc, #64]	; (8002fb8 <TIM_Base_SetConfig+0x114>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d007      	beq.n	8002f8c <TIM_Base_SetConfig+0xe8>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a0f      	ldr	r2, [pc, #60]	; (8002fbc <TIM_Base_SetConfig+0x118>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d003      	beq.n	8002f8c <TIM_Base_SetConfig+0xe8>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a0e      	ldr	r2, [pc, #56]	; (8002fc0 <TIM_Base_SetConfig+0x11c>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d103      	bne.n	8002f94 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	691a      	ldr	r2, [r3, #16]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	615a      	str	r2, [r3, #20]
}
 8002f9a:	bf00      	nop
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	40012c00 	.word	0x40012c00
 8002fac:	40000400 	.word	0x40000400
 8002fb0:	40000800 	.word	0x40000800
 8002fb4:	40013400 	.word	0x40013400
 8002fb8:	40014000 	.word	0x40014000
 8002fbc:	40014400 	.word	0x40014400
 8002fc0:	40014800 	.word	0x40014800

08002fc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b087      	sub	sp, #28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	f023 0201 	bic.w	r2, r3, #1
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f023 0303 	bic.w	r3, r3, #3
 8002ffe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	4313      	orrs	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f023 0302 	bic.w	r3, r3, #2
 8003010:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	4313      	orrs	r3, r2
 800301a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a2c      	ldr	r2, [pc, #176]	; (80030d0 <TIM_OC1_SetConfig+0x10c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d00f      	beq.n	8003044 <TIM_OC1_SetConfig+0x80>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a2b      	ldr	r2, [pc, #172]	; (80030d4 <TIM_OC1_SetConfig+0x110>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d00b      	beq.n	8003044 <TIM_OC1_SetConfig+0x80>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a2a      	ldr	r2, [pc, #168]	; (80030d8 <TIM_OC1_SetConfig+0x114>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d007      	beq.n	8003044 <TIM_OC1_SetConfig+0x80>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a29      	ldr	r2, [pc, #164]	; (80030dc <TIM_OC1_SetConfig+0x118>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d003      	beq.n	8003044 <TIM_OC1_SetConfig+0x80>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a28      	ldr	r2, [pc, #160]	; (80030e0 <TIM_OC1_SetConfig+0x11c>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d10c      	bne.n	800305e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	f023 0308 	bic.w	r3, r3, #8
 800304a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	4313      	orrs	r3, r2
 8003054:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f023 0304 	bic.w	r3, r3, #4
 800305c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a1b      	ldr	r2, [pc, #108]	; (80030d0 <TIM_OC1_SetConfig+0x10c>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d00f      	beq.n	8003086 <TIM_OC1_SetConfig+0xc2>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a1a      	ldr	r2, [pc, #104]	; (80030d4 <TIM_OC1_SetConfig+0x110>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d00b      	beq.n	8003086 <TIM_OC1_SetConfig+0xc2>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a19      	ldr	r2, [pc, #100]	; (80030d8 <TIM_OC1_SetConfig+0x114>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d007      	beq.n	8003086 <TIM_OC1_SetConfig+0xc2>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a18      	ldr	r2, [pc, #96]	; (80030dc <TIM_OC1_SetConfig+0x118>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d003      	beq.n	8003086 <TIM_OC1_SetConfig+0xc2>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a17      	ldr	r2, [pc, #92]	; (80030e0 <TIM_OC1_SetConfig+0x11c>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d111      	bne.n	80030aa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800308c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003094:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	4313      	orrs	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	621a      	str	r2, [r3, #32]
}
 80030c4:	bf00      	nop
 80030c6:	371c      	adds	r7, #28
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	40012c00 	.word	0x40012c00
 80030d4:	40013400 	.word	0x40013400
 80030d8:	40014000 	.word	0x40014000
 80030dc:	40014400 	.word	0x40014400
 80030e0:	40014800 	.word	0x40014800

080030e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b087      	sub	sp, #28
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	f023 0210 	bic.w	r2, r3, #16
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800311e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	021b      	lsls	r3, r3, #8
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	4313      	orrs	r3, r2
 800312a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f023 0320 	bic.w	r3, r3, #32
 8003132:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	4313      	orrs	r3, r2
 800313e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a28      	ldr	r2, [pc, #160]	; (80031e4 <TIM_OC2_SetConfig+0x100>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d003      	beq.n	8003150 <TIM_OC2_SetConfig+0x6c>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a27      	ldr	r2, [pc, #156]	; (80031e8 <TIM_OC2_SetConfig+0x104>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d10d      	bne.n	800316c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003156:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	011b      	lsls	r3, r3, #4
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	4313      	orrs	r3, r2
 8003162:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800316a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a1d      	ldr	r2, [pc, #116]	; (80031e4 <TIM_OC2_SetConfig+0x100>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d00f      	beq.n	8003194 <TIM_OC2_SetConfig+0xb0>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a1c      	ldr	r2, [pc, #112]	; (80031e8 <TIM_OC2_SetConfig+0x104>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d00b      	beq.n	8003194 <TIM_OC2_SetConfig+0xb0>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a1b      	ldr	r2, [pc, #108]	; (80031ec <TIM_OC2_SetConfig+0x108>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d007      	beq.n	8003194 <TIM_OC2_SetConfig+0xb0>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a1a      	ldr	r2, [pc, #104]	; (80031f0 <TIM_OC2_SetConfig+0x10c>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d003      	beq.n	8003194 <TIM_OC2_SetConfig+0xb0>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a19      	ldr	r2, [pc, #100]	; (80031f4 <TIM_OC2_SetConfig+0x110>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d113      	bne.n	80031bc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800319a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	621a      	str	r2, [r3, #32]
}
 80031d6:	bf00      	nop
 80031d8:	371c      	adds	r7, #28
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	40012c00 	.word	0x40012c00
 80031e8:	40013400 	.word	0x40013400
 80031ec:	40014000 	.word	0x40014000
 80031f0:	40014400 	.word	0x40014400
 80031f4:	40014800 	.word	0x40014800

080031f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b087      	sub	sp, #28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800322a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f023 0303 	bic.w	r3, r3, #3
 8003232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	4313      	orrs	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003244:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	021b      	lsls	r3, r3, #8
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	4313      	orrs	r3, r2
 8003250:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a27      	ldr	r2, [pc, #156]	; (80032f4 <TIM_OC3_SetConfig+0xfc>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d003      	beq.n	8003262 <TIM_OC3_SetConfig+0x6a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a26      	ldr	r2, [pc, #152]	; (80032f8 <TIM_OC3_SetConfig+0x100>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d10d      	bne.n	800327e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003268:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	021b      	lsls	r3, r3, #8
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	4313      	orrs	r3, r2
 8003274:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800327c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a1c      	ldr	r2, [pc, #112]	; (80032f4 <TIM_OC3_SetConfig+0xfc>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d00f      	beq.n	80032a6 <TIM_OC3_SetConfig+0xae>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a1b      	ldr	r2, [pc, #108]	; (80032f8 <TIM_OC3_SetConfig+0x100>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d00b      	beq.n	80032a6 <TIM_OC3_SetConfig+0xae>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a1a      	ldr	r2, [pc, #104]	; (80032fc <TIM_OC3_SetConfig+0x104>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d007      	beq.n	80032a6 <TIM_OC3_SetConfig+0xae>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a19      	ldr	r2, [pc, #100]	; (8003300 <TIM_OC3_SetConfig+0x108>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d003      	beq.n	80032a6 <TIM_OC3_SetConfig+0xae>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a18      	ldr	r2, [pc, #96]	; (8003304 <TIM_OC3_SetConfig+0x10c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d113      	bne.n	80032ce <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	011b      	lsls	r3, r3, #4
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	4313      	orrs	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	621a      	str	r2, [r3, #32]
}
 80032e8:	bf00      	nop
 80032ea:	371c      	adds	r7, #28
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	40012c00 	.word	0x40012c00
 80032f8:	40013400 	.word	0x40013400
 80032fc:	40014000 	.word	0x40014000
 8003300:	40014400 	.word	0x40014400
 8003304:	40014800 	.word	0x40014800

08003308 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003308:	b480      	push	{r7}
 800330a:	b087      	sub	sp, #28
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800333a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003342:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	021b      	lsls	r3, r3, #8
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	4313      	orrs	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003356:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	031b      	lsls	r3, r3, #12
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	4313      	orrs	r3, r2
 8003362:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a28      	ldr	r2, [pc, #160]	; (8003408 <TIM_OC4_SetConfig+0x100>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d003      	beq.n	8003374 <TIM_OC4_SetConfig+0x6c>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a27      	ldr	r2, [pc, #156]	; (800340c <TIM_OC4_SetConfig+0x104>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d10d      	bne.n	8003390 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800337a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	031b      	lsls	r3, r3, #12
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	4313      	orrs	r3, r2
 8003386:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800338e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a1d      	ldr	r2, [pc, #116]	; (8003408 <TIM_OC4_SetConfig+0x100>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d00f      	beq.n	80033b8 <TIM_OC4_SetConfig+0xb0>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a1c      	ldr	r2, [pc, #112]	; (800340c <TIM_OC4_SetConfig+0x104>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d00b      	beq.n	80033b8 <TIM_OC4_SetConfig+0xb0>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a1b      	ldr	r2, [pc, #108]	; (8003410 <TIM_OC4_SetConfig+0x108>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d007      	beq.n	80033b8 <TIM_OC4_SetConfig+0xb0>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a1a      	ldr	r2, [pc, #104]	; (8003414 <TIM_OC4_SetConfig+0x10c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d003      	beq.n	80033b8 <TIM_OC4_SetConfig+0xb0>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a19      	ldr	r2, [pc, #100]	; (8003418 <TIM_OC4_SetConfig+0x110>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d113      	bne.n	80033e0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033be:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80033c6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	019b      	lsls	r3, r3, #6
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	019b      	lsls	r3, r3, #6
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	621a      	str	r2, [r3, #32]
}
 80033fa:	bf00      	nop
 80033fc:	371c      	adds	r7, #28
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	40012c00 	.word	0x40012c00
 800340c:	40013400 	.word	0x40013400
 8003410:	40014000 	.word	0x40014000
 8003414:	40014400 	.word	0x40014400
 8003418:	40014800 	.word	0x40014800

0800341c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800341c:	b480      	push	{r7}
 800341e:	b087      	sub	sp, #28
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800344a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800344e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	4313      	orrs	r3, r2
 8003458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003460:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	041b      	lsls	r3, r3, #16
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	4313      	orrs	r3, r2
 800346c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a17      	ldr	r2, [pc, #92]	; (80034d0 <TIM_OC5_SetConfig+0xb4>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d00f      	beq.n	8003496 <TIM_OC5_SetConfig+0x7a>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a16      	ldr	r2, [pc, #88]	; (80034d4 <TIM_OC5_SetConfig+0xb8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d00b      	beq.n	8003496 <TIM_OC5_SetConfig+0x7a>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a15      	ldr	r2, [pc, #84]	; (80034d8 <TIM_OC5_SetConfig+0xbc>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d007      	beq.n	8003496 <TIM_OC5_SetConfig+0x7a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a14      	ldr	r2, [pc, #80]	; (80034dc <TIM_OC5_SetConfig+0xc0>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d003      	beq.n	8003496 <TIM_OC5_SetConfig+0x7a>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a13      	ldr	r2, [pc, #76]	; (80034e0 <TIM_OC5_SetConfig+0xc4>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d109      	bne.n	80034aa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800349c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	021b      	lsls	r3, r3, #8
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	621a      	str	r2, [r3, #32]
}
 80034c4:	bf00      	nop
 80034c6:	371c      	adds	r7, #28
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	40012c00 	.word	0x40012c00
 80034d4:	40013400 	.word	0x40013400
 80034d8:	40014000 	.word	0x40014000
 80034dc:	40014400 	.word	0x40014400
 80034e0:	40014800 	.word	0x40014800

080034e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b087      	sub	sp, #28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800350a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	021b      	lsls	r3, r3, #8
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	4313      	orrs	r3, r2
 8003522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800352a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	051b      	lsls	r3, r3, #20
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a18      	ldr	r2, [pc, #96]	; (800359c <TIM_OC6_SetConfig+0xb8>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d00f      	beq.n	8003560 <TIM_OC6_SetConfig+0x7c>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a17      	ldr	r2, [pc, #92]	; (80035a0 <TIM_OC6_SetConfig+0xbc>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d00b      	beq.n	8003560 <TIM_OC6_SetConfig+0x7c>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a16      	ldr	r2, [pc, #88]	; (80035a4 <TIM_OC6_SetConfig+0xc0>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d007      	beq.n	8003560 <TIM_OC6_SetConfig+0x7c>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a15      	ldr	r2, [pc, #84]	; (80035a8 <TIM_OC6_SetConfig+0xc4>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d003      	beq.n	8003560 <TIM_OC6_SetConfig+0x7c>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a14      	ldr	r2, [pc, #80]	; (80035ac <TIM_OC6_SetConfig+0xc8>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d109      	bne.n	8003574 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003566:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	029b      	lsls	r3, r3, #10
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	4313      	orrs	r3, r2
 8003572:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	621a      	str	r2, [r3, #32]
}
 800358e:	bf00      	nop
 8003590:	371c      	adds	r7, #28
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	40012c00 	.word	0x40012c00
 80035a0:	40013400 	.word	0x40013400
 80035a4:	40014000 	.word	0x40014000
 80035a8:	40014400 	.word	0x40014400
 80035ac:	40014800 	.word	0x40014800

080035b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	f023 0201 	bic.w	r2, r3, #1
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	011b      	lsls	r3, r3, #4
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f023 030a 	bic.w	r3, r3, #10
 80035ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	621a      	str	r2, [r3, #32]
}
 8003602:	bf00      	nop
 8003604:	371c      	adds	r7, #28
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800360e:	b480      	push	{r7}
 8003610:	b087      	sub	sp, #28
 8003612:	af00      	add	r7, sp, #0
 8003614:	60f8      	str	r0, [r7, #12]
 8003616:	60b9      	str	r1, [r7, #8]
 8003618:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	f023 0210 	bic.w	r2, r3, #16
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003638:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	031b      	lsls	r3, r3, #12
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	4313      	orrs	r3, r2
 8003642:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800364a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	4313      	orrs	r3, r2
 8003654:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	621a      	str	r2, [r3, #32]
}
 8003662:	bf00      	nop
 8003664:	371c      	adds	r7, #28
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800366e:	b480      	push	{r7}
 8003670:	b085      	sub	sp, #20
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003688:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4313      	orrs	r3, r2
 8003690:	f043 0307 	orr.w	r3, r3, #7
 8003694:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	609a      	str	r2, [r3, #8]
}
 800369c:	bf00      	nop
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b087      	sub	sp, #28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
 80036b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	021a      	lsls	r2, r3, #8
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	431a      	orrs	r2, r3
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	609a      	str	r2, [r3, #8]
}
 80036dc:	bf00      	nop
 80036de:	371c      	adds	r7, #28
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d101      	bne.n	8003700 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036fc:	2302      	movs	r3, #2
 80036fe:	e065      	b.n	80037cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a2c      	ldr	r2, [pc, #176]	; (80037d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d004      	beq.n	8003734 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a2b      	ldr	r2, [pc, #172]	; (80037dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d108      	bne.n	8003746 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800373a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800374c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003750:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	4313      	orrs	r3, r2
 800375a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a1b      	ldr	r2, [pc, #108]	; (80037d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d018      	beq.n	80037a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003776:	d013      	beq.n	80037a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a18      	ldr	r2, [pc, #96]	; (80037e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d00e      	beq.n	80037a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a17      	ldr	r2, [pc, #92]	; (80037e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d009      	beq.n	80037a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a12      	ldr	r2, [pc, #72]	; (80037dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d004      	beq.n	80037a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a13      	ldr	r2, [pc, #76]	; (80037e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d10c      	bne.n	80037ba <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3714      	adds	r7, #20
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	40012c00 	.word	0x40012c00
 80037dc:	40013400 	.word	0x40013400
 80037e0:	40000400 	.word	0x40000400
 80037e4:	40000800 	.word	0x40000800
 80037e8:	40014000 	.word	0x40014000

080037ec <LL_ADC_REG_SetSequencerLength>:
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	f023 020f 	bic.w	r2, r3, #15
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	431a      	orrs	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <LL_ADC_IsEnabled>:
{
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b01      	cmp	r3, #1
 8003824:	d101      	bne.n	800382a <LL_ADC_IsEnabled+0x18>
 8003826:	2301      	movs	r3, #1
 8003828:	e000      	b.n	800382c <LL_ADC_IsEnabled+0x1a>
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8003838:	b590      	push	{r4, r7, lr}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003842:	2300      	movs	r3, #0
 8003844:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8003846:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800384a:	f7ff ffe2 	bl	8003812 <LL_ADC_IsEnabled>
 800384e:	4604      	mov	r4, r0
 8003850:	4817      	ldr	r0, [pc, #92]	; (80038b0 <LL_ADC_CommonInit+0x78>)
 8003852:	f7ff ffde 	bl	8003812 <LL_ADC_IsEnabled>
 8003856:	4603      	mov	r3, r0
 8003858:	4323      	orrs	r3, r4
 800385a:	2b00      	cmp	r3, #0
 800385c:	d120      	bne.n	80038a0 <LL_ADC_CommonInit+0x68>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d012      	beq.n	800388c <LL_ADC_CommonInit+0x54>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689a      	ldr	r2, [r3, #8]
 800386a:	4b12      	ldr	r3, [pc, #72]	; (80038b4 <LL_ADC_CommonInit+0x7c>)
 800386c:	4013      	ands	r3, r2
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	6811      	ldr	r1, [r2, #0]
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	6852      	ldr	r2, [r2, #4]
 8003876:	4311      	orrs	r1, r2
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	6892      	ldr	r2, [r2, #8]
 800387c:	4311      	orrs	r1, r2
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	68d2      	ldr	r2, [r2, #12]
 8003882:	430a      	orrs	r2, r1
 8003884:	431a      	orrs	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	609a      	str	r2, [r3, #8]
 800388a:	e00b      	b.n	80038a4 <LL_ADC_CommonInit+0x6c>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	4b08      	ldr	r3, [pc, #32]	; (80038b4 <LL_ADC_CommonInit+0x7c>)
 8003892:	4013      	ands	r3, r2
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	6812      	ldr	r2, [r2, #0]
 8003898:	431a      	orrs	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	609a      	str	r2, [r3, #8]
 800389e:	e001      	b.n	80038a4 <LL_ADC_CommonInit+0x6c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80038a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd90      	pop	{r4, r7, pc}
 80038ae:	bf00      	nop
 80038b0:	50000100 	.word	0x50000100
 80038b4:	ffc030e0 	.word	0xffc030e0

080038b8 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80038c2:	2300      	movs	r3, #0
 80038c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7ff ffa3 	bl	8003812 <LL_ADC_IsEnabled>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d111      	bne.n	80038f6 <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80038da:	f023 0318 	bic.w	r3, r3, #24
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	6811      	ldr	r1, [r2, #0]
 80038e2:	683a      	ldr	r2, [r7, #0]
 80038e4:	6852      	ldr	r2, [r2, #4]
 80038e6:	4311      	orrs	r1, r2
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	6892      	ldr	r2, [r2, #8]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	60da      	str	r2, [r3, #12]
 80038f4:	e001      	b.n	80038fa <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80038fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800390e:	2300      	movs	r3, #0
 8003910:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7ff ff7d 	bl	8003812 <LL_ADC_IsEnabled>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d132      	bne.n	8003984 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d015      	beq.n	8003952 <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	4b1a      	ldr	r3, [pc, #104]	; (8003994 <LL_ADC_REG_Init+0x90>)
 800392c:	4013      	ands	r3, r2
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	6811      	ldr	r1, [r2, #0]
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	6892      	ldr	r2, [r2, #8]
 8003936:	4311      	orrs	r1, r2
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	68d2      	ldr	r2, [r2, #12]
 800393c:	4311      	orrs	r1, r2
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	6912      	ldr	r2, [r2, #16]
 8003942:	4311      	orrs	r1, r2
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	6952      	ldr	r2, [r2, #20]
 8003948:	430a      	orrs	r2, r1
 800394a:	431a      	orrs	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	60da      	str	r2, [r3, #12]
 8003950:	e011      	b.n	8003976 <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68da      	ldr	r2, [r3, #12]
 8003956:	4b0f      	ldr	r3, [pc, #60]	; (8003994 <LL_ADC_REG_Init+0x90>)
 8003958:	4013      	ands	r3, r2
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	6811      	ldr	r1, [r2, #0]
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	68d2      	ldr	r2, [r2, #12]
 8003962:	4311      	orrs	r1, r2
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	6912      	ldr	r2, [r2, #16]
 8003968:	4311      	orrs	r1, r2
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	6952      	ldr	r2, [r2, #20]
 800396e:	430a      	orrs	r2, r1
 8003970:	431a      	orrs	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	4619      	mov	r1, r3
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f7ff ff35 	bl	80037ec <LL_ADC_REG_SetSequencerLength>
 8003982:	e001      	b.n	8003988 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003988:	7bfb      	ldrb	r3, [r7, #15]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	fff0c01c 	.word	0xfff0c01c

08003998 <LL_EXTI_EnableIT_0_31>:
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80039a0:	4b05      	ldr	r3, [pc, #20]	; (80039b8 <LL_EXTI_EnableIT_0_31+0x20>)
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	4904      	ldr	r1, [pc, #16]	; (80039b8 <LL_EXTI_EnableIT_0_31+0x20>)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	600b      	str	r3, [r1, #0]
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	40010400 	.word	0x40010400

080039bc <LL_EXTI_EnableIT_32_63>:
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80039c4:	4b05      	ldr	r3, [pc, #20]	; (80039dc <LL_EXTI_EnableIT_32_63+0x20>)
 80039c6:	6a1a      	ldr	r2, [r3, #32]
 80039c8:	4904      	ldr	r1, [pc, #16]	; (80039dc <LL_EXTI_EnableIT_32_63+0x20>)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	620b      	str	r3, [r1, #32]
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	40010400 	.word	0x40010400

080039e0 <LL_EXTI_DisableIT_0_31>:
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80039e8:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <LL_EXTI_DisableIT_0_31+0x24>)
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	43db      	mvns	r3, r3
 80039f0:	4904      	ldr	r1, [pc, #16]	; (8003a04 <LL_EXTI_DisableIT_0_31+0x24>)
 80039f2:	4013      	ands	r3, r2
 80039f4:	600b      	str	r3, [r1, #0]
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	40010400 	.word	0x40010400

08003a08 <LL_EXTI_DisableIT_32_63>:
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8003a10:	4b06      	ldr	r3, [pc, #24]	; (8003a2c <LL_EXTI_DisableIT_32_63+0x24>)
 8003a12:	6a1a      	ldr	r2, [r3, #32]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	43db      	mvns	r3, r3
 8003a18:	4904      	ldr	r1, [pc, #16]	; (8003a2c <LL_EXTI_DisableIT_32_63+0x24>)
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	620b      	str	r3, [r1, #32]
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	40010400 	.word	0x40010400

08003a30 <LL_EXTI_EnableEvent_0_31>:
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003a38:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	4904      	ldr	r1, [pc, #16]	; (8003a50 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	604b      	str	r3, [r1, #4]
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	40010400 	.word	0x40010400

08003a54 <LL_EXTI_EnableEvent_32_63>:
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8003a5c:	4b05      	ldr	r3, [pc, #20]	; (8003a74 <LL_EXTI_EnableEvent_32_63+0x20>)
 8003a5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a60:	4904      	ldr	r1, [pc, #16]	; (8003a74 <LL_EXTI_EnableEvent_32_63+0x20>)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	40010400 	.word	0x40010400

08003a78 <LL_EXTI_DisableEvent_0_31>:
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003a80:	4b06      	ldr	r3, [pc, #24]	; (8003a9c <LL_EXTI_DisableEvent_0_31+0x24>)
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	43db      	mvns	r3, r3
 8003a88:	4904      	ldr	r1, [pc, #16]	; (8003a9c <LL_EXTI_DisableEvent_0_31+0x24>)
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	604b      	str	r3, [r1, #4]
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	40010400 	.word	0x40010400

08003aa0 <LL_EXTI_DisableEvent_32_63>:
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8003aa8:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <LL_EXTI_DisableEvent_32_63+0x24>)
 8003aaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	43db      	mvns	r3, r3
 8003ab0:	4904      	ldr	r1, [pc, #16]	; (8003ac4 <LL_EXTI_DisableEvent_32_63+0x24>)
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	40010400 	.word	0x40010400

08003ac8 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003ad0:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	4904      	ldr	r1, [pc, #16]	; (8003ae8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	608b      	str	r3, [r1, #8]
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	40010400 	.word	0x40010400

08003aec <LL_EXTI_EnableRisingTrig_32_63>:
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8003af4:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003af6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003af8:	4904      	ldr	r1, [pc, #16]	; (8003b0c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	628b      	str	r3, [r1, #40]	; 0x28
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	40010400 	.word	0x40010400

08003b10 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003b18:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	43db      	mvns	r3, r3
 8003b20:	4904      	ldr	r1, [pc, #16]	; (8003b34 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003b22:	4013      	ands	r3, r2
 8003b24:	608b      	str	r3, [r1, #8]
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	40010400 	.word	0x40010400

08003b38 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8003b40:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8003b42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	43db      	mvns	r3, r3
 8003b48:	4904      	ldr	r1, [pc, #16]	; (8003b5c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	628b      	str	r3, [r1, #40]	; 0x28
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40010400 	.word	0x40010400

08003b60 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8003b68:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003b6a:	68da      	ldr	r2, [r3, #12]
 8003b6c:	4904      	ldr	r1, [pc, #16]	; (8003b80 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	60cb      	str	r3, [r1, #12]
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	40010400 	.word	0x40010400

08003b84 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8003b8c:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b90:	4904      	ldr	r1, [pc, #16]	; (8003ba4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	40010400 	.word	0x40010400

08003ba8 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003bb0:	4b06      	ldr	r3, [pc, #24]	; (8003bcc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003bb2:	68da      	ldr	r2, [r3, #12]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	43db      	mvns	r3, r3
 8003bb8:	4904      	ldr	r1, [pc, #16]	; (8003bcc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003bba:	4013      	ands	r3, r2
 8003bbc:	60cb      	str	r3, [r1, #12]
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	40010400 	.word	0x40010400

08003bd0 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8003bd8:	4b06      	ldr	r3, [pc, #24]	; (8003bf4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8003bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	43db      	mvns	r3, r3
 8003be0:	4904      	ldr	r1, [pc, #16]	; (8003bf4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8003be2:	4013      	ands	r3, r2
 8003be4:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	40010400 	.word	0x40010400

08003bf8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8003c00:	2300      	movs	r3, #0
 8003c02:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	7a1b      	ldrb	r3, [r3, #8]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 80d3 	beq.w	8003db4 <LL_EXTI_Init+0x1bc>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d063      	beq.n	8003cde <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	7a5b      	ldrb	r3, [r3, #9]
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d01c      	beq.n	8003c58 <LL_EXTI_Init+0x60>
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	dc25      	bgt.n	8003c6e <LL_EXTI_Init+0x76>
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d002      	beq.n	8003c2c <LL_EXTI_Init+0x34>
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d00b      	beq.n	8003c42 <LL_EXTI_Init+0x4a>
 8003c2a:	e020      	b.n	8003c6e <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7ff ff21 	bl	8003a78 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7ff feac 	bl	8003998 <LL_EXTI_EnableIT_0_31>
          break;
 8003c40:	e018      	b.n	8003c74 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7ff feca 	bl	80039e0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7ff feed 	bl	8003a30 <LL_EXTI_EnableEvent_0_31>
          break;
 8003c56:	e00d      	b.n	8003c74 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7ff fe9b 	bl	8003998 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7ff fee2 	bl	8003a30 <LL_EXTI_EnableEvent_0_31>
          break;
 8003c6c:	e002      	b.n	8003c74 <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	60fb      	str	r3, [r7, #12]
          break;
 8003c72:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	7a9b      	ldrb	r3, [r3, #10]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d030      	beq.n	8003cde <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	7a9b      	ldrb	r3, [r3, #10]
 8003c80:	2b03      	cmp	r3, #3
 8003c82:	d01c      	beq.n	8003cbe <LL_EXTI_Init+0xc6>
 8003c84:	2b03      	cmp	r3, #3
 8003c86:	dc25      	bgt.n	8003cd4 <LL_EXTI_Init+0xdc>
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d002      	beq.n	8003c92 <LL_EXTI_Init+0x9a>
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d00b      	beq.n	8003ca8 <LL_EXTI_Init+0xb0>
 8003c90:	e020      	b.n	8003cd4 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7ff ff86 	bl	8003ba8 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7ff ff11 	bl	8003ac8 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8003ca6:	e01b      	b.n	8003ce0 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7ff ff2f 	bl	8003b10 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7ff ff52 	bl	8003b60 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003cbc:	e010      	b.n	8003ce0 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7ff ff00 	bl	8003ac8 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7ff ff47 	bl	8003b60 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003cd2:	e005      	b.n	8003ce0 <LL_EXTI_Init+0xe8>
          default:
            status |= 0x02u;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f043 0302 	orr.w	r3, r3, #2
 8003cda:	60fb      	str	r3, [r7, #12]
            break;
 8003cdc:	e000      	b.n	8003ce0 <LL_EXTI_Init+0xe8>
        }
      }
 8003cde:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d07a      	beq.n	8003dde <LL_EXTI_Init+0x1e6>
    {
      switch (EXTI_InitStruct->Mode)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	7a5b      	ldrb	r3, [r3, #9]
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d01c      	beq.n	8003d2a <LL_EXTI_Init+0x132>
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	dc25      	bgt.n	8003d40 <LL_EXTI_Init+0x148>
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d002      	beq.n	8003cfe <LL_EXTI_Init+0x106>
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d00b      	beq.n	8003d14 <LL_EXTI_Init+0x11c>
 8003cfc:	e020      	b.n	8003d40 <LL_EXTI_Init+0x148>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7ff fecc 	bl	8003aa0 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff fe55 	bl	80039bc <LL_EXTI_EnableIT_32_63>
          break;
 8003d12:	e01a      	b.n	8003d4a <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7ff fe75 	bl	8003a08 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7ff fe96 	bl	8003a54 <LL_EXTI_EnableEvent_32_63>
          break;
 8003d28:	e00f      	b.n	8003d4a <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff fe44 	bl	80039bc <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff fe8b 	bl	8003a54 <LL_EXTI_EnableEvent_32_63>
          break;
 8003d3e:	e004      	b.n	8003d4a <LL_EXTI_Init+0x152>
        default:
          status |= 0x04u;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f043 0304 	orr.w	r3, r3, #4
 8003d46:	60fb      	str	r3, [r7, #12]
          break;
 8003d48:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	7a9b      	ldrb	r3, [r3, #10]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d045      	beq.n	8003dde <LL_EXTI_Init+0x1e6>
      {
        switch (EXTI_InitStruct->Trigger)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	7a9b      	ldrb	r3, [r3, #10]
 8003d56:	2b03      	cmp	r3, #3
 8003d58:	d01c      	beq.n	8003d94 <LL_EXTI_Init+0x19c>
 8003d5a:	2b03      	cmp	r3, #3
 8003d5c:	dc25      	bgt.n	8003daa <LL_EXTI_Init+0x1b2>
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d002      	beq.n	8003d68 <LL_EXTI_Init+0x170>
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d00b      	beq.n	8003d7e <LL_EXTI_Init+0x186>
 8003d66:	e020      	b.n	8003daa <LL_EXTI_Init+0x1b2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7ff ff2f 	bl	8003bd0 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7ff feb8 	bl	8003aec <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8003d7c:	e030      	b.n	8003de0 <LL_EXTI_Init+0x1e8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7ff fed8 	bl	8003b38 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff fef9 	bl	8003b84 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8003d92:	e025      	b.n	8003de0 <LL_EXTI_Init+0x1e8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7ff fea7 	bl	8003aec <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7ff feee 	bl	8003b84 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8003da8:	e01a      	b.n	8003de0 <LL_EXTI_Init+0x1e8>
          default:
            status |= 0x05u;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f043 0305 	orr.w	r3, r3, #5
 8003db0:	60fb      	str	r3, [r7, #12]
            break;
 8003db2:	e015      	b.n	8003de0 <LL_EXTI_Init+0x1e8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff fe11 	bl	80039e0 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7ff fe58 	bl	8003a78 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7ff fe1b 	bl	8003a08 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7ff fe62 	bl	8003aa0 <LL_EXTI_DisableEvent_32_63>
 8003ddc:	e000      	b.n	8003de0 <LL_EXTI_Init+0x1e8>
      }
 8003dde:	bf00      	nop
  }

  return status;
 8003de0:	68fb      	ldr	r3, [r7, #12]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <LL_GPIO_SetPinMode>:
{
 8003dea:	b480      	push	{r7}
 8003dec:	b08b      	sub	sp, #44	; 0x2c
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	60f8      	str	r0, [r7, #12]
 8003df2:	60b9      	str	r1, [r7, #8]
 8003df4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	fa93 f3a3 	rbit	r3, r3
 8003e04:	613b      	str	r3, [r7, #16]
  return result;
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8003e10:	2320      	movs	r3, #32
 8003e12:	e003      	b.n	8003e1c <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	fab3 f383 	clz	r3, r3
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	2103      	movs	r1, #3
 8003e20:	fa01 f303 	lsl.w	r3, r1, r3
 8003e24:	43db      	mvns	r3, r3
 8003e26:	401a      	ands	r2, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	fa93 f3a3 	rbit	r3, r3
 8003e32:	61fb      	str	r3, [r7, #28]
  return result;
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8003e3e:	2320      	movs	r3, #32
 8003e40:	e003      	b.n	8003e4a <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	fab3 f383 	clz	r3, r3
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	6879      	ldr	r1, [r7, #4]
 8003e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e52:	431a      	orrs	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	601a      	str	r2, [r3, #0]
}
 8003e58:	bf00      	nop
 8003e5a:	372c      	adds	r7, #44	; 0x2c
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <LL_GPIO_SetPinOutputType>:
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	43db      	mvns	r3, r3
 8003e78:	401a      	ands	r2, r3
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	fb01 f303 	mul.w	r3, r1, r3
 8003e82:	431a      	orrs	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	605a      	str	r2, [r3, #4]
}
 8003e88:	bf00      	nop
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <LL_GPIO_SetPinSpeed>:
{
 8003e94:	b480      	push	{r7}
 8003e96:	b08b      	sub	sp, #44	; 0x2c
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	fa93 f3a3 	rbit	r3, r3
 8003eae:	613b      	str	r3, [r7, #16]
  return result;
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8003eba:	2320      	movs	r3, #32
 8003ebc:	e003      	b.n	8003ec6 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	fab3 f383 	clz	r3, r3
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	2103      	movs	r1, #3
 8003eca:	fa01 f303 	lsl.w	r3, r1, r3
 8003ece:	43db      	mvns	r3, r3
 8003ed0:	401a      	ands	r2, r3
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	fa93 f3a3 	rbit	r3, r3
 8003edc:	61fb      	str	r3, [r7, #28]
  return result;
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d101      	bne.n	8003eec <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8003ee8:	2320      	movs	r3, #32
 8003eea:	e003      	b.n	8003ef4 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	fab3 f383 	clz	r3, r3
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8003efc:	431a      	orrs	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	609a      	str	r2, [r3, #8]
}
 8003f02:	bf00      	nop
 8003f04:	372c      	adds	r7, #44	; 0x2c
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <LL_GPIO_SetPinPull>:
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b08b      	sub	sp, #44	; 0x2c
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	60f8      	str	r0, [r7, #12]
 8003f16:	60b9      	str	r1, [r7, #8]
 8003f18:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	fa93 f3a3 	rbit	r3, r3
 8003f28:	613b      	str	r3, [r7, #16]
  return result;
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8003f34:	2320      	movs	r3, #32
 8003f36:	e003      	b.n	8003f40 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	fab3 f383 	clz	r3, r3
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	2103      	movs	r1, #3
 8003f44:	fa01 f303 	lsl.w	r3, r1, r3
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	401a      	ands	r2, r3
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f50:	6a3b      	ldr	r3, [r7, #32]
 8003f52:	fa93 f3a3 	rbit	r3, r3
 8003f56:	61fb      	str	r3, [r7, #28]
  return result;
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8003f62:	2320      	movs	r3, #32
 8003f64:	e003      	b.n	8003f6e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	fab3 f383 	clz	r3, r3
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	fa01 f303 	lsl.w	r3, r1, r3
 8003f76:	431a      	orrs	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	60da      	str	r2, [r3, #12]
}
 8003f7c:	bf00      	nop
 8003f7e:	372c      	adds	r7, #44	; 0x2c
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <LL_GPIO_SetAFPin_0_7>:
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b08b      	sub	sp, #44	; 0x2c
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6a1a      	ldr	r2, [r3, #32]
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	fa93 f3a3 	rbit	r3, r3
 8003fa2:	613b      	str	r3, [r7, #16]
  return result;
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8003fae:	2320      	movs	r3, #32
 8003fb0:	e003      	b.n	8003fba <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	fab3 f383 	clz	r3, r3
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	210f      	movs	r1, #15
 8003fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc2:	43db      	mvns	r3, r3
 8003fc4:	401a      	ands	r2, r3
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fca:	6a3b      	ldr	r3, [r7, #32]
 8003fcc:	fa93 f3a3 	rbit	r3, r3
 8003fd0:	61fb      	str	r3, [r7, #28]
  return result;
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d101      	bne.n	8003fe0 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8003fdc:	2320      	movs	r3, #32
 8003fde:	e003      	b.n	8003fe8 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe2:	fab3 f383 	clz	r3, r3
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	6879      	ldr	r1, [r7, #4]
 8003fec:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	621a      	str	r2, [r3, #32]
}
 8003ff6:	bf00      	nop
 8003ff8:	372c      	adds	r7, #44	; 0x2c
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <LL_GPIO_SetAFPin_8_15>:
{
 8004002:	b480      	push	{r7}
 8004004:	b08b      	sub	sp, #44	; 0x2c
 8004006:	af00      	add	r7, sp, #0
 8004008:	60f8      	str	r0, [r7, #12]
 800400a:	60b9      	str	r1, [r7, #8]
 800400c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	0a1b      	lsrs	r3, r3, #8
 8004016:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	fa93 f3a3 	rbit	r3, r3
 800401e:	613b      	str	r3, [r7, #16]
  return result;
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800402a:	2320      	movs	r3, #32
 800402c:	e003      	b.n	8004036 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	fab3 f383 	clz	r3, r3
 8004034:	b2db      	uxtb	r3, r3
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	210f      	movs	r1, #15
 800403a:	fa01 f303 	lsl.w	r3, r1, r3
 800403e:	43db      	mvns	r3, r3
 8004040:	401a      	ands	r2, r3
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	0a1b      	lsrs	r3, r3, #8
 8004046:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	fa93 f3a3 	rbit	r3, r3
 800404e:	61fb      	str	r3, [r7, #28]
  return result;
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800405a:	2320      	movs	r3, #32
 800405c:	e003      	b.n	8004066 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004060:	fab3 f383 	clz	r3, r3
 8004064:	b2db      	uxtb	r3, r3
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	fa01 f303 	lsl.w	r3, r1, r3
 800406e:	431a      	orrs	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004074:	bf00      	nop
 8004076:	372c      	adds	r7, #44	; 0x2c
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b088      	sub	sp, #32
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	fa93 f3a3 	rbit	r3, r3
 8004096:	60fb      	str	r3, [r7, #12]
  return result;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <LL_GPIO_Init+0x26>
    return 32U;
 80040a2:	2320      	movs	r3, #32
 80040a4:	e003      	b.n	80040ae <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	fab3 f383 	clz	r3, r3
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80040b0:	e048      	b.n	8004144 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	2101      	movs	r1, #1
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	fa01 f303 	lsl.w	r3, r1, r3
 80040be:	4013      	ands	r3, r2
 80040c0:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d03a      	beq.n	800413e <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d003      	beq.n	80040d8 <LL_GPIO_Init+0x58>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d10e      	bne.n	80040f6 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	461a      	mov	r2, r3
 80040de:	69b9      	ldr	r1, [r7, #24]
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f7ff fed7 	bl	8003e94 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	6819      	ldr	r1, [r3, #0]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	461a      	mov	r2, r3
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f7ff feb7 	bl	8003e64 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	461a      	mov	r2, r3
 80040fc:	69b9      	ldr	r1, [r7, #24]
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f7ff ff05 	bl	8003f0e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	2b02      	cmp	r3, #2
 800410a:	d111      	bne.n	8004130 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	2bff      	cmp	r3, #255	; 0xff
 8004110:	d807      	bhi.n	8004122 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	461a      	mov	r2, r3
 8004118:	69b9      	ldr	r1, [r7, #24]
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7ff ff34 	bl	8003f88 <LL_GPIO_SetAFPin_0_7>
 8004120:	e006      	b.n	8004130 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	461a      	mov	r2, r3
 8004128:	69b9      	ldr	r1, [r7, #24]
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7ff ff69 	bl	8004002 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	461a      	mov	r2, r3
 8004136:	69b9      	ldr	r1, [r7, #24]
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f7ff fe56 	bl	8003dea <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	3301      	adds	r3, #1
 8004142:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	fa22 f303 	lsr.w	r3, r2, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1af      	bne.n	80040b2 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3720      	adds	r7, #32
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <LL_TIM_SetPrescaler>:
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <LL_TIM_SetAutoReload>:
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <LL_TIM_SetRepetitionCounter>:
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	f043 0201 	orr.w	r2, r3, #1
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	615a      	str	r2, [r3, #20]
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a39      	ldr	r2, [pc, #228]	; (80042c8 <LL_TIM_Init+0xf8>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d00f      	beq.n	8004208 <LL_TIM_Init+0x38>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ee:	d00b      	beq.n	8004208 <LL_TIM_Init+0x38>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a36      	ldr	r2, [pc, #216]	; (80042cc <LL_TIM_Init+0xfc>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d007      	beq.n	8004208 <LL_TIM_Init+0x38>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a35      	ldr	r2, [pc, #212]	; (80042d0 <LL_TIM_Init+0x100>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d003      	beq.n	8004208 <LL_TIM_Init+0x38>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a34      	ldr	r2, [pc, #208]	; (80042d4 <LL_TIM_Init+0x104>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d106      	bne.n	8004216 <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	4313      	orrs	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a2b      	ldr	r2, [pc, #172]	; (80042c8 <LL_TIM_Init+0xf8>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d01b      	beq.n	8004256 <LL_TIM_Init+0x86>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004224:	d017      	beq.n	8004256 <LL_TIM_Init+0x86>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a28      	ldr	r2, [pc, #160]	; (80042cc <LL_TIM_Init+0xfc>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d013      	beq.n	8004256 <LL_TIM_Init+0x86>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a27      	ldr	r2, [pc, #156]	; (80042d0 <LL_TIM_Init+0x100>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d00f      	beq.n	8004256 <LL_TIM_Init+0x86>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a26      	ldr	r2, [pc, #152]	; (80042d4 <LL_TIM_Init+0x104>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d00b      	beq.n	8004256 <LL_TIM_Init+0x86>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a25      	ldr	r2, [pc, #148]	; (80042d8 <LL_TIM_Init+0x108>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d007      	beq.n	8004256 <LL_TIM_Init+0x86>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a24      	ldr	r2, [pc, #144]	; (80042dc <LL_TIM_Init+0x10c>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d003      	beq.n	8004256 <LL_TIM_Init+0x86>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a23      	ldr	r2, [pc, #140]	; (80042e0 <LL_TIM_Init+0x110>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d106      	bne.n	8004264 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	4313      	orrs	r3, r2
 8004262:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	4619      	mov	r1, r3
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff ff81 	bl	8004178 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	881b      	ldrh	r3, [r3, #0]
 800427a:	4619      	mov	r1, r3
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f7ff ff6d 	bl	800415c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a10      	ldr	r2, [pc, #64]	; (80042c8 <LL_TIM_Init+0xf8>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d00f      	beq.n	80042aa <LL_TIM_Init+0xda>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a11      	ldr	r2, [pc, #68]	; (80042d4 <LL_TIM_Init+0x104>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d00b      	beq.n	80042aa <LL_TIM_Init+0xda>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a10      	ldr	r2, [pc, #64]	; (80042d8 <LL_TIM_Init+0x108>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d007      	beq.n	80042aa <LL_TIM_Init+0xda>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a0f      	ldr	r2, [pc, #60]	; (80042dc <LL_TIM_Init+0x10c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d003      	beq.n	80042aa <LL_TIM_Init+0xda>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a0e      	ldr	r2, [pc, #56]	; (80042e0 <LL_TIM_Init+0x110>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d105      	bne.n	80042b6 <LL_TIM_Init+0xe6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	4619      	mov	r1, r3
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f7ff ff6f 	bl	8004194 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7ff ff7a 	bl	80041b0 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	40012c00 	.word	0x40012c00
 80042cc:	40000400 	.word	0x40000400
 80042d0:	40000800 	.word	0x40000800
 80042d4:	40013400 	.word	0x40013400
 80042d8:	40014000 	.word	0x40014000
 80042dc:	40014400 	.word	0x40014400
 80042e0:	40014800 	.word	0x40014800

080042e4 <__libc_init_array>:
 80042e4:	b570      	push	{r4, r5, r6, lr}
 80042e6:	4d0d      	ldr	r5, [pc, #52]	; (800431c <__libc_init_array+0x38>)
 80042e8:	4c0d      	ldr	r4, [pc, #52]	; (8004320 <__libc_init_array+0x3c>)
 80042ea:	1b64      	subs	r4, r4, r5
 80042ec:	10a4      	asrs	r4, r4, #2
 80042ee:	2600      	movs	r6, #0
 80042f0:	42a6      	cmp	r6, r4
 80042f2:	d109      	bne.n	8004308 <__libc_init_array+0x24>
 80042f4:	4d0b      	ldr	r5, [pc, #44]	; (8004324 <__libc_init_array+0x40>)
 80042f6:	4c0c      	ldr	r4, [pc, #48]	; (8004328 <__libc_init_array+0x44>)
 80042f8:	f000 f820 	bl	800433c <_init>
 80042fc:	1b64      	subs	r4, r4, r5
 80042fe:	10a4      	asrs	r4, r4, #2
 8004300:	2600      	movs	r6, #0
 8004302:	42a6      	cmp	r6, r4
 8004304:	d105      	bne.n	8004312 <__libc_init_array+0x2e>
 8004306:	bd70      	pop	{r4, r5, r6, pc}
 8004308:	f855 3b04 	ldr.w	r3, [r5], #4
 800430c:	4798      	blx	r3
 800430e:	3601      	adds	r6, #1
 8004310:	e7ee      	b.n	80042f0 <__libc_init_array+0xc>
 8004312:	f855 3b04 	ldr.w	r3, [r5], #4
 8004316:	4798      	blx	r3
 8004318:	3601      	adds	r6, #1
 800431a:	e7f2      	b.n	8004302 <__libc_init_array+0x1e>
 800431c:	08004364 	.word	0x08004364
 8004320:	08004364 	.word	0x08004364
 8004324:	08004364 	.word	0x08004364
 8004328:	08004368 	.word	0x08004368

0800432c <memset>:
 800432c:	4402      	add	r2, r0
 800432e:	4603      	mov	r3, r0
 8004330:	4293      	cmp	r3, r2
 8004332:	d100      	bne.n	8004336 <memset+0xa>
 8004334:	4770      	bx	lr
 8004336:	f803 1b01 	strb.w	r1, [r3], #1
 800433a:	e7f9      	b.n	8004330 <memset+0x4>

0800433c <_init>:
 800433c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433e:	bf00      	nop
 8004340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004342:	bc08      	pop	{r3}
 8004344:	469e      	mov	lr, r3
 8004346:	4770      	bx	lr

08004348 <_fini>:
 8004348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800434a:	bf00      	nop
 800434c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800434e:	bc08      	pop	{r3}
 8004350:	469e      	mov	lr, r3
 8004352:	4770      	bx	lr
