
Zoetrop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048f0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004ac8  08004ac8  00014ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004af0  08004af0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004af0  08004af0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004af0  08004af0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004af0  08004af0  00014af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004af4  08004af4  00014af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004af8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  08004b04  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08004b04  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c82  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002763  00000000  00000000  00031cbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  00034428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001050  00000000  00000000  000355a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000045c2  00000000  00000000  000365f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000110c0  00000000  00000000  0003abb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddf9a  00000000  00000000  0004bc72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00129c0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049e0  00000000  00000000  00129c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004ab0 	.word	0x08004ab0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004ab0 	.word	0x08004ab0

08000218 <encoder_measureVelocity>:
	LL_EXTI_EnableIT_0_31 (ENC_EXTI);
}

//measures velocity in rad/s
void encoder_measureVelocity()
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
	uint32_t time = timers_getVelocityTimer();
 800021e:	f001 f875 	bl	800130c <timers_getVelocityTimer>
 8000222:	6078      	str	r0, [r7, #4]
	timers_resetVeloctiyTimer();
 8000224:	f001 f87b 	bl	800131e <timers_resetVeloctiyTimer>
	currentVelocity = (float)time;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	ee07 3a90 	vmov	s15, r3
 800022e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000232:	4b0a      	ldr	r3, [pc, #40]	; (800025c <encoder_measureVelocity+0x44>)
 8000234:	edc3 7a00 	vstr	s15, [r3]
	currentVelocity = PULSE_NUMBER * PIx2 / (currentVelocity * TIMER_FREQUENCY);
 8000238:	4b08      	ldr	r3, [pc, #32]	; (800025c <encoder_measureVelocity+0x44>)
 800023a:	edd3 7a00 	vldr	s15, [r3]
 800023e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000260 <encoder_measureVelocity+0x48>
 8000242:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000246:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000264 <encoder_measureVelocity+0x4c>
 800024a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800024e:	4b03      	ldr	r3, [pc, #12]	; (800025c <encoder_measureVelocity+0x44>)
 8000250:	edc3 7a00 	vstr	s15, [r3]
}
 8000254:	bf00      	nop
 8000256:	3708      	adds	r7, #8
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	20000028 	.word	0x20000028
 8000260:	47c35000 	.word	0x47c35000
 8000264:	4316cbe4 	.word	0x4316cbe4

08000268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800026c:	4b04      	ldr	r3, [pc, #16]	; (8000280 <__NVIC_GetPriorityGrouping+0x18>)
 800026e:	68db      	ldr	r3, [r3, #12]
 8000270:	0a1b      	lsrs	r3, r3, #8
 8000272:	f003 0307 	and.w	r3, r3, #7
}
 8000276:	4618      	mov	r0, r3
 8000278:	46bd      	mov	sp, r7
 800027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027e:	4770      	bx	lr
 8000280:	e000ed00 	.word	0xe000ed00

08000284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000292:	2b00      	cmp	r3, #0
 8000294:	db0b      	blt.n	80002ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	f003 021f 	and.w	r2, r3, #31
 800029c:	4907      	ldr	r1, [pc, #28]	; (80002bc <__NVIC_EnableIRQ+0x38>)
 800029e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a2:	095b      	lsrs	r3, r3, #5
 80002a4:	2001      	movs	r0, #1
 80002a6:	fa00 f202 	lsl.w	r2, r0, r2
 80002aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002ae:	bf00      	nop
 80002b0:	370c      	adds	r7, #12
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	e000e100 	.word	0xe000e100

080002c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	6039      	str	r1, [r7, #0]
 80002ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	db0a      	blt.n	80002ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d4:	683b      	ldr	r3, [r7, #0]
 80002d6:	b2da      	uxtb	r2, r3
 80002d8:	490c      	ldr	r1, [pc, #48]	; (800030c <__NVIC_SetPriority+0x4c>)
 80002da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002de:	0112      	lsls	r2, r2, #4
 80002e0:	b2d2      	uxtb	r2, r2
 80002e2:	440b      	add	r3, r1
 80002e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002e8:	e00a      	b.n	8000300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	b2da      	uxtb	r2, r3
 80002ee:	4908      	ldr	r1, [pc, #32]	; (8000310 <__NVIC_SetPriority+0x50>)
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	f003 030f 	and.w	r3, r3, #15
 80002f6:	3b04      	subs	r3, #4
 80002f8:	0112      	lsls	r2, r2, #4
 80002fa:	b2d2      	uxtb	r2, r2
 80002fc:	440b      	add	r3, r1
 80002fe:	761a      	strb	r2, [r3, #24]
}
 8000300:	bf00      	nop
 8000302:	370c      	adds	r7, #12
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr
 800030c:	e000e100 	.word	0xe000e100
 8000310:	e000ed00 	.word	0xe000ed00

08000314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000314:	b480      	push	{r7}
 8000316:	b089      	sub	sp, #36	; 0x24
 8000318:	af00      	add	r7, sp, #0
 800031a:	60f8      	str	r0, [r7, #12]
 800031c:	60b9      	str	r1, [r7, #8]
 800031e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	f003 0307 	and.w	r3, r3, #7
 8000326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000328:	69fb      	ldr	r3, [r7, #28]
 800032a:	f1c3 0307 	rsb	r3, r3, #7
 800032e:	2b04      	cmp	r3, #4
 8000330:	bf28      	it	cs
 8000332:	2304      	movcs	r3, #4
 8000334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000336:	69fb      	ldr	r3, [r7, #28]
 8000338:	3304      	adds	r3, #4
 800033a:	2b06      	cmp	r3, #6
 800033c:	d902      	bls.n	8000344 <NVIC_EncodePriority+0x30>
 800033e:	69fb      	ldr	r3, [r7, #28]
 8000340:	3b03      	subs	r3, #3
 8000342:	e000      	b.n	8000346 <NVIC_EncodePriority+0x32>
 8000344:	2300      	movs	r3, #0
 8000346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000348:	f04f 32ff 	mov.w	r2, #4294967295
 800034c:	69bb      	ldr	r3, [r7, #24]
 800034e:	fa02 f303 	lsl.w	r3, r2, r3
 8000352:	43da      	mvns	r2, r3
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	401a      	ands	r2, r3
 8000358:	697b      	ldr	r3, [r7, #20]
 800035a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800035c:	f04f 31ff 	mov.w	r1, #4294967295
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	fa01 f303 	lsl.w	r3, r1, r3
 8000366:	43d9      	mvns	r1, r3
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800036c:	4313      	orrs	r3, r2
         );
}
 800036e:	4618      	mov	r0, r3
 8000370:	3724      	adds	r7, #36	; 0x24
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr

0800037a <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 800037a:	b480      	push	{r7}
 800037c:	b083      	sub	sp, #12
 800037e:	af00      	add	r7, sp, #0
 8000380:	6078      	str	r0, [r7, #4]
 8000382:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800038a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800038e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000392:	683a      	ldr	r2, [r7, #0]
 8000394:	431a      	orrs	r2, r3
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_CFGR2_GCOMP_Pos);
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	691b      	ldr	r3, [r3, #16]
 80003a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003a4:	683a      	ldr	r2, [r7, #0]
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d002      	beq.n	80003b0 <LL_ADC_SetGainCompensation+0x36>
 80003aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80003ae:	e000      	b.n	80003b2 <LL_ADC_SetGainCompensation+0x38>
 80003b0:	2200      	movs	r2, #0
 80003b2:	431a      	orrs	r2, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	611a      	str	r2, [r3, #16]
}
 80003b8:	bf00      	nop
 80003ba:	370c      	adds	r7, #12
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr

080003c4 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b087      	sub	sp, #28
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	60f8      	str	r0, [r7, #12]
 80003cc:	60b9      	str	r1, [r7, #8]
 80003ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	3330      	adds	r3, #48	; 0x30
 80003d4:	461a      	mov	r2, r3
 80003d6:	68bb      	ldr	r3, [r7, #8]
 80003d8:	0a1b      	lsrs	r3, r3, #8
 80003da:	009b      	lsls	r3, r3, #2
 80003dc:	f003 030c 	and.w	r3, r3, #12
 80003e0:	4413      	add	r3, r2
 80003e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	681a      	ldr	r2, [r3, #0]
 80003e8:	68bb      	ldr	r3, [r7, #8]
 80003ea:	f003 031f 	and.w	r3, r3, #31
 80003ee:	211f      	movs	r1, #31
 80003f0:	fa01 f303 	lsl.w	r3, r1, r3
 80003f4:	43db      	mvns	r3, r3
 80003f6:	401a      	ands	r2, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	0e9b      	lsrs	r3, r3, #26
 80003fc:	f003 011f 	and.w	r1, r3, #31
 8000400:	68bb      	ldr	r3, [r7, #8]
 8000402:	f003 031f 	and.w	r3, r3, #31
 8000406:	fa01 f303 	lsl.w	r3, r1, r3
 800040a:	431a      	orrs	r2, r3
 800040c:	697b      	ldr	r3, [r7, #20]
 800040e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000410:	bf00      	nop
 8000412:	371c      	adds	r7, #28
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr

0800041c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800041c:	b480      	push	{r7}
 800041e:	b087      	sub	sp, #28
 8000420:	af00      	add	r7, sp, #0
 8000422:	60f8      	str	r0, [r7, #12]
 8000424:	60b9      	str	r1, [r7, #8]
 8000426:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	3314      	adds	r3, #20
 800042c:	461a      	mov	r2, r3
 800042e:	68bb      	ldr	r3, [r7, #8]
 8000430:	0e5b      	lsrs	r3, r3, #25
 8000432:	009b      	lsls	r3, r3, #2
 8000434:	f003 0304 	and.w	r3, r3, #4
 8000438:	4413      	add	r3, r2
 800043a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800043c:	697b      	ldr	r3, [r7, #20]
 800043e:	681a      	ldr	r2, [r3, #0]
 8000440:	68bb      	ldr	r3, [r7, #8]
 8000442:	0d1b      	lsrs	r3, r3, #20
 8000444:	f003 031f 	and.w	r3, r3, #31
 8000448:	2107      	movs	r1, #7
 800044a:	fa01 f303 	lsl.w	r3, r1, r3
 800044e:	43db      	mvns	r3, r3
 8000450:	401a      	ands	r2, r3
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	0d1b      	lsrs	r3, r3, #20
 8000456:	f003 031f 	and.w	r3, r3, #31
 800045a:	6879      	ldr	r1, [r7, #4]
 800045c:	fa01 f303 	lsl.w	r3, r1, r3
 8000460:	431a      	orrs	r2, r3
 8000462:	697b      	ldr	r3, [r7, #20]
 8000464:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000466:	bf00      	nop
 8000468:	371c      	adds	r7, #28
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
	...

08000474 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	60f8      	str	r0, [r7, #12]
 800047c:	60b9      	str	r1, [r7, #8]
 800047e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4a0f      	ldr	r2, [pc, #60]	; (80004c0 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d10a      	bne.n	800049e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800048e:	68bb      	ldr	r3, [r7, #8]
 8000490:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000494:	431a      	orrs	r2, r3
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 800049c:	e00a      	b.n	80004b4 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80004aa:	43db      	mvns	r3, r3
 80004ac:	401a      	ands	r2, r3
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80004b4:	bf00      	nop
 80004b6:	3714      	adds	r7, #20
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr
 80004c0:	407f0000 	.word	0x407f0000

080004c4 <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_GRP_INJECTED
  *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	691b      	ldr	r3, [r3, #16]
 80004d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80004d6:	f023 0303 	bic.w	r3, r3, #3
 80004da:	683a      	ldr	r2, [r7, #0]
 80004dc:	431a      	orrs	r2, r3
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	611a      	str	r2, [r3, #16]
}
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr

080004ee <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80004ee:	b480      	push	{r7}
 80004f0:	b083      	sub	sp, #12
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	689b      	ldr	r3, [r3, #8]
 80004fa:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80004fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	6093      	str	r3, [r2, #8]
}
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr

08000512 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000512:	b480      	push	{r7}
 8000514:	b083      	sub	sp, #12
 8000516:	af00      	add	r7, sp, #0
 8000518:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	689b      	ldr	r3, [r3, #8]
 800051e:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000522:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000526:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr

0800053a <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 800053a:	b480      	push	{r7}
 800053c:	b083      	sub	sp, #12
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	601a      	str	r2, [r3, #0]
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
	...

0800055c <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	2b01      	cmp	r3, #1
 800056a:	d02e      	beq.n	80005ca <LL_TIM_OC_DisableFast+0x6e>
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	2b04      	cmp	r3, #4
 8000570:	d029      	beq.n	80005c6 <LL_TIM_OC_DisableFast+0x6a>
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	2b10      	cmp	r3, #16
 8000576:	d024      	beq.n	80005c2 <LL_TIM_OC_DisableFast+0x66>
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	2b40      	cmp	r3, #64	; 0x40
 800057c:	d01f      	beq.n	80005be <LL_TIM_OC_DisableFast+0x62>
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000584:	d019      	beq.n	80005ba <LL_TIM_OC_DisableFast+0x5e>
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800058c:	d013      	beq.n	80005b6 <LL_TIM_OC_DisableFast+0x5a>
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000594:	d00d      	beq.n	80005b2 <LL_TIM_OC_DisableFast+0x56>
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800059c:	d007      	beq.n	80005ae <LL_TIM_OC_DisableFast+0x52>
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005a4:	d101      	bne.n	80005aa <LL_TIM_OC_DisableFast+0x4e>
 80005a6:	2308      	movs	r3, #8
 80005a8:	e010      	b.n	80005cc <LL_TIM_OC_DisableFast+0x70>
 80005aa:	2309      	movs	r3, #9
 80005ac:	e00e      	b.n	80005cc <LL_TIM_OC_DisableFast+0x70>
 80005ae:	2307      	movs	r3, #7
 80005b0:	e00c      	b.n	80005cc <LL_TIM_OC_DisableFast+0x70>
 80005b2:	2306      	movs	r3, #6
 80005b4:	e00a      	b.n	80005cc <LL_TIM_OC_DisableFast+0x70>
 80005b6:	2305      	movs	r3, #5
 80005b8:	e008      	b.n	80005cc <LL_TIM_OC_DisableFast+0x70>
 80005ba:	2304      	movs	r3, #4
 80005bc:	e006      	b.n	80005cc <LL_TIM_OC_DisableFast+0x70>
 80005be:	2303      	movs	r3, #3
 80005c0:	e004      	b.n	80005cc <LL_TIM_OC_DisableFast+0x70>
 80005c2:	2302      	movs	r3, #2
 80005c4:	e002      	b.n	80005cc <LL_TIM_OC_DisableFast+0x70>
 80005c6:	2301      	movs	r3, #1
 80005c8:	e000      	b.n	80005cc <LL_TIM_OC_DisableFast+0x70>
 80005ca:	2300      	movs	r3, #0
 80005cc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	3318      	adds	r3, #24
 80005d2:	4619      	mov	r1, r3
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	4a0b      	ldr	r2, [pc, #44]	; (8000604 <LL_TIM_OC_DisableFast+0xa8>)
 80005d8:	5cd3      	ldrb	r3, [r2, r3]
 80005da:	440b      	add	r3, r1
 80005dc:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	4908      	ldr	r1, [pc, #32]	; (8000608 <LL_TIM_OC_DisableFast+0xac>)
 80005e6:	5ccb      	ldrb	r3, [r1, r3]
 80005e8:	4619      	mov	r1, r3
 80005ea:	2304      	movs	r3, #4
 80005ec:	408b      	lsls	r3, r1
 80005ee:	43db      	mvns	r3, r3
 80005f0:	401a      	ands	r2, r3
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	601a      	str	r2, [r3, #0]

}
 80005f6:	bf00      	nop
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	08004ac8 	.word	0x08004ac8
 8000608:	08004ad4 	.word	0x08004ad4

0800060c <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d02e      	beq.n	800067a <LL_TIM_OC_EnablePreload+0x6e>
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	2b04      	cmp	r3, #4
 8000620:	d029      	beq.n	8000676 <LL_TIM_OC_EnablePreload+0x6a>
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	2b10      	cmp	r3, #16
 8000626:	d024      	beq.n	8000672 <LL_TIM_OC_EnablePreload+0x66>
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	2b40      	cmp	r3, #64	; 0x40
 800062c:	d01f      	beq.n	800066e <LL_TIM_OC_EnablePreload+0x62>
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000634:	d019      	beq.n	800066a <LL_TIM_OC_EnablePreload+0x5e>
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800063c:	d013      	beq.n	8000666 <LL_TIM_OC_EnablePreload+0x5a>
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000644:	d00d      	beq.n	8000662 <LL_TIM_OC_EnablePreload+0x56>
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800064c:	d007      	beq.n	800065e <LL_TIM_OC_EnablePreload+0x52>
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000654:	d101      	bne.n	800065a <LL_TIM_OC_EnablePreload+0x4e>
 8000656:	2308      	movs	r3, #8
 8000658:	e010      	b.n	800067c <LL_TIM_OC_EnablePreload+0x70>
 800065a:	2309      	movs	r3, #9
 800065c:	e00e      	b.n	800067c <LL_TIM_OC_EnablePreload+0x70>
 800065e:	2307      	movs	r3, #7
 8000660:	e00c      	b.n	800067c <LL_TIM_OC_EnablePreload+0x70>
 8000662:	2306      	movs	r3, #6
 8000664:	e00a      	b.n	800067c <LL_TIM_OC_EnablePreload+0x70>
 8000666:	2305      	movs	r3, #5
 8000668:	e008      	b.n	800067c <LL_TIM_OC_EnablePreload+0x70>
 800066a:	2304      	movs	r3, #4
 800066c:	e006      	b.n	800067c <LL_TIM_OC_EnablePreload+0x70>
 800066e:	2303      	movs	r3, #3
 8000670:	e004      	b.n	800067c <LL_TIM_OC_EnablePreload+0x70>
 8000672:	2302      	movs	r3, #2
 8000674:	e002      	b.n	800067c <LL_TIM_OC_EnablePreload+0x70>
 8000676:	2301      	movs	r3, #1
 8000678:	e000      	b.n	800067c <LL_TIM_OC_EnablePreload+0x70>
 800067a:	2300      	movs	r3, #0
 800067c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	3318      	adds	r3, #24
 8000682:	4619      	mov	r1, r3
 8000684:	7bfb      	ldrb	r3, [r7, #15]
 8000686:	4a0a      	ldr	r2, [pc, #40]	; (80006b0 <LL_TIM_OC_EnablePreload+0xa4>)
 8000688:	5cd3      	ldrb	r3, [r2, r3]
 800068a:	440b      	add	r3, r1
 800068c:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	7bfb      	ldrb	r3, [r7, #15]
 8000694:	4907      	ldr	r1, [pc, #28]	; (80006b4 <LL_TIM_OC_EnablePreload+0xa8>)
 8000696:	5ccb      	ldrb	r3, [r1, r3]
 8000698:	4619      	mov	r1, r3
 800069a:	2308      	movs	r3, #8
 800069c:	408b      	lsls	r3, r1
 800069e:	431a      	orrs	r2, r3
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	601a      	str	r2, [r3, #0]
}
 80006a4:	bf00      	nop
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	08004ac8 	.word	0x08004ac8
 80006b4:	08004ad4 	.word	0x08004ad4

080006b8 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	689b      	ldr	r3, [r3, #8]
 80006c6:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80006ca:	f023 0307 	bic.w	r3, r3, #7
 80006ce:	683a      	ldr	r2, [r7, #0]
 80006d0:	431a      	orrs	r2, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	609a      	str	r2, [r3, #8]
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr

080006e2 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC4REF
  *         @arg @ref LL_TIM_TRGO_ENCODERCLK
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80006e2:	b480      	push	{r7}
 80006e4:	b083      	sub	sp, #12
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
 80006ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80006f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80006f8:	683a      	ldr	r2, [r7, #0]
 80006fa:	431a      	orrs	r2, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	605a      	str	r2, [r3, #4]
}
 8000700:	bf00      	nop
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <LL_TIM_SetTriggerOutput2>:
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_RISING
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	685b      	ldr	r3, [r3, #4]
 800071a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	431a      	orrs	r2, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	605a      	str	r2, [r3, #4]
}
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000732:	b480      	push	{r7}
 8000734:	b083      	sub	sp, #12
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	689b      	ldr	r3, [r3, #8]
 800073e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	609a      	str	r2, [r3, #8]
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
	...

08000754 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000754:	b480      	push	{r7}
 8000756:	b087      	sub	sp, #28
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 800075e:	4a18      	ldr	r2, [pc, #96]	; (80007c0 <LL_SYSCFG_SetEXTISource+0x6c>)
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	f003 0303 	and.w	r3, r3, #3
 8000766:	3302      	adds	r3, #2
 8000768:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	0c1b      	lsrs	r3, r3, #16
 8000770:	43db      	mvns	r3, r3
 8000772:	ea02 0103 	and.w	r1, r2, r3
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	0c1b      	lsrs	r3, r3, #16
 800077a:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800077c:	693b      	ldr	r3, [r7, #16]
 800077e:	fa93 f3a3 	rbit	r3, r3
 8000782:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d101      	bne.n	8000792 <LL_SYSCFG_SetEXTISource+0x3e>
  {
    return 32U;
 800078e:	2320      	movs	r3, #32
 8000790:	e003      	b.n	800079a <LL_SYSCFG_SetEXTISource+0x46>
  }
  return __builtin_clz(value);
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	fab3 f383 	clz	r3, r3
 8000798:	b2db      	uxtb	r3, r3
 800079a:	f003 031f 	and.w	r3, r3, #31
 800079e:	687a      	ldr	r2, [r7, #4]
 80007a0:	409a      	lsls	r2, r3
 80007a2:	4807      	ldr	r0, [pc, #28]	; (80007c0 <LL_SYSCFG_SetEXTISource+0x6c>)
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	f003 0303 	and.w	r3, r3, #3
 80007aa:	430a      	orrs	r2, r1
 80007ac:	3302      	adds	r3, #2
 80007ae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80007b2:	bf00      	nop
 80007b4:	371c      	adds	r7, #28
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	40010000 	.word	0x40010000

080007c4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b08b      	sub	sp, #44	; 0x2c
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	fa93 f3a3 	rbit	r3, r3
 80007de:	613b      	str	r3, [r7, #16]
  return result;
 80007e0:	693b      	ldr	r3, [r7, #16]
 80007e2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d101      	bne.n	80007ee <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80007ea:	2320      	movs	r3, #32
 80007ec:	e003      	b.n	80007f6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80007ee:	69bb      	ldr	r3, [r7, #24]
 80007f0:	fab3 f383 	clz	r3, r3
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	005b      	lsls	r3, r3, #1
 80007f8:	2103      	movs	r1, #3
 80007fa:	fa01 f303 	lsl.w	r3, r1, r3
 80007fe:	43db      	mvns	r3, r3
 8000800:	401a      	ands	r2, r3
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000806:	6a3b      	ldr	r3, [r7, #32]
 8000808:	fa93 f3a3 	rbit	r3, r3
 800080c:	61fb      	str	r3, [r7, #28]
  return result;
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000814:	2b00      	cmp	r3, #0
 8000816:	d101      	bne.n	800081c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000818:	2320      	movs	r3, #32
 800081a:	e003      	b.n	8000824 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800081c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081e:	fab3 f383 	clz	r3, r3
 8000822:	b2db      	uxtb	r3, r3
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	6879      	ldr	r1, [r7, #4]
 8000828:	fa01 f303 	lsl.w	r3, r1, r3
 800082c:	431a      	orrs	r2, r3
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	601a      	str	r2, [r3, #0]
}
 8000832:	bf00      	nop
 8000834:	372c      	adds	r7, #44	; 0x2c
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800083e:	b480      	push	{r7}
 8000840:	b08b      	sub	sp, #44	; 0x2c
 8000842:	af00      	add	r7, sp, #0
 8000844:	60f8      	str	r0, [r7, #12]
 8000846:	60b9      	str	r1, [r7, #8]
 8000848:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	68da      	ldr	r2, [r3, #12]
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	fa93 f3a3 	rbit	r3, r3
 8000858:	613b      	str	r3, [r7, #16]
  return result;
 800085a:	693b      	ldr	r3, [r7, #16]
 800085c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800085e:	69bb      	ldr	r3, [r7, #24]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d101      	bne.n	8000868 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000864:	2320      	movs	r3, #32
 8000866:	e003      	b.n	8000870 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000868:	69bb      	ldr	r3, [r7, #24]
 800086a:	fab3 f383 	clz	r3, r3
 800086e:	b2db      	uxtb	r3, r3
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	2103      	movs	r1, #3
 8000874:	fa01 f303 	lsl.w	r3, r1, r3
 8000878:	43db      	mvns	r3, r3
 800087a:	401a      	ands	r2, r3
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000880:	6a3b      	ldr	r3, [r7, #32]
 8000882:	fa93 f3a3 	rbit	r3, r3
 8000886:	61fb      	str	r3, [r7, #28]
  return result;
 8000888:	69fb      	ldr	r3, [r7, #28]
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800088c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088e:	2b00      	cmp	r3, #0
 8000890:	d101      	bne.n	8000896 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000892:	2320      	movs	r3, #32
 8000894:	e003      	b.n	800089e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000898:	fab3 f383 	clz	r3, r3
 800089c:	b2db      	uxtb	r3, r3
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	6879      	ldr	r1, [r7, #4]
 80008a2:	fa01 f303 	lsl.w	r3, r1, r3
 80008a6:	431a      	orrs	r2, r3
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	60da      	str	r2, [r3, #12]
}
 80008ac:	bf00      	nop
 80008ae:	372c      	adds	r7, #44	; 0x2c
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80008c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008c4:	4907      	ldr	r1, [pc, #28]	; (80008e4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4313      	orrs	r3, r2
 80008ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80008ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	4013      	ands	r3, r2
 80008d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008d6:	68fb      	ldr	r3, [r7, #12]
}
 80008d8:	bf00      	nop
 80008da:	3714      	adds	r7, #20
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	40021000 	.word	0x40021000

080008e8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80008f0:	4b08      	ldr	r3, [pc, #32]	; (8000914 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008f4:	4907      	ldr	r1, [pc, #28]	; (8000914 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008fe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4013      	ands	r3, r2
 8000904:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000906:	68fb      	ldr	r3, [r7, #12]
}
 8000908:	bf00      	nop
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	40021000 	.word	0x40021000

08000918 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000922:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000924:	4907      	ldr	r1, [pc, #28]	; (8000944 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4313      	orrs	r3, r2
 800092a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <LL_APB2_GRP1_EnableClock+0x2c>)
 800092e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4013      	ands	r3, r2
 8000934:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000936:	68fb      	ldr	r3, [r7, #12]
}
 8000938:	bf00      	nop
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	40021000 	.word	0x40021000

08000948 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800094c:	f000 fd19 	bl	8001382 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000950:	f000 f80f 	bl	8000972 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000954:	f000 fb22 	bl	8000f9c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000958:	f000 f854 	bl	8000a04 <MX_ADC1_Init>
  MX_ADC2_Init();
 800095c:	f000 f91c 	bl	8000b98 <MX_ADC2_Init>
  MX_TIM1_Init();
 8000960:	f000 f9c6 	bl	8000cf0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000964:	f000 fa6c 	bl	8000e40 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000968:	f000 fa9e 	bl	8000ea8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  //Initialize timers
  timers_init();
 800096c:	f000 fcb8 	bl	80012e0 <timers_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000970:	e7fe      	b.n	8000970 <main+0x28>

08000972 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b094      	sub	sp, #80	; 0x50
 8000976:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000978:	f107 0318 	add.w	r3, r7, #24
 800097c:	2238      	movs	r2, #56	; 0x38
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f004 f88d 	bl	8004aa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000994:	2000      	movs	r0, #0
 8000996:	f000 ffcb 	bl	8001930 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800099a:	2301      	movs	r3, #1
 800099c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800099e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a4:	2302      	movs	r3, #2
 80009a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009a8:	2303      	movs	r3, #3
 80009aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80009ac:	2301      	movs	r3, #1
 80009ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 80009b0:	2314      	movs	r3, #20
 80009b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009bc:	2302      	movs	r3, #2
 80009be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c0:	f107 0318 	add.w	r3, r7, #24
 80009c4:	4618      	mov	r0, r3
 80009c6:	f001 f867 	bl	8001a98 <HAL_RCC_OscConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80009d0:	f000 fb70 	bl	80010b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d4:	230f      	movs	r3, #15
 80009d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d8:	2303      	movs	r3, #3
 80009da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	2104      	movs	r1, #4
 80009ec:	4618      	mov	r0, r3
 80009ee:	f001 fb6b 	bl	80020c8 <HAL_RCC_ClockConfig>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80009f8:	f000 fb5c 	bl	80010b4 <Error_Handler>
  }
}
 80009fc:	bf00      	nop
 80009fe:	3750      	adds	r7, #80	; 0x50
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b0a6      	sub	sp, #152	; 0x98
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000a0a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000a16:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
 8000a24:	611a      	str	r2, [r3, #16]
 8000a26:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000a28:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]
 8000a46:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	2244      	movs	r2, #68	; 0x44
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f004 f826 	bl	8004aa0 <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000a54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a58:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000a5a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000a5e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	4618      	mov	r0, r3
 8000a64:	f001 fd10 	bl	8002488 <HAL_RCCEx_PeriphCLKConfig>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000a6e:	f000 fb21 	bl	80010b4 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC12);
 8000a72:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a76:	f7ff ff1f 	bl	80008b8 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	f7ff ff1c 	bl	80008b8 <LL_AHB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA0   ------> ADC1_IN1
  */
  GPIO_InitStruct.Pin = POT_1_Pin;
 8000a80:	2301      	movs	r3, #1
 8000a82:	64bb      	str	r3, [r7, #72]	; 0x48
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000a84:	2303      	movs	r3, #3
 8000a86:	64fb      	str	r3, [r7, #76]	; 0x4c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	65bb      	str	r3, [r7, #88]	; 0x58
  LL_GPIO_Init(POT_1_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a90:	4619      	mov	r1, r3
 8000a92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a96:	f003 fa9b 	bl	8003fd0 <LL_GPIO_Init>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000aac:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000ab6:	f002 fea7 	bl	8003808 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000aba:	2300      	movs	r3, #0
 8000abc:	673b      	str	r3, [r7, #112]	; 0x70
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	677b      	str	r3, [r7, #116]	; 0x74
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	67bb      	str	r3, [r7, #120]	; 0x78
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8000ac6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aca:	67fb      	str	r3, [r7, #124]	; 0x7c
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000acc:	2300      	movs	r3, #0
 8000ace:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000ad8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000adc:	4619      	mov	r1, r3
 8000ade:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000ae2:	f002 feb7 	bl	8003854 <LL_ADC_REG_Init>
  LL_ADC_SetGainCompensation(ADC1, 0);
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000aec:	f7ff fc45 	bl	800037a <LL_ADC_SetGainCompensation>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 8000af0:	2100      	movs	r1, #0
 8000af2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000af6:	f7ff fce5 	bl	80004c4 <LL_ADC_SetOverSamplingScope>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 8000afa:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000afe:	663b      	str	r3, [r7, #96]	; 0x60
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000b00:	2300      	movs	r3, #0
 8000b02:	667b      	str	r3, [r7, #100]	; 0x64
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000b04:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000b08:	4619      	mov	r1, r3
 8000b0a:	481e      	ldr	r0, [pc, #120]	; (8000b84 <MX_ADC1_Init+0x180>)
 8000b0c:	f002 fe3c 	bl	8003788 <LL_ADC_CommonInit>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 8000b10:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000b14:	f7ff fceb 	bl	80004ee <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8000b18:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000b1c:	f7ff fcf9 	bl	8000512 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000b20:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <MX_ADC1_Init+0x184>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	099b      	lsrs	r3, r3, #6
 8000b26:	4a19      	ldr	r2, [pc, #100]	; (8000b8c <MX_ADC1_Init+0x188>)
 8000b28:	fba2 2303 	umull	r2, r3, r2, r3
 8000b2c:	099a      	lsrs	r2, r3, #6
 8000b2e:	4613      	mov	r3, r2
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	4413      	add	r3, r2
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	461a      	mov	r2, r3
 8000b38:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <MX_ADC1_Init+0x18c>)
 8000b3a:	fba3 2302 	umull	r2, r3, r3, r2
 8000b3e:	08db      	lsrs	r3, r3, #3
 8000b40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  while(wait_loop_index != 0)
 8000b44:	e004      	b.n	8000b50 <MX_ADC1_Init+0x14c>
  {
    wait_loop_index--;
 8000b46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  while(wait_loop_index != 0)
 8000b50:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d1f6      	bne.n	8000b46 <MX_ADC1_Init+0x142>
  }
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8000b58:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <MX_ADC1_Init+0x190>)
 8000b5a:	2106      	movs	r1, #6
 8000b5c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000b60:	f7ff fc30 	bl	80003c4 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_640CYCLES_5);
 8000b64:	2207      	movs	r2, #7
 8000b66:	490b      	ldr	r1, [pc, #44]	; (8000b94 <MX_ADC1_Init+0x190>)
 8000b68:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000b6c:	f7ff fc56 	bl	800041c <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 8000b70:	227f      	movs	r2, #127	; 0x7f
 8000b72:	4908      	ldr	r1, [pc, #32]	; (8000b94 <MX_ADC1_Init+0x190>)
 8000b74:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000b78:	f7ff fc7c 	bl	8000474 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	3798      	adds	r7, #152	; 0x98
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	50000300 	.word	0x50000300
 8000b88:	20000000 	.word	0x20000000
 8000b8c:	053e2d63 	.word	0x053e2d63
 8000b90:	cccccccd 	.word	0xcccccccd
 8000b94:	04300002 	.word	0x04300002

08000b98 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b0a2      	sub	sp, #136	; 0x88
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000b9e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000baa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	611a      	str	r2, [r3, #16]
 8000bba:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
 8000bcc:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	2244      	movs	r2, #68	; 0x44
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f003 ff63 	bl	8004aa0 <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bde:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000be0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000be4:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	4618      	mov	r0, r3
 8000bea:	f001 fc4d 	bl	8002488 <HAL_RCCEx_PeriphCLKConfig>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_ADC2_Init+0x60>
  {
    Error_Handler();
 8000bf4:	f000 fa5e 	bl	80010b4 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC12);
 8000bf8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bfc:	f7ff fe5c 	bl	80008b8 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000c00:	2001      	movs	r0, #1
 8000c02:	f7ff fe59 	bl	80008b8 <LL_AHB2_GRP1_EnableClock>
  /**ADC2 GPIO Configuration
  PA1   ------> ADC2_IN2
  */
  GPIO_InitStruct.Pin = POT_2_Pin;
 8000c06:	2302      	movs	r3, #2
 8000c08:	64bb      	str	r3, [r7, #72]	; 0x48
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	65bb      	str	r3, [r7, #88]	; 0x58
  LL_GPIO_Init(POT_2_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c16:	4619      	mov	r1, r3
 8000c18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1c:	f003 f9d8 	bl	8003fd0 <LL_GPIO_Init>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000c20:	2300      	movs	r3, #0
 8000c22:	67bb      	str	r3, [r7, #120]	; 0x78
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000c24:	2300      	movs	r3, #0
 8000c26:	67fb      	str	r3, [r7, #124]	; 0x7c
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8000c2e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000c32:	4619      	mov	r1, r3
 8000c34:	4829      	ldr	r0, [pc, #164]	; (8000cdc <MX_ADC2_Init+0x144>)
 8000c36:	f002 fde7 	bl	8003808 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	663b      	str	r3, [r7, #96]	; 0x60
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000c42:	2300      	movs	r3, #0
 8000c44:	66bb      	str	r3, [r7, #104]	; 0x68
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8000c46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c4a:	66fb      	str	r3, [r7, #108]	; 0x6c
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	673b      	str	r3, [r7, #112]	; 0x70
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000c50:	2300      	movs	r3, #0
 8000c52:	677b      	str	r3, [r7, #116]	; 0x74
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8000c54:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4820      	ldr	r0, [pc, #128]	; (8000cdc <MX_ADC2_Init+0x144>)
 8000c5c:	f002 fdfa 	bl	8003854 <LL_ADC_REG_Init>
  LL_ADC_SetGainCompensation(ADC2, 0);
 8000c60:	2100      	movs	r1, #0
 8000c62:	481e      	ldr	r0, [pc, #120]	; (8000cdc <MX_ADC2_Init+0x144>)
 8000c64:	f7ff fb89 	bl	800037a <LL_ADC_SetGainCompensation>
  LL_ADC_SetOverSamplingScope(ADC2, LL_ADC_OVS_DISABLE);
 8000c68:	2100      	movs	r1, #0
 8000c6a:	481c      	ldr	r0, [pc, #112]	; (8000cdc <MX_ADC2_Init+0x144>)
 8000c6c:	f7ff fc2a 	bl	80004c4 <LL_ADC_SetOverSamplingScope>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC2);
 8000c70:	481a      	ldr	r0, [pc, #104]	; (8000cdc <MX_ADC2_Init+0x144>)
 8000c72:	f7ff fc3c 	bl	80004ee <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC2);
 8000c76:	4819      	ldr	r0, [pc, #100]	; (8000cdc <MX_ADC2_Init+0x144>)
 8000c78:	f7ff fc4b 	bl	8000512 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000c7c:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <MX_ADC2_Init+0x148>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	099b      	lsrs	r3, r3, #6
 8000c82:	4a18      	ldr	r2, [pc, #96]	; (8000ce4 <MX_ADC2_Init+0x14c>)
 8000c84:	fba2 2303 	umull	r2, r3, r2, r3
 8000c88:	099a      	lsrs	r2, r3, #6
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	4413      	add	r3, r2
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	461a      	mov	r2, r3
 8000c94:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <MX_ADC2_Init+0x150>)
 8000c96:	fba3 2302 	umull	r2, r3, r3, r2
 8000c9a:	08db      	lsrs	r3, r3, #3
 8000c9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  while(wait_loop_index != 0)
 8000ca0:	e004      	b.n	8000cac <MX_ADC2_Init+0x114>
  {
    wait_loop_index--;
 8000ca2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  while(wait_loop_index != 0)
 8000cac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d1f6      	bne.n	8000ca2 <MX_ADC2_Init+0x10a>
  }
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_2);
 8000cb4:	4a0d      	ldr	r2, [pc, #52]	; (8000cec <MX_ADC2_Init+0x154>)
 8000cb6:	2106      	movs	r1, #6
 8000cb8:	4808      	ldr	r0, [pc, #32]	; (8000cdc <MX_ADC2_Init+0x144>)
 8000cba:	f7ff fb83 	bl	80003c4 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_640CYCLES_5);
 8000cbe:	2207      	movs	r2, #7
 8000cc0:	490a      	ldr	r1, [pc, #40]	; (8000cec <MX_ADC2_Init+0x154>)
 8000cc2:	4806      	ldr	r0, [pc, #24]	; (8000cdc <MX_ADC2_Init+0x144>)
 8000cc4:	f7ff fbaa 	bl	800041c <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_2, LL_ADC_SINGLE_ENDED);
 8000cc8:	227f      	movs	r2, #127	; 0x7f
 8000cca:	4908      	ldr	r1, [pc, #32]	; (8000cec <MX_ADC2_Init+0x154>)
 8000ccc:	4803      	ldr	r0, [pc, #12]	; (8000cdc <MX_ADC2_Init+0x144>)
 8000cce:	f7ff fbd1 	bl	8000474 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	3788      	adds	r7, #136	; 0x88
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	50000100 	.word	0x50000100
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	053e2d63 	.word	0x053e2d63
 8000ce8:	cccccccd 	.word	0xcccccccd
 8000cec:	08600004 	.word	0x08600004

08000cf0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b0a0      	sub	sp, #128	; 0x80
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000cf6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
 8000d04:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000d06:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d0a:	2220      	movs	r2, #32
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f003 fec6 	bl	8004aa0 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8000d14:	f107 031c 	add.w	r3, r7, #28
 8000d18:	2230      	movs	r2, #48	; 0x30
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f003 febf 	bl	8004aa0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
 8000d30:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8000d32:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000d36:	f7ff fdef 	bl	8000918 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000d40:	2300      	movs	r3, #0
 8000d42:	673b      	str	r3, [r7, #112]	; 0x70
  TIM_InitStruct.Autoreload = 8000;
 8000d44:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8000d48:	677b      	str	r3, [r7, #116]	; 0x74
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	67bb      	str	r3, [r7, #120]	; 0x78
  TIM_InitStruct.RepetitionCounter = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	67fb      	str	r3, [r7, #124]	; 0x7c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000d52:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000d56:	4619      	mov	r1, r3
 8000d58:	4838      	ldr	r0, [pc, #224]	; (8000e3c <MX_TIM1_Init+0x14c>)
 8000d5a:	f003 fa37 	bl	80041cc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8000d5e:	4837      	ldr	r0, [pc, #220]	; (8000e3c <MX_TIM1_Init+0x14c>)
 8000d60:	f7ff fbeb 	bl	800053a <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000d64:	2100      	movs	r1, #0
 8000d66:	4835      	ldr	r0, [pc, #212]	; (8000e3c <MX_TIM1_Init+0x14c>)
 8000d68:	f7ff fca6 	bl	80006b8 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	4833      	ldr	r0, [pc, #204]	; (8000e3c <MX_TIM1_Init+0x14c>)
 8000d70:	f7ff fc4c 	bl	800060c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000d74:	2360      	movs	r3, #96	; 0x60
 8000d76:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_OC_InitStruct.CompareValue = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000d84:	2300      	movs	r3, #0
 8000d86:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	667b      	str	r3, [r7, #100]	; 0x64
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000d90:	2300      	movs	r3, #0
 8000d92:	66bb      	str	r3, [r7, #104]	; 0x68
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000d94:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d98:	461a      	mov	r2, r3
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	4827      	ldr	r0, [pc, #156]	; (8000e3c <MX_TIM1_Init+0x14c>)
 8000d9e:	f003 fa9f 	bl	80042e0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8000da2:	2101      	movs	r1, #1
 8000da4:	4825      	ldr	r0, [pc, #148]	; (8000e3c <MX_TIM1_Init+0x14c>)
 8000da6:	f7ff fbd9 	bl	800055c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8000daa:	2100      	movs	r1, #0
 8000dac:	4823      	ldr	r0, [pc, #140]	; (8000e3c <MX_TIM1_Init+0x14c>)
 8000dae:	f7ff fc98 	bl	80006e2 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 8000db2:	2100      	movs	r1, #0
 8000db4:	4821      	ldr	r0, [pc, #132]	; (8000e3c <MX_TIM1_Init+0x14c>)
 8000db6:	f7ff fca9 	bl	800070c <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8000dba:	4820      	ldr	r0, [pc, #128]	; (8000e3c <MX_TIM1_Init+0x14c>)
 8000dbc:	f7ff fcb9 	bl	8000732 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8000dd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_BDTRInitStruct.BreakAFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8000de0:	2300      	movs	r3, #0
 8000de2:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 8000de4:	2300      	movs	r3, #0
 8000de6:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 8000de8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000dec:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 8000dee:	2300      	movs	r3, #0
 8000df0:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_BDTRInitStruct.Break2AFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8000df2:	2300      	movs	r3, #0
 8000df4:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8000dfa:	f107 031c 	add.w	r3, r7, #28
 8000dfe:	4619      	mov	r1, r3
 8000e00:	480e      	ldr	r0, [pc, #56]	; (8000e3c <MX_TIM1_Init+0x14c>)
 8000e02:	f003 facd 	bl	80043a0 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000e06:	2001      	movs	r0, #1
 8000e08:	f7ff fd56 	bl	80008b8 <LL_AHB2_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA8   ------> TIM1_CH1
  */
  GPIO_InitStruct.Pin = SILNIK_PWM_Pin;
 8000e0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e10:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e12:	2302      	movs	r3, #2
 8000e14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8000e22:	2306      	movs	r3, #6
 8000e24:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(SILNIK_PWM_GPIO_Port, &GPIO_InitStruct);
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2e:	f003 f8cf 	bl	8003fd0 <LL_GPIO_Init>

}
 8000e32:	bf00      	nop
 8000e34:	3780      	adds	r7, #128	; 0x80
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40012c00 	.word	0x40012c00

08000e40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000e54:	2001      	movs	r0, #1
 8000e56:	f7ff fd47 	bl	80008e8 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 1599;
 8000e5a:	f240 633f 	movw	r3, #1599	; 0x63f
 8000e5e:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 1.0E8;
 8000e64:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <MX_TIM2_Init+0x64>)
 8000e66:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	4619      	mov	r1, r3
 8000e70:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e74:	f003 f9aa 	bl	80041cc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8000e78:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e7c:	f7ff fb5d 	bl	800053a <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000e80:	2100      	movs	r1, #0
 8000e82:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e86:	f7ff fc17 	bl	80006b8 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e90:	f7ff fc27 	bl	80006e2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8000e94:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e98:	f7ff fc4b 	bl	8000732 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e9c:	bf00      	nop
 8000e9e:	3718      	adds	r7, #24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	05f5e100 	.word	0x05f5e100

08000ea8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08e      	sub	sp, #56	; 0x38
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ebc:	f107 031c 	add.w	r3, r7, #28
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ec8:	463b      	mov	r3, r7
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
 8000ed4:	611a      	str	r2, [r3, #16]
 8000ed6:	615a      	str	r2, [r3, #20]
 8000ed8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000eda:	4b2e      	ldr	r3, [pc, #184]	; (8000f94 <MX_TIM3_Init+0xec>)
 8000edc:	4a2e      	ldr	r2, [pc, #184]	; (8000f98 <MX_TIM3_Init+0xf0>)
 8000ede:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1599;
 8000ee0:	4b2c      	ldr	r3, [pc, #176]	; (8000f94 <MX_TIM3_Init+0xec>)
 8000ee2:	f240 623f 	movw	r2, #1599	; 0x63f
 8000ee6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee8:	4b2a      	ldr	r3, [pc, #168]	; (8000f94 <MX_TIM3_Init+0xec>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000eee:	4b29      	ldr	r3, [pc, #164]	; (8000f94 <MX_TIM3_Init+0xec>)
 8000ef0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ef4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000ef6:	4b27      	ldr	r3, [pc, #156]	; (8000f94 <MX_TIM3_Init+0xec>)
 8000ef8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000efc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000efe:	4b25      	ldr	r3, [pc, #148]	; (8000f94 <MX_TIM3_Init+0xec>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f04:	4823      	ldr	r0, [pc, #140]	; (8000f94 <MX_TIM3_Init+0xec>)
 8000f06:	f001 fcaf 	bl	8002868 <HAL_TIM_Base_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8000f10:	f000 f8d0 	bl	80010b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f18:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f1e:	4619      	mov	r1, r3
 8000f20:	481c      	ldr	r0, [pc, #112]	; (8000f94 <MX_TIM3_Init+0xec>)
 8000f22:	f001 fe6d 	bl	8002c00 <HAL_TIM_ConfigClockSource>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000f2c:	f000 f8c2 	bl	80010b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f30:	4818      	ldr	r0, [pc, #96]	; (8000f94 <MX_TIM3_Init+0xec>)
 8000f32:	f001 fcf0 	bl	8002916 <HAL_TIM_PWM_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000f3c:	f000 f8ba 	bl	80010b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f44:	2300      	movs	r3, #0
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f48:	f107 031c 	add.w	r3, r7, #28
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4811      	ldr	r0, [pc, #68]	; (8000f94 <MX_TIM3_Init+0xec>)
 8000f50:	f002 fb72 	bl	8003638 <HAL_TIMEx_MasterConfigSynchronization>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8000f5a:	f000 f8ab 	bl	80010b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f5e:	2360      	movs	r3, #96	; 0x60
 8000f60:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f66:	2300      	movs	r3, #0
 8000f68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f6e:	463b      	mov	r3, r7
 8000f70:	2200      	movs	r2, #0
 8000f72:	4619      	mov	r1, r3
 8000f74:	4807      	ldr	r0, [pc, #28]	; (8000f94 <MX_TIM3_Init+0xec>)
 8000f76:	f001 fd2f 	bl	80029d8 <HAL_TIM_PWM_ConfigChannel>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8000f80:	f000 f898 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f84:	4803      	ldr	r0, [pc, #12]	; (8000f94 <MX_TIM3_Init+0xec>)
 8000f86:	f000 f8df 	bl	8001148 <HAL_TIM_MspPostInit>

}
 8000f8a:	bf00      	nop
 8000f8c:	3738      	adds	r7, #56	; 0x38
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	2000002c 	.word	0x2000002c
 8000f98:	40000400 	.word	0x40000400

08000f9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000fa2:	f107 031c 	add.w	r3, r7, #28
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
 8000fbc:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8000fbe:	2020      	movs	r0, #32
 8000fc0:	f7ff fc7a 	bl	80008b8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	f7ff fc77 	bl	80008b8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000fca:	2002      	movs	r0, #2
 8000fcc:	f7ff fc74 	bl	80008b8 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE2);
 8000fd0:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	f7ff fbbd 	bl	8000754 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE3);
 8000fda:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f7ff fbb8 	bl	8000754 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000ffa:	f107 031c 	add.w	r3, r7, #28
 8000ffe:	4618      	mov	r0, r3
 8001000:	f002 fda2 	bl	8003b48 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8001004:	2308      	movs	r3, #8
 8001006:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001008:	2301      	movs	r3, #1
 800100a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800100e:	2300      	movs	r3, #0
 8001010:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001014:	2301      	movs	r3, #1
 8001016:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	4618      	mov	r0, r3
 8001020:	f002 fd92 	bl	8003b48 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(ENC_GPIO_Port, ENC_Pin, LL_GPIO_PULL_NO);
 8001024:	2200      	movs	r2, #0
 8001026:	2104      	movs	r1, #4
 8001028:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800102c:	f7ff fc07 	bl	800083e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_3, LL_GPIO_PULL_NO);
 8001030:	2200      	movs	r2, #0
 8001032:	2108      	movs	r1, #8
 8001034:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001038:	f7ff fc01 	bl	800083e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(ENC_GPIO_Port, ENC_Pin, LL_GPIO_MODE_INPUT);
 800103c:	2200      	movs	r2, #0
 800103e:	2104      	movs	r1, #4
 8001040:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001044:	f7ff fbbe 	bl	80007c4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_3, LL_GPIO_MODE_INPUT);
 8001048:	2200      	movs	r2, #0
 800104a:	2108      	movs	r1, #8
 800104c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001050:	f7ff fbb8 	bl	80007c4 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = ON_OFF_Pin;
 8001054:	2310      	movs	r3, #16
 8001056:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001058:	2300      	movs	r3, #0
 800105a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	4619      	mov	r1, r3
 8001064:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001068:	f002 ffb2 	bl	8003fd0 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800106c:	f7ff f8fc 	bl	8000268 <__NVIC_GetPriorityGrouping>
 8001070:	4603      	mov	r3, r0
 8001072:	2200      	movs	r2, #0
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff f94c 	bl	8000314 <NVIC_EncodePriority>
 800107c:	4603      	mov	r3, r0
 800107e:	4619      	mov	r1, r3
 8001080:	2008      	movs	r0, #8
 8001082:	f7ff f91d 	bl	80002c0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8001086:	2008      	movs	r0, #8
 8001088:	f7ff f8fc 	bl	8000284 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800108c:	f7ff f8ec 	bl	8000268 <__NVIC_GetPriorityGrouping>
 8001090:	4603      	mov	r3, r0
 8001092:	2200      	movs	r2, #0
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff f93c 	bl	8000314 <NVIC_EncodePriority>
 800109c:	4603      	mov	r3, r0
 800109e:	4619      	mov	r1, r3
 80010a0:	2009      	movs	r0, #9
 80010a2:	f7ff f90d 	bl	80002c0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 80010a6:	2009      	movs	r0, #9
 80010a8:	f7ff f8ec 	bl	8000284 <__NVIC_EnableIRQ>

}
 80010ac:	bf00      	nop
 80010ae:	3728      	adds	r7, #40	; 0x28
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010b8:	b672      	cpsid	i
}
 80010ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010bc:	e7fe      	b.n	80010bc <Error_Handler+0x8>
	...

080010c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c6:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <HAL_MspInit+0x44>)
 80010c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ca:	4a0e      	ldr	r2, [pc, #56]	; (8001104 <HAL_MspInit+0x44>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6613      	str	r3, [r2, #96]	; 0x60
 80010d2:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <HAL_MspInit+0x44>)
 80010d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <HAL_MspInit+0x44>)
 80010e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e2:	4a08      	ldr	r2, [pc, #32]	; (8001104 <HAL_MspInit+0x44>)
 80010e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e8:	6593      	str	r3, [r2, #88]	; 0x58
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_MspInit+0x44>)
 80010ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f2:	603b      	str	r3, [r7, #0]
 80010f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80010f6:	f000 fcbf 	bl	8001a78 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40021000 	.word	0x40021000

08001108 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <HAL_TIM_Base_MspInit+0x38>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d10b      	bne.n	8001132 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800111a:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <HAL_TIM_Base_MspInit+0x3c>)
 800111c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111e:	4a09      	ldr	r2, [pc, #36]	; (8001144 <HAL_TIM_Base_MspInit+0x3c>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	6593      	str	r3, [r2, #88]	; 0x58
 8001126:	4b07      	ldr	r3, [pc, #28]	; (8001144 <HAL_TIM_Base_MspInit+0x3c>)
 8001128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001132:	bf00      	nop
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	40000400 	.word	0x40000400
 8001144:	40021000 	.word	0x40021000

08001148 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a11      	ldr	r2, [pc, #68]	; (80011ac <HAL_TIM_MspPostInit+0x64>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d11b      	bne.n	80011a2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <HAL_TIM_MspPostInit+0x68>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116e:	4a10      	ldr	r2, [pc, #64]	; (80011b0 <HAL_TIM_MspPostInit+0x68>)
 8001170:	f043 0302 	orr.w	r3, r3, #2
 8001174:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <HAL_TIM_MspPostInit+0x68>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001182:	2310      	movs	r3, #16
 8001184:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001192:	2302      	movs	r3, #2
 8001194:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001196:	f107 030c 	add.w	r3, r7, #12
 800119a:	4619      	mov	r1, r3
 800119c:	4805      	ldr	r0, [pc, #20]	; (80011b4 <HAL_TIM_MspPostInit+0x6c>)
 800119e:	f000 fa45 	bl	800162c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80011a2:	bf00      	nop
 80011a4:	3720      	adds	r7, #32
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40000400 	.word	0x40000400
 80011b0:	40021000 	.word	0x40021000
 80011b4:	48000400 	.word	0x48000400

080011b8 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80011c0:	4a04      	ldr	r2, [pc, #16]	; (80011d4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6153      	str	r3, [r2, #20]
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40010400 	.word	0x40010400

080011d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011dc:	e7fe      	b.n	80011dc <NMI_Handler+0x4>

080011de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e2:	e7fe      	b.n	80011e2 <HardFault_Handler+0x4>

080011e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <MemManage_Handler+0x4>

080011ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ee:	e7fe      	b.n	80011ee <BusFault_Handler+0x4>

080011f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <UsageFault_Handler+0x4>

080011f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001224:	f000 f900 	bl	8001428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}

0800122c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	encoder_measureVelocity();
 8001230:	f7fe fff2 	bl	8000218 <encoder_measureVelocity>

  /* USER CODE END EXTI2_IRQn 0 */
  /* USER CODE BEGIN EXTI2_IRQn 1 */
	LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8001234:	2004      	movs	r0, #4
 8001236:	f7ff ffbf 	bl	80011b8 <LL_EXTI_ClearFlag_0_31>

  /* USER CODE END EXTI2_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}

0800123e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  /* USER CODE BEGIN EXTI3_IRQn 1 */
	LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 8001242:	2008      	movs	r0, #8
 8001244:	f7ff ffb8 	bl	80011b8 <LL_EXTI_ClearFlag_0_31>

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}

0800124c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <SystemInit+0x20>)
 8001252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001256:	4a05      	ldr	r2, [pc, #20]	; (800126c <SystemInit+0x20>)
 8001258:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800125c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <LL_TIM_EnableCounter>:
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f043 0201 	orr.w	r2, r3, #1
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	601a      	str	r2, [r3, #0]
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <LL_TIM_SetCounter>:
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	625a      	str	r2, [r3, #36]	; 0x24
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <LL_TIM_GetCounter>:
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <LL_TIM_OC_SetCompareCH1>:
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	683a      	ldr	r2, [r7, #0]
 80012d2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <timers_init>:
#define PWM_MAX 		8000
#define CLOCK_FREQUENCY	160000000

//Initialization of timer perypherial (called once at the begining)
void timers_init()
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	LL_TIM_OC_SetCompareCH1(timerPWM,0);
 80012e4:	2100      	movs	r1, #0
 80012e6:	4807      	ldr	r0, [pc, #28]	; (8001304 <timers_init+0x24>)
 80012e8:	f7ff ffec 	bl	80012c4 <LL_TIM_OC_SetCompareCH1>
	LL_TIM_EnableCounter(timerPWM);
 80012ec:	4805      	ldr	r0, [pc, #20]	; (8001304 <timers_init+0x24>)
 80012ee:	f7ff ffbf 	bl	8001270 <LL_TIM_EnableCounter>
	LL_TIM_EnableCounter(timerVelocity);
 80012f2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80012f6:	f7ff ffbb 	bl	8001270 <LL_TIM_EnableCounter>
	LL_TIM_EnableCounter(timerLED);
 80012fa:	4803      	ldr	r0, [pc, #12]	; (8001308 <timers_init+0x28>)
 80012fc:	f7ff ffb8 	bl	8001270 <LL_TIM_EnableCounter>
}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40012c00 	.word	0x40012c00
 8001308:	40000400 	.word	0x40000400

0800130c <timers_getVelocityTimer>:
}


//Gets current velocity counter value
uint32_t timers_getVelocityTimer()
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
	return LL_TIM_GetCounter(timerVelocity);
 8001310:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001314:	f7ff ffca 	bl	80012ac <LL_TIM_GetCounter>
 8001318:	4603      	mov	r3, r0
}
 800131a:	4618      	mov	r0, r3
 800131c:	bd80      	pop	{r7, pc}

0800131e <timers_resetVeloctiyTimer>:

//Resets current velocity counter value
void timers_resetVeloctiyTimer()
{
 800131e:	b580      	push	{r7, lr}
 8001320:	af00      	add	r7, sp, #0
	LL_TIM_SetCounter(timerVelocity,0);
 8001322:	2100      	movs	r1, #0
 8001324:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001328:	f7ff ffb2 	bl	8001290 <LL_TIM_SetCounter>
}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}

08001330 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001330:	480d      	ldr	r0, [pc, #52]	; (8001368 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001332:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001334:	480d      	ldr	r0, [pc, #52]	; (800136c <LoopForever+0x6>)
  ldr r1, =_edata
 8001336:	490e      	ldr	r1, [pc, #56]	; (8001370 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001338:	4a0e      	ldr	r2, [pc, #56]	; (8001374 <LoopForever+0xe>)
  movs r3, #0
 800133a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800133c:	e002      	b.n	8001344 <LoopCopyDataInit>

0800133e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001342:	3304      	adds	r3, #4

08001344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001348:	d3f9      	bcc.n	800133e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134a:	4a0b      	ldr	r2, [pc, #44]	; (8001378 <LoopForever+0x12>)
  ldr r4, =_ebss
 800134c:	4c0b      	ldr	r4, [pc, #44]	; (800137c <LoopForever+0x16>)
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001350:	e001      	b.n	8001356 <LoopFillZerobss>

08001352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001354:	3204      	adds	r2, #4

08001356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001358:	d3fb      	bcc.n	8001352 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800135a:	f7ff ff77 	bl	800124c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800135e:	f003 fb7b 	bl	8004a58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001362:	f7ff faf1 	bl	8000948 <main>

08001366 <LoopForever>:

LoopForever:
    b LoopForever
 8001366:	e7fe      	b.n	8001366 <LoopForever>
  ldr   r0, =_estack
 8001368:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800136c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001370:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001374:	08004af8 	.word	0x08004af8
  ldr r2, =_sbss
 8001378:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800137c:	2000007c 	.word	0x2000007c

08001380 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001380:	e7fe      	b.n	8001380 <ADC1_2_IRQHandler>

08001382 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001388:	2300      	movs	r3, #0
 800138a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800138c:	2003      	movs	r0, #3
 800138e:	f000 f91b 	bl	80015c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001392:	200f      	movs	r0, #15
 8001394:	f000 f80e 	bl	80013b4 <HAL_InitTick>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d002      	beq.n	80013a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	71fb      	strb	r3, [r7, #7]
 80013a2:	e001      	b.n	80013a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013a4:	f7ff fe8c 	bl	80010c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013a8:	79fb      	ldrb	r3, [r7, #7]

}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013bc:	2300      	movs	r3, #0
 80013be:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80013c0:	4b16      	ldr	r3, [pc, #88]	; (800141c <HAL_InitTick+0x68>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d022      	beq.n	800140e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80013c8:	4b15      	ldr	r3, [pc, #84]	; (8001420 <HAL_InitTick+0x6c>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b13      	ldr	r3, [pc, #76]	; (800141c <HAL_InitTick+0x68>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80013d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013dc:	4618      	mov	r0, r3
 80013de:	f000 f918 	bl	8001612 <HAL_SYSTICK_Config>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d10f      	bne.n	8001408 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b0f      	cmp	r3, #15
 80013ec:	d809      	bhi.n	8001402 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ee:	2200      	movs	r2, #0
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	f04f 30ff 	mov.w	r0, #4294967295
 80013f6:	f000 f8f2 	bl	80015de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013fa:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <HAL_InitTick+0x70>)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	e007      	b.n	8001412 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	73fb      	strb	r3, [r7, #15]
 8001406:	e004      	b.n	8001412 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	73fb      	strb	r3, [r7, #15]
 800140c:	e001      	b.n	8001412 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001412:	7bfb      	ldrb	r3, [r7, #15]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000008 	.word	0x20000008
 8001420:	20000000 	.word	0x20000000
 8001424:	20000004 	.word	0x20000004

08001428 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800142c:	4b05      	ldr	r3, [pc, #20]	; (8001444 <HAL_IncTick+0x1c>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <HAL_IncTick+0x20>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4413      	add	r3, r2
 8001436:	4a03      	ldr	r2, [pc, #12]	; (8001444 <HAL_IncTick+0x1c>)
 8001438:	6013      	str	r3, [r2, #0]
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	20000078 	.word	0x20000078
 8001448:	20000008 	.word	0x20000008

0800144c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return uwTick;
 8001450:	4b03      	ldr	r3, [pc, #12]	; (8001460 <HAL_GetTick+0x14>)
 8001452:	681b      	ldr	r3, [r3, #0]
}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	20000078 	.word	0x20000078

08001464 <__NVIC_SetPriorityGrouping>:
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001480:	4013      	ands	r3, r2
 8001482:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800148c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001494:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001496:	4a04      	ldr	r2, [pc, #16]	; (80014a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	60d3      	str	r3, [r2, #12]
}
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <__NVIC_GetPriorityGrouping>:
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b0:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <__NVIC_GetPriorityGrouping+0x18>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	0a1b      	lsrs	r3, r3, #8
 80014b6:	f003 0307 	and.w	r3, r3, #7
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <__NVIC_SetPriority>:
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	6039      	str	r1, [r7, #0]
 80014d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	db0a      	blt.n	80014f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	490c      	ldr	r1, [pc, #48]	; (8001514 <__NVIC_SetPriority+0x4c>)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	0112      	lsls	r2, r2, #4
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	440b      	add	r3, r1
 80014ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80014f0:	e00a      	b.n	8001508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4908      	ldr	r1, [pc, #32]	; (8001518 <__NVIC_SetPriority+0x50>)
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	f003 030f 	and.w	r3, r3, #15
 80014fe:	3b04      	subs	r3, #4
 8001500:	0112      	lsls	r2, r2, #4
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	440b      	add	r3, r1
 8001506:	761a      	strb	r2, [r3, #24]
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000e100 	.word	0xe000e100
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <NVIC_EncodePriority>:
{
 800151c:	b480      	push	{r7}
 800151e:	b089      	sub	sp, #36	; 0x24
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f1c3 0307 	rsb	r3, r3, #7
 8001536:	2b04      	cmp	r3, #4
 8001538:	bf28      	it	cs
 800153a:	2304      	movcs	r3, #4
 800153c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3304      	adds	r3, #4
 8001542:	2b06      	cmp	r3, #6
 8001544:	d902      	bls.n	800154c <NVIC_EncodePriority+0x30>
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3b03      	subs	r3, #3
 800154a:	e000      	b.n	800154e <NVIC_EncodePriority+0x32>
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	f04f 32ff 	mov.w	r2, #4294967295
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43da      	mvns	r2, r3
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	401a      	ands	r2, r3
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001564:	f04f 31ff 	mov.w	r1, #4294967295
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	fa01 f303 	lsl.w	r3, r1, r3
 800156e:	43d9      	mvns	r1, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	4313      	orrs	r3, r2
}
 8001576:	4618      	mov	r0, r3
 8001578:	3724      	adds	r7, #36	; 0x24
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3b01      	subs	r3, #1
 8001590:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001594:	d301      	bcc.n	800159a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001596:	2301      	movs	r3, #1
 8001598:	e00f      	b.n	80015ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800159a:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <SysTick_Config+0x40>)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3b01      	subs	r3, #1
 80015a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015a2:	210f      	movs	r1, #15
 80015a4:	f04f 30ff 	mov.w	r0, #4294967295
 80015a8:	f7ff ff8e 	bl	80014c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015ac:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <SysTick_Config+0x40>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015b2:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <SysTick_Config+0x40>)
 80015b4:	2207      	movs	r2, #7
 80015b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	e000e010 	.word	0xe000e010

080015c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff ff47 	bl	8001464 <__NVIC_SetPriorityGrouping>
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b086      	sub	sp, #24
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	4603      	mov	r3, r0
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	607a      	str	r2, [r7, #4]
 80015ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015ec:	f7ff ff5e 	bl	80014ac <__NVIC_GetPriorityGrouping>
 80015f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	68b9      	ldr	r1, [r7, #8]
 80015f6:	6978      	ldr	r0, [r7, #20]
 80015f8:	f7ff ff90 	bl	800151c <NVIC_EncodePriority>
 80015fc:	4602      	mov	r2, r0
 80015fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001602:	4611      	mov	r1, r2
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff5f 	bl	80014c8 <__NVIC_SetPriority>
}
 800160a:	bf00      	nop
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff ffb2 	bl	8001584 <SysTick_Config>
 8001620:	4603      	mov	r3, r0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800162c:	b480      	push	{r7}
 800162e:	b087      	sub	sp, #28
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800163a:	e15a      	b.n	80018f2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	2101      	movs	r1, #1
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	fa01 f303 	lsl.w	r3, r1, r3
 8001648:	4013      	ands	r3, r2
 800164a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 814c 	beq.w	80018ec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	2b01      	cmp	r3, #1
 800165e:	d005      	beq.n	800166c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001668:	2b02      	cmp	r3, #2
 800166a:	d130      	bne.n	80016ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	2203      	movs	r2, #3
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	68da      	ldr	r2, [r3, #12]
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	4313      	orrs	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016a2:	2201      	movs	r2, #1
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	4013      	ands	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	091b      	lsrs	r3, r3, #4
 80016b8:	f003 0201 	and.w	r2, r3, #1
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	d017      	beq.n	800170a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	2203      	movs	r2, #3
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	4013      	ands	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	689a      	ldr	r2, [r3, #8]
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	4313      	orrs	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 0303 	and.w	r3, r3, #3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d123      	bne.n	800175e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	08da      	lsrs	r2, r3, #3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3208      	adds	r2, #8
 800171e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001722:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	220f      	movs	r2, #15
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	691a      	ldr	r2, [r3, #16]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	4313      	orrs	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	08da      	lsrs	r2, r3, #3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3208      	adds	r2, #8
 8001758:	6939      	ldr	r1, [r7, #16]
 800175a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	2203      	movs	r2, #3
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43db      	mvns	r3, r3
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	4013      	ands	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 0203 	and.w	r2, r3, #3
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800179a:	2b00      	cmp	r3, #0
 800179c:	f000 80a6 	beq.w	80018ec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a0:	4b5b      	ldr	r3, [pc, #364]	; (8001910 <HAL_GPIO_Init+0x2e4>)
 80017a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017a4:	4a5a      	ldr	r2, [pc, #360]	; (8001910 <HAL_GPIO_Init+0x2e4>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	6613      	str	r3, [r2, #96]	; 0x60
 80017ac:	4b58      	ldr	r3, [pc, #352]	; (8001910 <HAL_GPIO_Init+0x2e4>)
 80017ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017b8:	4a56      	ldr	r2, [pc, #344]	; (8001914 <HAL_GPIO_Init+0x2e8>)
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	089b      	lsrs	r3, r3, #2
 80017be:	3302      	adds	r3, #2
 80017c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f003 0303 	and.w	r3, r3, #3
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	220f      	movs	r2, #15
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4013      	ands	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017e2:	d01f      	beq.n	8001824 <HAL_GPIO_Init+0x1f8>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a4c      	ldr	r2, [pc, #304]	; (8001918 <HAL_GPIO_Init+0x2ec>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d019      	beq.n	8001820 <HAL_GPIO_Init+0x1f4>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a4b      	ldr	r2, [pc, #300]	; (800191c <HAL_GPIO_Init+0x2f0>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d013      	beq.n	800181c <HAL_GPIO_Init+0x1f0>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a4a      	ldr	r2, [pc, #296]	; (8001920 <HAL_GPIO_Init+0x2f4>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d00d      	beq.n	8001818 <HAL_GPIO_Init+0x1ec>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a49      	ldr	r2, [pc, #292]	; (8001924 <HAL_GPIO_Init+0x2f8>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d007      	beq.n	8001814 <HAL_GPIO_Init+0x1e8>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a48      	ldr	r2, [pc, #288]	; (8001928 <HAL_GPIO_Init+0x2fc>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d101      	bne.n	8001810 <HAL_GPIO_Init+0x1e4>
 800180c:	2305      	movs	r3, #5
 800180e:	e00a      	b.n	8001826 <HAL_GPIO_Init+0x1fa>
 8001810:	2306      	movs	r3, #6
 8001812:	e008      	b.n	8001826 <HAL_GPIO_Init+0x1fa>
 8001814:	2304      	movs	r3, #4
 8001816:	e006      	b.n	8001826 <HAL_GPIO_Init+0x1fa>
 8001818:	2303      	movs	r3, #3
 800181a:	e004      	b.n	8001826 <HAL_GPIO_Init+0x1fa>
 800181c:	2302      	movs	r3, #2
 800181e:	e002      	b.n	8001826 <HAL_GPIO_Init+0x1fa>
 8001820:	2301      	movs	r3, #1
 8001822:	e000      	b.n	8001826 <HAL_GPIO_Init+0x1fa>
 8001824:	2300      	movs	r3, #0
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	f002 0203 	and.w	r2, r2, #3
 800182c:	0092      	lsls	r2, r2, #2
 800182e:	4093      	lsls	r3, r2
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4313      	orrs	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001836:	4937      	ldr	r1, [pc, #220]	; (8001914 <HAL_GPIO_Init+0x2e8>)
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	089b      	lsrs	r3, r3, #2
 800183c:	3302      	adds	r3, #2
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001844:	4b39      	ldr	r3, [pc, #228]	; (800192c <HAL_GPIO_Init+0x300>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	43db      	mvns	r3, r3
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4013      	ands	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d003      	beq.n	8001868 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4313      	orrs	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001868:	4a30      	ldr	r2, [pc, #192]	; (800192c <HAL_GPIO_Init+0x300>)
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800186e:	4b2f      	ldr	r3, [pc, #188]	; (800192c <HAL_GPIO_Init+0x300>)
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	43db      	mvns	r3, r3
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4013      	ands	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4313      	orrs	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001892:	4a26      	ldr	r2, [pc, #152]	; (800192c <HAL_GPIO_Init+0x300>)
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001898:	4b24      	ldr	r3, [pc, #144]	; (800192c <HAL_GPIO_Init+0x300>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d003      	beq.n	80018bc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018bc:	4a1b      	ldr	r2, [pc, #108]	; (800192c <HAL_GPIO_Init+0x300>)
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018c2:	4b1a      	ldr	r3, [pc, #104]	; (800192c <HAL_GPIO_Init+0x300>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	43db      	mvns	r3, r3
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4013      	ands	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018e6:	4a11      	ldr	r2, [pc, #68]	; (800192c <HAL_GPIO_Init+0x300>)
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	3301      	adds	r3, #1
 80018f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	fa22 f303 	lsr.w	r3, r2, r3
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f47f ae9d 	bne.w	800163c <HAL_GPIO_Init+0x10>
  }
}
 8001902:	bf00      	nop
 8001904:	bf00      	nop
 8001906:	371c      	adds	r7, #28
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	40021000 	.word	0x40021000
 8001914:	40010000 	.word	0x40010000
 8001918:	48000400 	.word	0x48000400
 800191c:	48000800 	.word	0x48000800
 8001920:	48000c00 	.word	0x48000c00
 8001924:	48001000 	.word	0x48001000
 8001928:	48001400 	.word	0x48001400
 800192c:	40010400 	.word	0x40010400

08001930 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d141      	bne.n	80019c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800193e:	4b4b      	ldr	r3, [pc, #300]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800194a:	d131      	bne.n	80019b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800194c:	4b47      	ldr	r3, [pc, #284]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800194e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001952:	4a46      	ldr	r2, [pc, #280]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001954:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001958:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800195c:	4b43      	ldr	r3, [pc, #268]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001964:	4a41      	ldr	r2, [pc, #260]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001966:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800196a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800196c:	4b40      	ldr	r3, [pc, #256]	; (8001a70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2232      	movs	r2, #50	; 0x32
 8001972:	fb02 f303 	mul.w	r3, r2, r3
 8001976:	4a3f      	ldr	r2, [pc, #252]	; (8001a74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001978:	fba2 2303 	umull	r2, r3, r2, r3
 800197c:	0c9b      	lsrs	r3, r3, #18
 800197e:	3301      	adds	r3, #1
 8001980:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001982:	e002      	b.n	800198a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	3b01      	subs	r3, #1
 8001988:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800198a:	4b38      	ldr	r3, [pc, #224]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001996:	d102      	bne.n	800199e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f2      	bne.n	8001984 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800199e:	4b33      	ldr	r3, [pc, #204]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019aa:	d158      	bne.n	8001a5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e057      	b.n	8001a60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019b0:	4b2e      	ldr	r3, [pc, #184]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019b6:	4a2d      	ldr	r2, [pc, #180]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80019c0:	e04d      	b.n	8001a5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019c8:	d141      	bne.n	8001a4e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019ca:	4b28      	ldr	r3, [pc, #160]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019d6:	d131      	bne.n	8001a3c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019d8:	4b24      	ldr	r3, [pc, #144]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019de:	4a23      	ldr	r2, [pc, #140]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019e8:	4b20      	ldr	r3, [pc, #128]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019f0:	4a1e      	ldr	r2, [pc, #120]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019f8:	4b1d      	ldr	r3, [pc, #116]	; (8001a70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2232      	movs	r2, #50	; 0x32
 80019fe:	fb02 f303 	mul.w	r3, r2, r3
 8001a02:	4a1c      	ldr	r2, [pc, #112]	; (8001a74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a04:	fba2 2303 	umull	r2, r3, r2, r3
 8001a08:	0c9b      	lsrs	r3, r3, #18
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a0e:	e002      	b.n	8001a16 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a22:	d102      	bne.n	8001a2a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f2      	bne.n	8001a10 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a2a:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a36:	d112      	bne.n	8001a5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e011      	b.n	8001a60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a42:	4a0a      	ldr	r2, [pc, #40]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a4c:	e007      	b.n	8001a5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a4e:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a56:	4a05      	ldr	r2, [pc, #20]	; (8001a6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a5c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	40007000 	.word	0x40007000
 8001a70:	20000000 	.word	0x20000000
 8001a74:	431bde83 	.word	0x431bde83

08001a78 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001a7c:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	4a04      	ldr	r2, [pc, #16]	; (8001a94 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001a82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a86:	6093      	str	r3, [r2, #8]
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40007000 	.word	0x40007000

08001a98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b088      	sub	sp, #32
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e308      	b.n	80020bc <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d075      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ab6:	4ba3      	ldr	r3, [pc, #652]	; (8001d44 <HAL_RCC_OscConfig+0x2ac>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 030c 	and.w	r3, r3, #12
 8001abe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ac0:	4ba0      	ldr	r3, [pc, #640]	; (8001d44 <HAL_RCC_OscConfig+0x2ac>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	f003 0303 	and.w	r3, r3, #3
 8001ac8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	2b0c      	cmp	r3, #12
 8001ace:	d102      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x3e>
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	2b03      	cmp	r3, #3
 8001ad4:	d002      	beq.n	8001adc <HAL_RCC_OscConfig+0x44>
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	d10b      	bne.n	8001af4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001adc:	4b99      	ldr	r3, [pc, #612]	; (8001d44 <HAL_RCC_OscConfig+0x2ac>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d05b      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x108>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d157      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e2e3      	b.n	80020bc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001afc:	d106      	bne.n	8001b0c <HAL_RCC_OscConfig+0x74>
 8001afe:	4b91      	ldr	r3, [pc, #580]	; (8001d44 <HAL_RCC_OscConfig+0x2ac>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a90      	ldr	r2, [pc, #576]	; (8001d44 <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	e01d      	b.n	8001b48 <HAL_RCC_OscConfig+0xb0>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b14:	d10c      	bne.n	8001b30 <HAL_RCC_OscConfig+0x98>
 8001b16:	4b8b      	ldr	r3, [pc, #556]	; (8001d44 <HAL_RCC_OscConfig+0x2ac>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a8a      	ldr	r2, [pc, #552]	; (8001d44 <HAL_RCC_OscConfig+0x2ac>)
 8001b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	4b88      	ldr	r3, [pc, #544]	; (8001d44 <HAL_RCC_OscConfig+0x2ac>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a87      	ldr	r2, [pc, #540]	; (8001d44 <HAL_RCC_OscConfig+0x2ac>)
 8001b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	e00b      	b.n	8001b48 <HAL_RCC_OscConfig+0xb0>
 8001b30:	4b84      	ldr	r3, [pc, #528]	; (8001d44 <HAL_RCC_OscConfig+0x2ac>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a83      	ldr	r2, [pc, #524]	; (8001d44 <HAL_RCC_OscConfig+0x2ac>)
 8001b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	4b81      	ldr	r3, [pc, #516]	; (8001d44 <HAL_RCC_OscConfig+0x2ac>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a80      	ldr	r2, [pc, #512]	; (8001d44 <HAL_RCC_OscConfig+0x2ac>)
 8001b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d013      	beq.n	8001b78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b50:	f7ff fc7c 	bl	800144c <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b58:	f7ff fc78 	bl	800144c <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b64      	cmp	r3, #100	; 0x64
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e2a8      	b.n	80020bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b6a:	4b76      	ldr	r3, [pc, #472]	; (8001d44 <HAL_RCC_OscConfig+0x2ac>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0f0      	beq.n	8001b58 <HAL_RCC_OscConfig+0xc0>
 8001b76:	e014      	b.n	8001ba2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b78:	f7ff fc68 	bl	800144c <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b80:	f7ff fc64 	bl	800144c <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b64      	cmp	r3, #100	; 0x64
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e294      	b.n	80020bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b92:	4b6c      	ldr	r3, [pc, #432]	; (8001d44 <HAL_RCC_OscConfig+0x2ac>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f0      	bne.n	8001b80 <HAL_RCC_OscConfig+0xe8>
 8001b9e:	e000      	b.n	8001ba2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d075      	beq.n	8001c9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bae:	4b65      	ldr	r3, [pc, #404]	; (8001d44 <HAL_RCC_OscConfig+0x2ac>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
 8001bb6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bb8:	4b62      	ldr	r3, [pc, #392]	; (8001d44 <HAL_RCC_OscConfig+0x2ac>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	f003 0303 	and.w	r3, r3, #3
 8001bc0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	2b0c      	cmp	r3, #12
 8001bc6:	d102      	bne.n	8001bce <HAL_RCC_OscConfig+0x136>
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d002      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x13c>
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d11f      	bne.n	8001c14 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bd4:	4b5b      	ldr	r3, [pc, #364]	; (8001d44 <HAL_RCC_OscConfig+0x2ac>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d005      	beq.n	8001bec <HAL_RCC_OscConfig+0x154>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e267      	b.n	80020bc <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bec:	4b55      	ldr	r3, [pc, #340]	; (8001d44 <HAL_RCC_OscConfig+0x2ac>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	061b      	lsls	r3, r3, #24
 8001bfa:	4952      	ldr	r1, [pc, #328]	; (8001d44 <HAL_RCC_OscConfig+0x2ac>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c00:	4b51      	ldr	r3, [pc, #324]	; (8001d48 <HAL_RCC_OscConfig+0x2b0>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fbd5 	bl	80013b4 <HAL_InitTick>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d043      	beq.n	8001c98 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e253      	b.n	80020bc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d023      	beq.n	8001c64 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c1c:	4b49      	ldr	r3, [pc, #292]	; (8001d44 <HAL_RCC_OscConfig+0x2ac>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a48      	ldr	r2, [pc, #288]	; (8001d44 <HAL_RCC_OscConfig+0x2ac>)
 8001c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c28:	f7ff fc10 	bl	800144c <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c30:	f7ff fc0c 	bl	800144c <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e23c      	b.n	80020bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c42:	4b40      	ldr	r3, [pc, #256]	; (8001d44 <HAL_RCC_OscConfig+0x2ac>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c4e:	4b3d      	ldr	r3, [pc, #244]	; (8001d44 <HAL_RCC_OscConfig+0x2ac>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	061b      	lsls	r3, r3, #24
 8001c5c:	4939      	ldr	r1, [pc, #228]	; (8001d44 <HAL_RCC_OscConfig+0x2ac>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	604b      	str	r3, [r1, #4]
 8001c62:	e01a      	b.n	8001c9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c64:	4b37      	ldr	r3, [pc, #220]	; (8001d44 <HAL_RCC_OscConfig+0x2ac>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a36      	ldr	r2, [pc, #216]	; (8001d44 <HAL_RCC_OscConfig+0x2ac>)
 8001c6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c70:	f7ff fbec 	bl	800144c <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c78:	f7ff fbe8 	bl	800144c <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e218      	b.n	80020bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c8a:	4b2e      	ldr	r3, [pc, #184]	; (8001d44 <HAL_RCC_OscConfig+0x2ac>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f0      	bne.n	8001c78 <HAL_RCC_OscConfig+0x1e0>
 8001c96:	e000      	b.n	8001c9a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d03c      	beq.n	8001d20 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d01c      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cae:	4b25      	ldr	r3, [pc, #148]	; (8001d44 <HAL_RCC_OscConfig+0x2ac>)
 8001cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cb4:	4a23      	ldr	r2, [pc, #140]	; (8001d44 <HAL_RCC_OscConfig+0x2ac>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cbe:	f7ff fbc5 	bl	800144c <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc6:	f7ff fbc1 	bl	800144c <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e1f1      	b.n	80020bc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cd8:	4b1a      	ldr	r3, [pc, #104]	; (8001d44 <HAL_RCC_OscConfig+0x2ac>)
 8001cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0ef      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x22e>
 8001ce6:	e01b      	b.n	8001d20 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ce8:	4b16      	ldr	r3, [pc, #88]	; (8001d44 <HAL_RCC_OscConfig+0x2ac>)
 8001cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cee:	4a15      	ldr	r2, [pc, #84]	; (8001d44 <HAL_RCC_OscConfig+0x2ac>)
 8001cf0:	f023 0301 	bic.w	r3, r3, #1
 8001cf4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf8:	f7ff fba8 	bl	800144c <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d00:	f7ff fba4 	bl	800144c <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e1d4      	b.n	80020bc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d12:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <HAL_RCC_OscConfig+0x2ac>)
 8001d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1ef      	bne.n	8001d00 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 80ab 	beq.w	8001e84 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d32:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <HAL_RCC_OscConfig+0x2ac>)
 8001d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d106      	bne.n	8001d4c <HAL_RCC_OscConfig+0x2b4>
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e005      	b.n	8001d4e <HAL_RCC_OscConfig+0x2b6>
 8001d42:	bf00      	nop
 8001d44:	40021000 	.word	0x40021000
 8001d48:	20000004 	.word	0x20000004
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00d      	beq.n	8001d6e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d52:	4baf      	ldr	r3, [pc, #700]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d56:	4aae      	ldr	r2, [pc, #696]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d5c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d5e:	4bac      	ldr	r3, [pc, #688]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d6e:	4ba9      	ldr	r3, [pc, #676]	; (8002014 <HAL_RCC_OscConfig+0x57c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d118      	bne.n	8001dac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d7a:	4ba6      	ldr	r3, [pc, #664]	; (8002014 <HAL_RCC_OscConfig+0x57c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4aa5      	ldr	r2, [pc, #660]	; (8002014 <HAL_RCC_OscConfig+0x57c>)
 8001d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d86:	f7ff fb61 	bl	800144c <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d8e:	f7ff fb5d 	bl	800144c <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e18d      	b.n	80020bc <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001da0:	4b9c      	ldr	r3, [pc, #624]	; (8002014 <HAL_RCC_OscConfig+0x57c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0f0      	beq.n	8001d8e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d108      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x32e>
 8001db4:	4b96      	ldr	r3, [pc, #600]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dba:	4a95      	ldr	r2, [pc, #596]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dc4:	e024      	b.n	8001e10 <HAL_RCC_OscConfig+0x378>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	2b05      	cmp	r3, #5
 8001dcc:	d110      	bne.n	8001df0 <HAL_RCC_OscConfig+0x358>
 8001dce:	4b90      	ldr	r3, [pc, #576]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd4:	4a8e      	ldr	r2, [pc, #568]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001dd6:	f043 0304 	orr.w	r3, r3, #4
 8001dda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dde:	4b8c      	ldr	r3, [pc, #560]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de4:	4a8a      	ldr	r2, [pc, #552]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dee:	e00f      	b.n	8001e10 <HAL_RCC_OscConfig+0x378>
 8001df0:	4b87      	ldr	r3, [pc, #540]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df6:	4a86      	ldr	r2, [pc, #536]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001df8:	f023 0301 	bic.w	r3, r3, #1
 8001dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e00:	4b83      	ldr	r3, [pc, #524]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e06:	4a82      	ldr	r2, [pc, #520]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001e08:	f023 0304 	bic.w	r3, r3, #4
 8001e0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d016      	beq.n	8001e46 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e18:	f7ff fb18 	bl	800144c <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e1e:	e00a      	b.n	8001e36 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e20:	f7ff fb14 	bl	800144c <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e142      	b.n	80020bc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e36:	4b76      	ldr	r3, [pc, #472]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0ed      	beq.n	8001e20 <HAL_RCC_OscConfig+0x388>
 8001e44:	e015      	b.n	8001e72 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e46:	f7ff fb01 	bl	800144c <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e4c:	e00a      	b.n	8001e64 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e4e:	f7ff fafd 	bl	800144c <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e12b      	b.n	80020bc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e64:	4b6a      	ldr	r3, [pc, #424]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1ed      	bne.n	8001e4e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e72:	7ffb      	ldrb	r3, [r7, #31]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d105      	bne.n	8001e84 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e78:	4b65      	ldr	r3, [pc, #404]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7c:	4a64      	ldr	r2, [pc, #400]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001e7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e82:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0320 	and.w	r3, r3, #32
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d03c      	beq.n	8001f0a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d01c      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e98:	4b5d      	ldr	r3, [pc, #372]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001e9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e9e:	4a5c      	ldr	r2, [pc, #368]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea8:	f7ff fad0 	bl	800144c <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001eb0:	f7ff facc 	bl	800144c <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e0fc      	b.n	80020bc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ec2:	4b53      	ldr	r3, [pc, #332]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001ec4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0ef      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x418>
 8001ed0:	e01b      	b.n	8001f0a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ed2:	4b4f      	ldr	r3, [pc, #316]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001ed4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ed8:	4a4d      	ldr	r2, [pc, #308]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001eda:	f023 0301 	bic.w	r3, r3, #1
 8001ede:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee2:	f7ff fab3 	bl	800144c <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001eea:	f7ff faaf 	bl	800144c <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e0df      	b.n	80020bc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001efc:	4b44      	ldr	r3, [pc, #272]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001efe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1ef      	bne.n	8001eea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 80d3 	beq.w	80020ba <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f14:	4b3e      	ldr	r3, [pc, #248]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 030c 	and.w	r3, r3, #12
 8001f1c:	2b0c      	cmp	r3, #12
 8001f1e:	f000 808d 	beq.w	800203c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d15a      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f2a:	4b39      	ldr	r3, [pc, #228]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a38      	ldr	r2, [pc, #224]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001f30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f36:	f7ff fa89 	bl	800144c <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f3e:	f7ff fa85 	bl	800144c <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e0b5      	b.n	80020bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f50:	4b2f      	ldr	r3, [pc, #188]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1f0      	bne.n	8001f3e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f5c:	4b2c      	ldr	r3, [pc, #176]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	4b2d      	ldr	r3, [pc, #180]	; (8002018 <HAL_RCC_OscConfig+0x580>)
 8001f62:	4013      	ands	r3, r2
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6a11      	ldr	r1, [r2, #32]
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f6c:	3a01      	subs	r2, #1
 8001f6e:	0112      	lsls	r2, r2, #4
 8001f70:	4311      	orrs	r1, r2
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001f76:	0212      	lsls	r2, r2, #8
 8001f78:	4311      	orrs	r1, r2
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f7e:	0852      	lsrs	r2, r2, #1
 8001f80:	3a01      	subs	r2, #1
 8001f82:	0552      	lsls	r2, r2, #21
 8001f84:	4311      	orrs	r1, r2
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f8a:	0852      	lsrs	r2, r2, #1
 8001f8c:	3a01      	subs	r2, #1
 8001f8e:	0652      	lsls	r2, r2, #25
 8001f90:	4311      	orrs	r1, r2
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f96:	06d2      	lsls	r2, r2, #27
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	491d      	ldr	r1, [pc, #116]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fa0:	4b1b      	ldr	r3, [pc, #108]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a1a      	ldr	r2, [pc, #104]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001fa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001faa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fac:	4b18      	ldr	r3, [pc, #96]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	4a17      	ldr	r2, [pc, #92]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001fb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fb6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb8:	f7ff fa48 	bl	800144c <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc0:	f7ff fa44 	bl	800144c <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e074      	b.n	80020bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd2:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x528>
 8001fde:	e06c      	b.n	80020ba <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a0a      	ldr	r2, [pc, #40]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001fe6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fea:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001fec:	4b08      	ldr	r3, [pc, #32]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	4a07      	ldr	r2, [pc, #28]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001ff2:	f023 0303 	bic.w	r3, r3, #3
 8001ff6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	4a04      	ldr	r2, [pc, #16]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001ffe:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002006:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002008:	f7ff fa20 	bl	800144c <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800200e:	e00e      	b.n	800202e <HAL_RCC_OscConfig+0x596>
 8002010:	40021000 	.word	0x40021000
 8002014:	40007000 	.word	0x40007000
 8002018:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201c:	f7ff fa16 	bl	800144c <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e046      	b.n	80020bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800202e:	4b25      	ldr	r3, [pc, #148]	; (80020c4 <HAL_RCC_OscConfig+0x62c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1f0      	bne.n	800201c <HAL_RCC_OscConfig+0x584>
 800203a:	e03e      	b.n	80020ba <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69db      	ldr	r3, [r3, #28]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d101      	bne.n	8002048 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e039      	b.n	80020bc <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002048:	4b1e      	ldr	r3, [pc, #120]	; (80020c4 <HAL_RCC_OscConfig+0x62c>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f003 0203 	and.w	r2, r3, #3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	429a      	cmp	r2, r3
 800205a:	d12c      	bne.n	80020b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002066:	3b01      	subs	r3, #1
 8002068:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800206a:	429a      	cmp	r2, r3
 800206c:	d123      	bne.n	80020b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002078:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800207a:	429a      	cmp	r2, r3
 800207c:	d11b      	bne.n	80020b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002088:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800208a:	429a      	cmp	r2, r3
 800208c:	d113      	bne.n	80020b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002098:	085b      	lsrs	r3, r3, #1
 800209a:	3b01      	subs	r3, #1
 800209c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800209e:	429a      	cmp	r2, r3
 80020a0:	d109      	bne.n	80020b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ac:	085b      	lsrs	r3, r3, #1
 80020ae:	3b01      	subs	r3, #1
 80020b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d001      	beq.n	80020ba <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3720      	adds	r7, #32
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40021000 	.word	0x40021000

080020c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e11e      	b.n	800231e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020e0:	4b91      	ldr	r3, [pc, #580]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 030f 	and.w	r3, r3, #15
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d910      	bls.n	8002110 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ee:	4b8e      	ldr	r3, [pc, #568]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f023 020f 	bic.w	r2, r3, #15
 80020f6:	498c      	ldr	r1, [pc, #560]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fe:	4b8a      	ldr	r3, [pc, #552]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d001      	beq.n	8002110 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e106      	b.n	800231e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	2b00      	cmp	r3, #0
 800211a:	d073      	beq.n	8002204 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b03      	cmp	r3, #3
 8002122:	d129      	bne.n	8002178 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002124:	4b81      	ldr	r3, [pc, #516]	; (800232c <HAL_RCC_ClockConfig+0x264>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e0f4      	b.n	800231e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002134:	f000 f964 	bl	8002400 <RCC_GetSysClockFreqFromPLLSource>
 8002138:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	4a7c      	ldr	r2, [pc, #496]	; (8002330 <HAL_RCC_ClockConfig+0x268>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d93f      	bls.n	80021c2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002142:	4b7a      	ldr	r3, [pc, #488]	; (800232c <HAL_RCC_ClockConfig+0x264>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d009      	beq.n	8002162 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002156:	2b00      	cmp	r3, #0
 8002158:	d033      	beq.n	80021c2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800215e:	2b00      	cmp	r3, #0
 8002160:	d12f      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002162:	4b72      	ldr	r3, [pc, #456]	; (800232c <HAL_RCC_ClockConfig+0x264>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800216a:	4a70      	ldr	r2, [pc, #448]	; (800232c <HAL_RCC_ClockConfig+0x264>)
 800216c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002170:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002172:	2380      	movs	r3, #128	; 0x80
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	e024      	b.n	80021c2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b02      	cmp	r3, #2
 800217e:	d107      	bne.n	8002190 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002180:	4b6a      	ldr	r3, [pc, #424]	; (800232c <HAL_RCC_ClockConfig+0x264>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d109      	bne.n	80021a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e0c6      	b.n	800231e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002190:	4b66      	ldr	r3, [pc, #408]	; (800232c <HAL_RCC_ClockConfig+0x264>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e0be      	b.n	800231e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80021a0:	f000 f8ce 	bl	8002340 <HAL_RCC_GetSysClockFreq>
 80021a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4a61      	ldr	r2, [pc, #388]	; (8002330 <HAL_RCC_ClockConfig+0x268>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d909      	bls.n	80021c2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021ae:	4b5f      	ldr	r3, [pc, #380]	; (800232c <HAL_RCC_ClockConfig+0x264>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021b6:	4a5d      	ldr	r2, [pc, #372]	; (800232c <HAL_RCC_ClockConfig+0x264>)
 80021b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80021be:	2380      	movs	r3, #128	; 0x80
 80021c0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021c2:	4b5a      	ldr	r3, [pc, #360]	; (800232c <HAL_RCC_ClockConfig+0x264>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f023 0203 	bic.w	r2, r3, #3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	4957      	ldr	r1, [pc, #348]	; (800232c <HAL_RCC_ClockConfig+0x264>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021d4:	f7ff f93a 	bl	800144c <HAL_GetTick>
 80021d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021da:	e00a      	b.n	80021f2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021dc:	f7ff f936 	bl	800144c <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e095      	b.n	800231e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f2:	4b4e      	ldr	r3, [pc, #312]	; (800232c <HAL_RCC_ClockConfig+0x264>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 020c 	and.w	r2, r3, #12
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	429a      	cmp	r2, r3
 8002202:	d1eb      	bne.n	80021dc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d023      	beq.n	8002258 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	d005      	beq.n	8002228 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800221c:	4b43      	ldr	r3, [pc, #268]	; (800232c <HAL_RCC_ClockConfig+0x264>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	4a42      	ldr	r2, [pc, #264]	; (800232c <HAL_RCC_ClockConfig+0x264>)
 8002222:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002226:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0308 	and.w	r3, r3, #8
 8002230:	2b00      	cmp	r3, #0
 8002232:	d007      	beq.n	8002244 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002234:	4b3d      	ldr	r3, [pc, #244]	; (800232c <HAL_RCC_ClockConfig+0x264>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800223c:	4a3b      	ldr	r2, [pc, #236]	; (800232c <HAL_RCC_ClockConfig+0x264>)
 800223e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002242:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002244:	4b39      	ldr	r3, [pc, #228]	; (800232c <HAL_RCC_ClockConfig+0x264>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	4936      	ldr	r1, [pc, #216]	; (800232c <HAL_RCC_ClockConfig+0x264>)
 8002252:	4313      	orrs	r3, r2
 8002254:	608b      	str	r3, [r1, #8]
 8002256:	e008      	b.n	800226a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	2b80      	cmp	r3, #128	; 0x80
 800225c:	d105      	bne.n	800226a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800225e:	4b33      	ldr	r3, [pc, #204]	; (800232c <HAL_RCC_ClockConfig+0x264>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	4a32      	ldr	r2, [pc, #200]	; (800232c <HAL_RCC_ClockConfig+0x264>)
 8002264:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002268:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800226a:	4b2f      	ldr	r3, [pc, #188]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d21d      	bcs.n	80022b4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002278:	4b2b      	ldr	r3, [pc, #172]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f023 020f 	bic.w	r2, r3, #15
 8002280:	4929      	ldr	r1, [pc, #164]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	4313      	orrs	r3, r2
 8002286:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002288:	f7ff f8e0 	bl	800144c <HAL_GetTick>
 800228c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800228e:	e00a      	b.n	80022a6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002290:	f7ff f8dc 	bl	800144c <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	f241 3288 	movw	r2, #5000	; 0x1388
 800229e:	4293      	cmp	r3, r2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e03b      	b.n	800231e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022a6:	4b20      	ldr	r3, [pc, #128]	; (8002328 <HAL_RCC_ClockConfig+0x260>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d1ed      	bne.n	8002290 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d008      	beq.n	80022d2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022c0:	4b1a      	ldr	r3, [pc, #104]	; (800232c <HAL_RCC_ClockConfig+0x264>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	4917      	ldr	r1, [pc, #92]	; (800232c <HAL_RCC_ClockConfig+0x264>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d009      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022de:	4b13      	ldr	r3, [pc, #76]	; (800232c <HAL_RCC_ClockConfig+0x264>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	490f      	ldr	r1, [pc, #60]	; (800232c <HAL_RCC_ClockConfig+0x264>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022f2:	f000 f825 	bl	8002340 <HAL_RCC_GetSysClockFreq>
 80022f6:	4602      	mov	r2, r0
 80022f8:	4b0c      	ldr	r3, [pc, #48]	; (800232c <HAL_RCC_ClockConfig+0x264>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	091b      	lsrs	r3, r3, #4
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	490c      	ldr	r1, [pc, #48]	; (8002334 <HAL_RCC_ClockConfig+0x26c>)
 8002304:	5ccb      	ldrb	r3, [r1, r3]
 8002306:	f003 031f 	and.w	r3, r3, #31
 800230a:	fa22 f303 	lsr.w	r3, r2, r3
 800230e:	4a0a      	ldr	r2, [pc, #40]	; (8002338 <HAL_RCC_ClockConfig+0x270>)
 8002310:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002312:	4b0a      	ldr	r3, [pc, #40]	; (800233c <HAL_RCC_ClockConfig+0x274>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff f84c 	bl	80013b4 <HAL_InitTick>
 800231c:	4603      	mov	r3, r0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40022000 	.word	0x40022000
 800232c:	40021000 	.word	0x40021000
 8002330:	04c4b400 	.word	0x04c4b400
 8002334:	08004ae0 	.word	0x08004ae0
 8002338:	20000000 	.word	0x20000000
 800233c:	20000004 	.word	0x20000004

08002340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002340:	b480      	push	{r7}
 8002342:	b087      	sub	sp, #28
 8002344:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002346:	4b2c      	ldr	r3, [pc, #176]	; (80023f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 030c 	and.w	r3, r3, #12
 800234e:	2b04      	cmp	r3, #4
 8002350:	d102      	bne.n	8002358 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002352:	4b2a      	ldr	r3, [pc, #168]	; (80023fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002354:	613b      	str	r3, [r7, #16]
 8002356:	e047      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002358:	4b27      	ldr	r3, [pc, #156]	; (80023f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 030c 	and.w	r3, r3, #12
 8002360:	2b08      	cmp	r3, #8
 8002362:	d102      	bne.n	800236a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002364:	4b25      	ldr	r3, [pc, #148]	; (80023fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	e03e      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800236a:	4b23      	ldr	r3, [pc, #140]	; (80023f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 030c 	and.w	r3, r3, #12
 8002372:	2b0c      	cmp	r3, #12
 8002374:	d136      	bne.n	80023e4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002376:	4b20      	ldr	r3, [pc, #128]	; (80023f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002380:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	091b      	lsrs	r3, r3, #4
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	3301      	adds	r3, #1
 800238c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2b03      	cmp	r3, #3
 8002392:	d10c      	bne.n	80023ae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002394:	4a19      	ldr	r2, [pc, #100]	; (80023fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	fbb2 f3f3 	udiv	r3, r2, r3
 800239c:	4a16      	ldr	r2, [pc, #88]	; (80023f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800239e:	68d2      	ldr	r2, [r2, #12]
 80023a0:	0a12      	lsrs	r2, r2, #8
 80023a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023a6:	fb02 f303 	mul.w	r3, r2, r3
 80023aa:	617b      	str	r3, [r7, #20]
      break;
 80023ac:	e00c      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023ae:	4a13      	ldr	r2, [pc, #76]	; (80023fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b6:	4a10      	ldr	r2, [pc, #64]	; (80023f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023b8:	68d2      	ldr	r2, [r2, #12]
 80023ba:	0a12      	lsrs	r2, r2, #8
 80023bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023c0:	fb02 f303 	mul.w	r3, r2, r3
 80023c4:	617b      	str	r3, [r7, #20]
      break;
 80023c6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023c8:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	0e5b      	lsrs	r3, r3, #25
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	3301      	adds	r3, #1
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e0:	613b      	str	r3, [r7, #16]
 80023e2:	e001      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80023e8:	693b      	ldr	r3, [r7, #16]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	371c      	adds	r7, #28
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40021000 	.word	0x40021000
 80023fc:	00f42400 	.word	0x00f42400

08002400 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002400:	b480      	push	{r7}
 8002402:	b087      	sub	sp, #28
 8002404:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002406:	4b1e      	ldr	r3, [pc, #120]	; (8002480 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002410:	4b1b      	ldr	r3, [pc, #108]	; (8002480 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	091b      	lsrs	r3, r3, #4
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	3301      	adds	r3, #1
 800241c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	2b03      	cmp	r3, #3
 8002422:	d10c      	bne.n	800243e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002424:	4a17      	ldr	r2, [pc, #92]	; (8002484 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	fbb2 f3f3 	udiv	r3, r2, r3
 800242c:	4a14      	ldr	r2, [pc, #80]	; (8002480 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800242e:	68d2      	ldr	r2, [r2, #12]
 8002430:	0a12      	lsrs	r2, r2, #8
 8002432:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002436:	fb02 f303 	mul.w	r3, r2, r3
 800243a:	617b      	str	r3, [r7, #20]
    break;
 800243c:	e00c      	b.n	8002458 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800243e:	4a11      	ldr	r2, [pc, #68]	; (8002484 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	fbb2 f3f3 	udiv	r3, r2, r3
 8002446:	4a0e      	ldr	r2, [pc, #56]	; (8002480 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002448:	68d2      	ldr	r2, [r2, #12]
 800244a:	0a12      	lsrs	r2, r2, #8
 800244c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002450:	fb02 f303 	mul.w	r3, r2, r3
 8002454:	617b      	str	r3, [r7, #20]
    break;
 8002456:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002458:	4b09      	ldr	r3, [pc, #36]	; (8002480 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	0e5b      	lsrs	r3, r3, #25
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	3301      	adds	r3, #1
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002470:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002472:	687b      	ldr	r3, [r7, #4]
}
 8002474:	4618      	mov	r0, r3
 8002476:	371c      	adds	r7, #28
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	40021000 	.word	0x40021000
 8002484:	00f42400 	.word	0x00f42400

08002488 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002490:	2300      	movs	r3, #0
 8002492:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002494:	2300      	movs	r3, #0
 8002496:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 8098 	beq.w	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024a6:	2300      	movs	r3, #0
 80024a8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024aa:	4b43      	ldr	r3, [pc, #268]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10d      	bne.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b6:	4b40      	ldr	r3, [pc, #256]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ba:	4a3f      	ldr	r2, [pc, #252]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c0:	6593      	str	r3, [r2, #88]	; 0x58
 80024c2:	4b3d      	ldr	r3, [pc, #244]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ce:	2301      	movs	r3, #1
 80024d0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024d2:	4b3a      	ldr	r3, [pc, #232]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a39      	ldr	r2, [pc, #228]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80024d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024de:	f7fe ffb5 	bl	800144c <HAL_GetTick>
 80024e2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024e4:	e009      	b.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e6:	f7fe ffb1 	bl	800144c <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d902      	bls.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	74fb      	strb	r3, [r7, #19]
        break;
 80024f8:	e005      	b.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024fa:	4b30      	ldr	r3, [pc, #192]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0ef      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002506:	7cfb      	ldrb	r3, [r7, #19]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d159      	bne.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800250c:	4b2a      	ldr	r3, [pc, #168]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800250e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002516:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d01e      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	429a      	cmp	r2, r3
 8002526:	d019      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002528:	4b23      	ldr	r3, [pc, #140]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800252a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002532:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002534:	4b20      	ldr	r3, [pc, #128]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253a:	4a1f      	ldr	r2, [pc, #124]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800253c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002540:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002544:	4b1c      	ldr	r3, [pc, #112]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254a:	4a1b      	ldr	r2, [pc, #108]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800254c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002550:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002554:	4a18      	ldr	r2, [pc, #96]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d016      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002566:	f7fe ff71 	bl	800144c <HAL_GetTick>
 800256a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800256c:	e00b      	b.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800256e:	f7fe ff6d 	bl	800144c <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	f241 3288 	movw	r2, #5000	; 0x1388
 800257c:	4293      	cmp	r3, r2
 800257e:	d902      	bls.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	74fb      	strb	r3, [r7, #19]
            break;
 8002584:	e006      	b.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002586:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0ec      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002594:	7cfb      	ldrb	r3, [r7, #19]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10b      	bne.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800259a:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800259c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	4903      	ldr	r1, [pc, #12]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80025b0:	e008      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025b2:	7cfb      	ldrb	r3, [r7, #19]
 80025b4:	74bb      	strb	r3, [r7, #18]
 80025b6:	e005      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025c0:	7cfb      	ldrb	r3, [r7, #19]
 80025c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025c4:	7c7b      	ldrb	r3, [r7, #17]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d105      	bne.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ca:	4ba6      	ldr	r3, [pc, #664]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ce:	4aa5      	ldr	r2, [pc, #660]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00a      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025e2:	4ba0      	ldr	r3, [pc, #640]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e8:	f023 0203 	bic.w	r2, r3, #3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	499c      	ldr	r1, [pc, #624]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00a      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002604:	4b97      	ldr	r3, [pc, #604]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260a:	f023 020c 	bic.w	r2, r3, #12
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	4994      	ldr	r1, [pc, #592]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002614:	4313      	orrs	r3, r2
 8002616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0304 	and.w	r3, r3, #4
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00a      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002626:	4b8f      	ldr	r3, [pc, #572]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	498b      	ldr	r1, [pc, #556]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002636:	4313      	orrs	r3, r2
 8002638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0308 	and.w	r3, r3, #8
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00a      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002648:	4b86      	ldr	r3, [pc, #536]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800264a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	4983      	ldr	r1, [pc, #524]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002658:	4313      	orrs	r3, r2
 800265a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0320 	and.w	r3, r3, #32
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00a      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800266a:	4b7e      	ldr	r3, [pc, #504]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800266c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002670:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	497a      	ldr	r1, [pc, #488]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800267a:	4313      	orrs	r3, r2
 800267c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00a      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800268c:	4b75      	ldr	r3, [pc, #468]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800268e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002692:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	4972      	ldr	r1, [pc, #456]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800269c:	4313      	orrs	r3, r2
 800269e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00a      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026ae:	4b6d      	ldr	r3, [pc, #436]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	4969      	ldr	r1, [pc, #420]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00a      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026d0:	4b64      	ldr	r3, [pc, #400]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	4961      	ldr	r1, [pc, #388]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00a      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026f2:	4b5c      	ldr	r3, [pc, #368]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	4958      	ldr	r1, [pc, #352]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002702:	4313      	orrs	r3, r2
 8002704:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002710:	2b00      	cmp	r3, #0
 8002712:	d015      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002714:	4b53      	ldr	r3, [pc, #332]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002722:	4950      	ldr	r1, [pc, #320]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002724:	4313      	orrs	r3, r2
 8002726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002732:	d105      	bne.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002734:	4b4b      	ldr	r3, [pc, #300]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	4a4a      	ldr	r2, [pc, #296]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800273a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800273e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002748:	2b00      	cmp	r3, #0
 800274a:	d015      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800274c:	4b45      	ldr	r3, [pc, #276]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800274e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002752:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275a:	4942      	ldr	r1, [pc, #264]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800275c:	4313      	orrs	r3, r2
 800275e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002766:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800276a:	d105      	bne.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800276c:	4b3d      	ldr	r3, [pc, #244]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	4a3c      	ldr	r2, [pc, #240]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002772:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002776:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d015      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002784:	4b37      	ldr	r3, [pc, #220]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	4934      	ldr	r1, [pc, #208]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002794:	4313      	orrs	r3, r2
 8002796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027a2:	d105      	bne.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027a4:	4b2f      	ldr	r3, [pc, #188]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	4a2e      	ldr	r2, [pc, #184]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027ae:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d015      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027bc:	4b29      	ldr	r3, [pc, #164]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ca:	4926      	ldr	r1, [pc, #152]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027da:	d105      	bne.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027dc:	4b21      	ldr	r3, [pc, #132]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	4a20      	ldr	r2, [pc, #128]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027e6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d015      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027f4:	4b1b      	ldr	r3, [pc, #108]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002802:	4918      	ldr	r1, [pc, #96]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002804:	4313      	orrs	r3, r2
 8002806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002812:	d105      	bne.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002814:	4b13      	ldr	r3, [pc, #76]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	4a12      	ldr	r2, [pc, #72]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800281a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800281e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d015      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800282c:	4b0d      	ldr	r3, [pc, #52]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800282e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002832:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283a:	490a      	ldr	r1, [pc, #40]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800283c:	4313      	orrs	r3, r2
 800283e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002846:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800284a:	d105      	bne.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800284c:	4b05      	ldr	r3, [pc, #20]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	4a04      	ldr	r2, [pc, #16]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002856:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002858:	7cbb      	ldrb	r3, [r7, #18]
}
 800285a:	4618      	mov	r0, r3
 800285c:	3718      	adds	r7, #24
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40021000 	.word	0x40021000

08002868 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e049      	b.n	800290e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d106      	bne.n	8002894 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7fe fc3a 	bl	8001108 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2202      	movs	r2, #2
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3304      	adds	r3, #4
 80028a4:	4619      	mov	r1, r3
 80028a6:	4610      	mov	r0, r2
 80028a8:	f000 faa4 	bl	8002df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e049      	b.n	80029bc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	d106      	bne.n	8002942 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 f841 	bl	80029c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2202      	movs	r2, #2
 8002946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3304      	adds	r3, #4
 8002952:	4619      	mov	r1, r3
 8002954:	4610      	mov	r0, r2
 8002956:	f000 fa4d 	bl	8002df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029e4:	2300      	movs	r3, #0
 80029e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d101      	bne.n	80029f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80029f2:	2302      	movs	r3, #2
 80029f4:	e0ff      	b.n	8002bf6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b14      	cmp	r3, #20
 8002a02:	f200 80f0 	bhi.w	8002be6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002a06:	a201      	add	r2, pc, #4	; (adr r2, 8002a0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0c:	08002a61 	.word	0x08002a61
 8002a10:	08002be7 	.word	0x08002be7
 8002a14:	08002be7 	.word	0x08002be7
 8002a18:	08002be7 	.word	0x08002be7
 8002a1c:	08002aa1 	.word	0x08002aa1
 8002a20:	08002be7 	.word	0x08002be7
 8002a24:	08002be7 	.word	0x08002be7
 8002a28:	08002be7 	.word	0x08002be7
 8002a2c:	08002ae3 	.word	0x08002ae3
 8002a30:	08002be7 	.word	0x08002be7
 8002a34:	08002be7 	.word	0x08002be7
 8002a38:	08002be7 	.word	0x08002be7
 8002a3c:	08002b23 	.word	0x08002b23
 8002a40:	08002be7 	.word	0x08002be7
 8002a44:	08002be7 	.word	0x08002be7
 8002a48:	08002be7 	.word	0x08002be7
 8002a4c:	08002b65 	.word	0x08002b65
 8002a50:	08002be7 	.word	0x08002be7
 8002a54:	08002be7 	.word	0x08002be7
 8002a58:	08002be7 	.word	0x08002be7
 8002a5c:	08002ba5 	.word	0x08002ba5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68b9      	ldr	r1, [r7, #8]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 fa54 	bl	8002f14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699a      	ldr	r2, [r3, #24]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0208 	orr.w	r2, r2, #8
 8002a7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699a      	ldr	r2, [r3, #24]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0204 	bic.w	r2, r2, #4
 8002a8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6999      	ldr	r1, [r3, #24]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	691a      	ldr	r2, [r3, #16]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	619a      	str	r2, [r3, #24]
      break;
 8002a9e:	e0a5      	b.n	8002bec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68b9      	ldr	r1, [r7, #8]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 fac4 	bl	8003034 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	699a      	ldr	r2, [r3, #24]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699a      	ldr	r2, [r3, #24]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6999      	ldr	r1, [r3, #24]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	021a      	lsls	r2, r3, #8
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	619a      	str	r2, [r3, #24]
      break;
 8002ae0:	e084      	b.n	8002bec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68b9      	ldr	r1, [r7, #8]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 fb2d 	bl	8003148 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	69da      	ldr	r2, [r3, #28]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f042 0208 	orr.w	r2, r2, #8
 8002afc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	69da      	ldr	r2, [r3, #28]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0204 	bic.w	r2, r2, #4
 8002b0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	69d9      	ldr	r1, [r3, #28]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	691a      	ldr	r2, [r3, #16]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	61da      	str	r2, [r3, #28]
      break;
 8002b20:	e064      	b.n	8002bec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68b9      	ldr	r1, [r7, #8]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 fb95 	bl	8003258 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	69da      	ldr	r2, [r3, #28]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	69da      	ldr	r2, [r3, #28]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	69d9      	ldr	r1, [r3, #28]
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	021a      	lsls	r2, r3, #8
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	61da      	str	r2, [r3, #28]
      break;
 8002b62:	e043      	b.n	8002bec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68b9      	ldr	r1, [r7, #8]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 fbfe 	bl	800336c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0208 	orr.w	r2, r2, #8
 8002b7e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0204 	bic.w	r2, r2, #4
 8002b8e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	691a      	ldr	r2, [r3, #16]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002ba2:	e023      	b.n	8002bec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68b9      	ldr	r1, [r7, #8]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 fc42 	bl	8003434 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bbe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bce:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	021a      	lsls	r2, r3, #8
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002be4:	e002      	b.n	8002bec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	75fb      	strb	r3, [r7, #23]
      break;
 8002bea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop

08002c00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d101      	bne.n	8002c1c <HAL_TIM_ConfigClockSource+0x1c>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e0de      	b.n	8002dda <HAL_TIM_ConfigClockSource+0x1da>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2202      	movs	r2, #2
 8002c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002c3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a63      	ldr	r2, [pc, #396]	; (8002de4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	f000 80a9 	beq.w	8002dae <HAL_TIM_ConfigClockSource+0x1ae>
 8002c5c:	4a61      	ldr	r2, [pc, #388]	; (8002de4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	f200 80ae 	bhi.w	8002dc0 <HAL_TIM_ConfigClockSource+0x1c0>
 8002c64:	4a60      	ldr	r2, [pc, #384]	; (8002de8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	f000 80a1 	beq.w	8002dae <HAL_TIM_ConfigClockSource+0x1ae>
 8002c6c:	4a5e      	ldr	r2, [pc, #376]	; (8002de8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	f200 80a6 	bhi.w	8002dc0 <HAL_TIM_ConfigClockSource+0x1c0>
 8002c74:	4a5d      	ldr	r2, [pc, #372]	; (8002dec <HAL_TIM_ConfigClockSource+0x1ec>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	f000 8099 	beq.w	8002dae <HAL_TIM_ConfigClockSource+0x1ae>
 8002c7c:	4a5b      	ldr	r2, [pc, #364]	; (8002dec <HAL_TIM_ConfigClockSource+0x1ec>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	f200 809e 	bhi.w	8002dc0 <HAL_TIM_ConfigClockSource+0x1c0>
 8002c84:	4a5a      	ldr	r2, [pc, #360]	; (8002df0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	f000 8091 	beq.w	8002dae <HAL_TIM_ConfigClockSource+0x1ae>
 8002c8c:	4a58      	ldr	r2, [pc, #352]	; (8002df0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	f200 8096 	bhi.w	8002dc0 <HAL_TIM_ConfigClockSource+0x1c0>
 8002c94:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002c98:	f000 8089 	beq.w	8002dae <HAL_TIM_ConfigClockSource+0x1ae>
 8002c9c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002ca0:	f200 808e 	bhi.w	8002dc0 <HAL_TIM_ConfigClockSource+0x1c0>
 8002ca4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ca8:	d03e      	beq.n	8002d28 <HAL_TIM_ConfigClockSource+0x128>
 8002caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cae:	f200 8087 	bhi.w	8002dc0 <HAL_TIM_ConfigClockSource+0x1c0>
 8002cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb6:	f000 8086 	beq.w	8002dc6 <HAL_TIM_ConfigClockSource+0x1c6>
 8002cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cbe:	d87f      	bhi.n	8002dc0 <HAL_TIM_ConfigClockSource+0x1c0>
 8002cc0:	2b70      	cmp	r3, #112	; 0x70
 8002cc2:	d01a      	beq.n	8002cfa <HAL_TIM_ConfigClockSource+0xfa>
 8002cc4:	2b70      	cmp	r3, #112	; 0x70
 8002cc6:	d87b      	bhi.n	8002dc0 <HAL_TIM_ConfigClockSource+0x1c0>
 8002cc8:	2b60      	cmp	r3, #96	; 0x60
 8002cca:	d050      	beq.n	8002d6e <HAL_TIM_ConfigClockSource+0x16e>
 8002ccc:	2b60      	cmp	r3, #96	; 0x60
 8002cce:	d877      	bhi.n	8002dc0 <HAL_TIM_ConfigClockSource+0x1c0>
 8002cd0:	2b50      	cmp	r3, #80	; 0x50
 8002cd2:	d03c      	beq.n	8002d4e <HAL_TIM_ConfigClockSource+0x14e>
 8002cd4:	2b50      	cmp	r3, #80	; 0x50
 8002cd6:	d873      	bhi.n	8002dc0 <HAL_TIM_ConfigClockSource+0x1c0>
 8002cd8:	2b40      	cmp	r3, #64	; 0x40
 8002cda:	d058      	beq.n	8002d8e <HAL_TIM_ConfigClockSource+0x18e>
 8002cdc:	2b40      	cmp	r3, #64	; 0x40
 8002cde:	d86f      	bhi.n	8002dc0 <HAL_TIM_ConfigClockSource+0x1c0>
 8002ce0:	2b30      	cmp	r3, #48	; 0x30
 8002ce2:	d064      	beq.n	8002dae <HAL_TIM_ConfigClockSource+0x1ae>
 8002ce4:	2b30      	cmp	r3, #48	; 0x30
 8002ce6:	d86b      	bhi.n	8002dc0 <HAL_TIM_ConfigClockSource+0x1c0>
 8002ce8:	2b20      	cmp	r3, #32
 8002cea:	d060      	beq.n	8002dae <HAL_TIM_ConfigClockSource+0x1ae>
 8002cec:	2b20      	cmp	r3, #32
 8002cee:	d867      	bhi.n	8002dc0 <HAL_TIM_ConfigClockSource+0x1c0>
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d05c      	beq.n	8002dae <HAL_TIM_ConfigClockSource+0x1ae>
 8002cf4:	2b10      	cmp	r3, #16
 8002cf6:	d05a      	beq.n	8002dae <HAL_TIM_ConfigClockSource+0x1ae>
 8002cf8:	e062      	b.n	8002dc0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6818      	ldr	r0, [r3, #0]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	6899      	ldr	r1, [r3, #8]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f000 fc75 	bl	80035f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68ba      	ldr	r2, [r7, #8]
 8002d24:	609a      	str	r2, [r3, #8]
      break;
 8002d26:	e04f      	b.n	8002dc8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6818      	ldr	r0, [r3, #0]
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	6899      	ldr	r1, [r3, #8]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f000 fc5e 	bl	80035f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689a      	ldr	r2, [r3, #8]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d4a:	609a      	str	r2, [r3, #8]
      break;
 8002d4c:	e03c      	b.n	8002dc8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6818      	ldr	r0, [r3, #0]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	6859      	ldr	r1, [r3, #4]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	f000 fbd0 	bl	8003500 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2150      	movs	r1, #80	; 0x50
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 fc29 	bl	80035be <TIM_ITRx_SetConfig>
      break;
 8002d6c:	e02c      	b.n	8002dc8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6818      	ldr	r0, [r3, #0]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	6859      	ldr	r1, [r3, #4]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	f000 fbef 	bl	800355e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2160      	movs	r1, #96	; 0x60
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 fc19 	bl	80035be <TIM_ITRx_SetConfig>
      break;
 8002d8c:	e01c      	b.n	8002dc8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6818      	ldr	r0, [r3, #0]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	6859      	ldr	r1, [r3, #4]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	f000 fbb0 	bl	8003500 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2140      	movs	r1, #64	; 0x40
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 fc09 	bl	80035be <TIM_ITRx_SetConfig>
      break;
 8002dac:	e00c      	b.n	8002dc8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4619      	mov	r1, r3
 8002db8:	4610      	mov	r0, r2
 8002dba:	f000 fc00 	bl	80035be <TIM_ITRx_SetConfig>
      break;
 8002dbe:	e003      	b.n	8002dc8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8002dc4:	e000      	b.n	8002dc8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8002dc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	00100070 	.word	0x00100070
 8002de8:	00100040 	.word	0x00100040
 8002dec:	00100030 	.word	0x00100030
 8002df0:	00100020 	.word	0x00100020

08002df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a3c      	ldr	r2, [pc, #240]	; (8002ef8 <TIM_Base_SetConfig+0x104>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d00f      	beq.n	8002e2c <TIM_Base_SetConfig+0x38>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e12:	d00b      	beq.n	8002e2c <TIM_Base_SetConfig+0x38>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a39      	ldr	r2, [pc, #228]	; (8002efc <TIM_Base_SetConfig+0x108>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d007      	beq.n	8002e2c <TIM_Base_SetConfig+0x38>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a38      	ldr	r2, [pc, #224]	; (8002f00 <TIM_Base_SetConfig+0x10c>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d003      	beq.n	8002e2c <TIM_Base_SetConfig+0x38>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a37      	ldr	r2, [pc, #220]	; (8002f04 <TIM_Base_SetConfig+0x110>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d108      	bne.n	8002e3e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a2d      	ldr	r2, [pc, #180]	; (8002ef8 <TIM_Base_SetConfig+0x104>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d01b      	beq.n	8002e7e <TIM_Base_SetConfig+0x8a>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e4c:	d017      	beq.n	8002e7e <TIM_Base_SetConfig+0x8a>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a2a      	ldr	r2, [pc, #168]	; (8002efc <TIM_Base_SetConfig+0x108>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d013      	beq.n	8002e7e <TIM_Base_SetConfig+0x8a>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a29      	ldr	r2, [pc, #164]	; (8002f00 <TIM_Base_SetConfig+0x10c>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d00f      	beq.n	8002e7e <TIM_Base_SetConfig+0x8a>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a28      	ldr	r2, [pc, #160]	; (8002f04 <TIM_Base_SetConfig+0x110>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d00b      	beq.n	8002e7e <TIM_Base_SetConfig+0x8a>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a27      	ldr	r2, [pc, #156]	; (8002f08 <TIM_Base_SetConfig+0x114>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d007      	beq.n	8002e7e <TIM_Base_SetConfig+0x8a>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a26      	ldr	r2, [pc, #152]	; (8002f0c <TIM_Base_SetConfig+0x118>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d003      	beq.n	8002e7e <TIM_Base_SetConfig+0x8a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a25      	ldr	r2, [pc, #148]	; (8002f10 <TIM_Base_SetConfig+0x11c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d108      	bne.n	8002e90 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a10      	ldr	r2, [pc, #64]	; (8002ef8 <TIM_Base_SetConfig+0x104>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d00f      	beq.n	8002edc <TIM_Base_SetConfig+0xe8>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a11      	ldr	r2, [pc, #68]	; (8002f04 <TIM_Base_SetConfig+0x110>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d00b      	beq.n	8002edc <TIM_Base_SetConfig+0xe8>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a10      	ldr	r2, [pc, #64]	; (8002f08 <TIM_Base_SetConfig+0x114>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d007      	beq.n	8002edc <TIM_Base_SetConfig+0xe8>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a0f      	ldr	r2, [pc, #60]	; (8002f0c <TIM_Base_SetConfig+0x118>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d003      	beq.n	8002edc <TIM_Base_SetConfig+0xe8>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a0e      	ldr	r2, [pc, #56]	; (8002f10 <TIM_Base_SetConfig+0x11c>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d103      	bne.n	8002ee4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	691a      	ldr	r2, [r3, #16]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	615a      	str	r2, [r3, #20]
}
 8002eea:	bf00      	nop
 8002eec:	3714      	adds	r7, #20
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	40012c00 	.word	0x40012c00
 8002efc:	40000400 	.word	0x40000400
 8002f00:	40000800 	.word	0x40000800
 8002f04:	40013400 	.word	0x40013400
 8002f08:	40014000 	.word	0x40014000
 8002f0c:	40014400 	.word	0x40014400
 8002f10:	40014800 	.word	0x40014800

08002f14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b087      	sub	sp, #28
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	f023 0201 	bic.w	r2, r3, #1
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f023 0303 	bic.w	r3, r3, #3
 8002f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f023 0302 	bic.w	r3, r3, #2
 8002f60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a2c      	ldr	r2, [pc, #176]	; (8003020 <TIM_OC1_SetConfig+0x10c>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d00f      	beq.n	8002f94 <TIM_OC1_SetConfig+0x80>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a2b      	ldr	r2, [pc, #172]	; (8003024 <TIM_OC1_SetConfig+0x110>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d00b      	beq.n	8002f94 <TIM_OC1_SetConfig+0x80>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a2a      	ldr	r2, [pc, #168]	; (8003028 <TIM_OC1_SetConfig+0x114>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d007      	beq.n	8002f94 <TIM_OC1_SetConfig+0x80>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a29      	ldr	r2, [pc, #164]	; (800302c <TIM_OC1_SetConfig+0x118>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d003      	beq.n	8002f94 <TIM_OC1_SetConfig+0x80>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a28      	ldr	r2, [pc, #160]	; (8003030 <TIM_OC1_SetConfig+0x11c>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d10c      	bne.n	8002fae <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	f023 0308 	bic.w	r3, r3, #8
 8002f9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f023 0304 	bic.w	r3, r3, #4
 8002fac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a1b      	ldr	r2, [pc, #108]	; (8003020 <TIM_OC1_SetConfig+0x10c>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d00f      	beq.n	8002fd6 <TIM_OC1_SetConfig+0xc2>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a1a      	ldr	r2, [pc, #104]	; (8003024 <TIM_OC1_SetConfig+0x110>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d00b      	beq.n	8002fd6 <TIM_OC1_SetConfig+0xc2>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a19      	ldr	r2, [pc, #100]	; (8003028 <TIM_OC1_SetConfig+0x114>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d007      	beq.n	8002fd6 <TIM_OC1_SetConfig+0xc2>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a18      	ldr	r2, [pc, #96]	; (800302c <TIM_OC1_SetConfig+0x118>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d003      	beq.n	8002fd6 <TIM_OC1_SetConfig+0xc2>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a17      	ldr	r2, [pc, #92]	; (8003030 <TIM_OC1_SetConfig+0x11c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d111      	bne.n	8002ffa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	621a      	str	r2, [r3, #32]
}
 8003014:	bf00      	nop
 8003016:	371c      	adds	r7, #28
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	40012c00 	.word	0x40012c00
 8003024:	40013400 	.word	0x40013400
 8003028:	40014000 	.word	0x40014000
 800302c:	40014400 	.word	0x40014400
 8003030:	40014800 	.word	0x40014800

08003034 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003034:	b480      	push	{r7}
 8003036:	b087      	sub	sp, #28
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	f023 0210 	bic.w	r2, r3, #16
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800306e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	021b      	lsls	r3, r3, #8
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	4313      	orrs	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f023 0320 	bic.w	r3, r3, #32
 8003082:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	011b      	lsls	r3, r3, #4
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	4313      	orrs	r3, r2
 800308e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a28      	ldr	r2, [pc, #160]	; (8003134 <TIM_OC2_SetConfig+0x100>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d003      	beq.n	80030a0 <TIM_OC2_SetConfig+0x6c>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a27      	ldr	r2, [pc, #156]	; (8003138 <TIM_OC2_SetConfig+0x104>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d10d      	bne.n	80030bc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	011b      	lsls	r3, r3, #4
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a1d      	ldr	r2, [pc, #116]	; (8003134 <TIM_OC2_SetConfig+0x100>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d00f      	beq.n	80030e4 <TIM_OC2_SetConfig+0xb0>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a1c      	ldr	r2, [pc, #112]	; (8003138 <TIM_OC2_SetConfig+0x104>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d00b      	beq.n	80030e4 <TIM_OC2_SetConfig+0xb0>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a1b      	ldr	r2, [pc, #108]	; (800313c <TIM_OC2_SetConfig+0x108>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d007      	beq.n	80030e4 <TIM_OC2_SetConfig+0xb0>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a1a      	ldr	r2, [pc, #104]	; (8003140 <TIM_OC2_SetConfig+0x10c>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d003      	beq.n	80030e4 <TIM_OC2_SetConfig+0xb0>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a19      	ldr	r2, [pc, #100]	; (8003144 <TIM_OC2_SetConfig+0x110>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d113      	bne.n	800310c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	4313      	orrs	r3, r2
 800310a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	621a      	str	r2, [r3, #32]
}
 8003126:	bf00      	nop
 8003128:	371c      	adds	r7, #28
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	40012c00 	.word	0x40012c00
 8003138:	40013400 	.word	0x40013400
 800313c:	40014000 	.word	0x40014000
 8003140:	40014400 	.word	0x40014400
 8003144:	40014800 	.word	0x40014800

08003148 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003148:	b480      	push	{r7}
 800314a:	b087      	sub	sp, #28
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800317a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f023 0303 	bic.w	r3, r3, #3
 8003182:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	4313      	orrs	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003194:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	021b      	lsls	r3, r3, #8
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	4313      	orrs	r3, r2
 80031a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a27      	ldr	r2, [pc, #156]	; (8003244 <TIM_OC3_SetConfig+0xfc>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d003      	beq.n	80031b2 <TIM_OC3_SetConfig+0x6a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a26      	ldr	r2, [pc, #152]	; (8003248 <TIM_OC3_SetConfig+0x100>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d10d      	bne.n	80031ce <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a1c      	ldr	r2, [pc, #112]	; (8003244 <TIM_OC3_SetConfig+0xfc>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d00f      	beq.n	80031f6 <TIM_OC3_SetConfig+0xae>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a1b      	ldr	r2, [pc, #108]	; (8003248 <TIM_OC3_SetConfig+0x100>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d00b      	beq.n	80031f6 <TIM_OC3_SetConfig+0xae>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a1a      	ldr	r2, [pc, #104]	; (800324c <TIM_OC3_SetConfig+0x104>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d007      	beq.n	80031f6 <TIM_OC3_SetConfig+0xae>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a19      	ldr	r2, [pc, #100]	; (8003250 <TIM_OC3_SetConfig+0x108>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d003      	beq.n	80031f6 <TIM_OC3_SetConfig+0xae>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a18      	ldr	r2, [pc, #96]	; (8003254 <TIM_OC3_SetConfig+0x10c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d113      	bne.n	800321e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	011b      	lsls	r3, r3, #4
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	4313      	orrs	r3, r2
 8003210:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	4313      	orrs	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	621a      	str	r2, [r3, #32]
}
 8003238:	bf00      	nop
 800323a:	371c      	adds	r7, #28
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	40012c00 	.word	0x40012c00
 8003248:	40013400 	.word	0x40013400
 800324c:	40014000 	.word	0x40014000
 8003250:	40014400 	.word	0x40014400
 8003254:	40014800 	.word	0x40014800

08003258 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003258:	b480      	push	{r7}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800328a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003292:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	021b      	lsls	r3, r3, #8
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	4313      	orrs	r3, r2
 800329e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	031b      	lsls	r3, r3, #12
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a28      	ldr	r2, [pc, #160]	; (8003358 <TIM_OC4_SetConfig+0x100>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d003      	beq.n	80032c4 <TIM_OC4_SetConfig+0x6c>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a27      	ldr	r2, [pc, #156]	; (800335c <TIM_OC4_SetConfig+0x104>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d10d      	bne.n	80032e0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80032ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	031b      	lsls	r3, r3, #12
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a1d      	ldr	r2, [pc, #116]	; (8003358 <TIM_OC4_SetConfig+0x100>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d00f      	beq.n	8003308 <TIM_OC4_SetConfig+0xb0>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a1c      	ldr	r2, [pc, #112]	; (800335c <TIM_OC4_SetConfig+0x104>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d00b      	beq.n	8003308 <TIM_OC4_SetConfig+0xb0>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a1b      	ldr	r2, [pc, #108]	; (8003360 <TIM_OC4_SetConfig+0x108>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d007      	beq.n	8003308 <TIM_OC4_SetConfig+0xb0>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a1a      	ldr	r2, [pc, #104]	; (8003364 <TIM_OC4_SetConfig+0x10c>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d003      	beq.n	8003308 <TIM_OC4_SetConfig+0xb0>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a19      	ldr	r2, [pc, #100]	; (8003368 <TIM_OC4_SetConfig+0x110>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d113      	bne.n	8003330 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800330e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003316:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	019b      	lsls	r3, r3, #6
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	4313      	orrs	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	019b      	lsls	r3, r3, #6
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4313      	orrs	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	621a      	str	r2, [r3, #32]
}
 800334a:	bf00      	nop
 800334c:	371c      	adds	r7, #28
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	40012c00 	.word	0x40012c00
 800335c:	40013400 	.word	0x40013400
 8003360:	40014000 	.word	0x40014000
 8003364:	40014400 	.word	0x40014400
 8003368:	40014800 	.word	0x40014800

0800336c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800336c:	b480      	push	{r7}
 800336e:	b087      	sub	sp, #28
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800339a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800339e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80033b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	041b      	lsls	r3, r3, #16
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a17      	ldr	r2, [pc, #92]	; (8003420 <TIM_OC5_SetConfig+0xb4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d00f      	beq.n	80033e6 <TIM_OC5_SetConfig+0x7a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a16      	ldr	r2, [pc, #88]	; (8003424 <TIM_OC5_SetConfig+0xb8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d00b      	beq.n	80033e6 <TIM_OC5_SetConfig+0x7a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a15      	ldr	r2, [pc, #84]	; (8003428 <TIM_OC5_SetConfig+0xbc>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d007      	beq.n	80033e6 <TIM_OC5_SetConfig+0x7a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a14      	ldr	r2, [pc, #80]	; (800342c <TIM_OC5_SetConfig+0xc0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d003      	beq.n	80033e6 <TIM_OC5_SetConfig+0x7a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a13      	ldr	r2, [pc, #76]	; (8003430 <TIM_OC5_SetConfig+0xc4>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d109      	bne.n	80033fa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	021b      	lsls	r3, r3, #8
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	621a      	str	r2, [r3, #32]
}
 8003414:	bf00      	nop
 8003416:	371c      	adds	r7, #28
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	40012c00 	.word	0x40012c00
 8003424:	40013400 	.word	0x40013400
 8003428:	40014000 	.word	0x40014000
 800342c:	40014400 	.word	0x40014400
 8003430:	40014800 	.word	0x40014800

08003434 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003434:	b480      	push	{r7}
 8003436:	b087      	sub	sp, #28
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800345a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	021b      	lsls	r3, r3, #8
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	4313      	orrs	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800347a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	051b      	lsls	r3, r3, #20
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	4313      	orrs	r3, r2
 8003486:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a18      	ldr	r2, [pc, #96]	; (80034ec <TIM_OC6_SetConfig+0xb8>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d00f      	beq.n	80034b0 <TIM_OC6_SetConfig+0x7c>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a17      	ldr	r2, [pc, #92]	; (80034f0 <TIM_OC6_SetConfig+0xbc>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d00b      	beq.n	80034b0 <TIM_OC6_SetConfig+0x7c>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a16      	ldr	r2, [pc, #88]	; (80034f4 <TIM_OC6_SetConfig+0xc0>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d007      	beq.n	80034b0 <TIM_OC6_SetConfig+0x7c>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a15      	ldr	r2, [pc, #84]	; (80034f8 <TIM_OC6_SetConfig+0xc4>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d003      	beq.n	80034b0 <TIM_OC6_SetConfig+0x7c>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a14      	ldr	r2, [pc, #80]	; (80034fc <TIM_OC6_SetConfig+0xc8>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d109      	bne.n	80034c4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	029b      	lsls	r3, r3, #10
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	621a      	str	r2, [r3, #32]
}
 80034de:	bf00      	nop
 80034e0:	371c      	adds	r7, #28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	40012c00 	.word	0x40012c00
 80034f0:	40013400 	.word	0x40013400
 80034f4:	40014000 	.word	0x40014000
 80034f8:	40014400 	.word	0x40014400
 80034fc:	40014800 	.word	0x40014800

08003500 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003500:	b480      	push	{r7}
 8003502:	b087      	sub	sp, #28
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	f023 0201 	bic.w	r2, r3, #1
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800352a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	011b      	lsls	r3, r3, #4
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	4313      	orrs	r3, r2
 8003534:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f023 030a 	bic.w	r3, r3, #10
 800353c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	4313      	orrs	r3, r2
 8003544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	621a      	str	r2, [r3, #32]
}
 8003552:	bf00      	nop
 8003554:	371c      	adds	r7, #28
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800355e:	b480      	push	{r7}
 8003560:	b087      	sub	sp, #28
 8003562:	af00      	add	r7, sp, #0
 8003564:	60f8      	str	r0, [r7, #12]
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	f023 0210 	bic.w	r2, r3, #16
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003588:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	031b      	lsls	r3, r3, #12
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4313      	orrs	r3, r2
 8003592:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800359a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	621a      	str	r2, [r3, #32]
}
 80035b2:	bf00      	nop
 80035b4:	371c      	adds	r7, #28
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035be:	b480      	push	{r7}
 80035c0:	b085      	sub	sp, #20
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80035d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4313      	orrs	r3, r2
 80035e0:	f043 0307 	orr.w	r3, r3, #7
 80035e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	609a      	str	r2, [r3, #8]
}
 80035ec:	bf00      	nop
 80035ee:	3714      	adds	r7, #20
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
 8003604:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003612:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	021a      	lsls	r2, r3, #8
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	431a      	orrs	r2, r3
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	4313      	orrs	r3, r2
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	4313      	orrs	r3, r2
 8003624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	609a      	str	r2, [r3, #8]
}
 800362c:	bf00      	nop
 800362e:	371c      	adds	r7, #28
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003648:	2b01      	cmp	r3, #1
 800364a:	d101      	bne.n	8003650 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800364c:	2302      	movs	r3, #2
 800364e:	e065      	b.n	800371c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a2c      	ldr	r2, [pc, #176]	; (8003728 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d004      	beq.n	8003684 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a2b      	ldr	r2, [pc, #172]	; (800372c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d108      	bne.n	8003696 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800368a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	4313      	orrs	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800369c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a1b      	ldr	r2, [pc, #108]	; (8003728 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d018      	beq.n	80036f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c6:	d013      	beq.n	80036f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a18      	ldr	r2, [pc, #96]	; (8003730 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d00e      	beq.n	80036f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a17      	ldr	r2, [pc, #92]	; (8003734 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d009      	beq.n	80036f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a12      	ldr	r2, [pc, #72]	; (800372c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d004      	beq.n	80036f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a13      	ldr	r2, [pc, #76]	; (8003738 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d10c      	bne.n	800370a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	4313      	orrs	r3, r2
 8003700:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	40012c00 	.word	0x40012c00
 800372c:	40013400 	.word	0x40013400
 8003730:	40000400 	.word	0x40000400
 8003734:	40000800 	.word	0x40000800
 8003738:	40014000 	.word	0x40014000

0800373c <LL_ADC_REG_SetSequencerLength>:
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374a:	f023 020f 	bic.w	r2, r3, #15
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	431a      	orrs	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003756:	bf00      	nop
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003762:	b480      	push	{r7}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b01      	cmp	r3, #1
 8003774:	d101      	bne.n	800377a <LL_ADC_IsEnabled+0x18>
 8003776:	2301      	movs	r3, #1
 8003778:	e000      	b.n	800377c <LL_ADC_IsEnabled+0x1a>
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8003788:	b590      	push	{r4, r7, lr}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003792:	2300      	movs	r3, #0
 8003794:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8003796:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800379a:	f7ff ffe2 	bl	8003762 <LL_ADC_IsEnabled>
 800379e:	4604      	mov	r4, r0
 80037a0:	4817      	ldr	r0, [pc, #92]	; (8003800 <LL_ADC_CommonInit+0x78>)
 80037a2:	f7ff ffde 	bl	8003762 <LL_ADC_IsEnabled>
 80037a6:	4603      	mov	r3, r0
 80037a8:	4323      	orrs	r3, r4
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d120      	bne.n	80037f0 <LL_ADC_CommonInit+0x68>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d012      	beq.n	80037dc <LL_ADC_CommonInit+0x54>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	4b12      	ldr	r3, [pc, #72]	; (8003804 <LL_ADC_CommonInit+0x7c>)
 80037bc:	4013      	ands	r3, r2
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	6811      	ldr	r1, [r2, #0]
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	6852      	ldr	r2, [r2, #4]
 80037c6:	4311      	orrs	r1, r2
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	6892      	ldr	r2, [r2, #8]
 80037cc:	4311      	orrs	r1, r2
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	68d2      	ldr	r2, [r2, #12]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	431a      	orrs	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	609a      	str	r2, [r3, #8]
 80037da:	e00b      	b.n	80037f4 <LL_ADC_CommonInit+0x6c>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	4b08      	ldr	r3, [pc, #32]	; (8003804 <LL_ADC_CommonInit+0x7c>)
 80037e2:	4013      	ands	r3, r2
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	6812      	ldr	r2, [r2, #0]
 80037e8:	431a      	orrs	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	609a      	str	r2, [r3, #8]
 80037ee:	e001      	b.n	80037f4 <LL_ADC_CommonInit+0x6c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd90      	pop	{r4, r7, pc}
 80037fe:	bf00      	nop
 8003800:	50000100 	.word	0x50000100
 8003804:	ffc030e0 	.word	0xffc030e0

08003808 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003812:	2300      	movs	r3, #0
 8003814:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7ff ffa3 	bl	8003762 <LL_ADC_IsEnabled>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d111      	bne.n	8003846 <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800382a:	f023 0318 	bic.w	r3, r3, #24
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	6811      	ldr	r1, [r2, #0]
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	6852      	ldr	r2, [r2, #4]
 8003836:	4311      	orrs	r1, r2
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	6892      	ldr	r2, [r2, #8]
 800383c:	430a      	orrs	r2, r1
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	60da      	str	r2, [r3, #12]
 8003844:	e001      	b.n	800384a <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800384a:	7bfb      	ldrb	r3, [r7, #15]
}
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800385e:	2300      	movs	r3, #0
 8003860:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7ff ff7d 	bl	8003762 <LL_ADC_IsEnabled>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d132      	bne.n	80038d4 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d015      	beq.n	80038a2 <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	4b1a      	ldr	r3, [pc, #104]	; (80038e4 <LL_ADC_REG_Init+0x90>)
 800387c:	4013      	ands	r3, r2
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	6811      	ldr	r1, [r2, #0]
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	6892      	ldr	r2, [r2, #8]
 8003886:	4311      	orrs	r1, r2
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	68d2      	ldr	r2, [r2, #12]
 800388c:	4311      	orrs	r1, r2
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	6912      	ldr	r2, [r2, #16]
 8003892:	4311      	orrs	r1, r2
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	6952      	ldr	r2, [r2, #20]
 8003898:	430a      	orrs	r2, r1
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	60da      	str	r2, [r3, #12]
 80038a0:	e011      	b.n	80038c6 <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	4b0f      	ldr	r3, [pc, #60]	; (80038e4 <LL_ADC_REG_Init+0x90>)
 80038a8:	4013      	ands	r3, r2
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	6811      	ldr	r1, [r2, #0]
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	68d2      	ldr	r2, [r2, #12]
 80038b2:	4311      	orrs	r1, r2
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	6912      	ldr	r2, [r2, #16]
 80038b8:	4311      	orrs	r1, r2
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	6952      	ldr	r2, [r2, #20]
 80038be:	430a      	orrs	r2, r1
 80038c0:	431a      	orrs	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	4619      	mov	r1, r3
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f7ff ff35 	bl	800373c <LL_ADC_REG_SetSequencerLength>
 80038d2:	e001      	b.n	80038d8 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80038d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	fff0c01c 	.word	0xfff0c01c

080038e8 <LL_EXTI_EnableIT_0_31>:
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80038f0:	4b05      	ldr	r3, [pc, #20]	; (8003908 <LL_EXTI_EnableIT_0_31+0x20>)
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	4904      	ldr	r1, [pc, #16]	; (8003908 <LL_EXTI_EnableIT_0_31+0x20>)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	600b      	str	r3, [r1, #0]
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	40010400 	.word	0x40010400

0800390c <LL_EXTI_EnableIT_32_63>:
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003914:	4b05      	ldr	r3, [pc, #20]	; (800392c <LL_EXTI_EnableIT_32_63+0x20>)
 8003916:	6a1a      	ldr	r2, [r3, #32]
 8003918:	4904      	ldr	r1, [pc, #16]	; (800392c <LL_EXTI_EnableIT_32_63+0x20>)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4313      	orrs	r3, r2
 800391e:	620b      	str	r3, [r1, #32]
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	40010400 	.word	0x40010400

08003930 <LL_EXTI_DisableIT_0_31>:
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003938:	4b06      	ldr	r3, [pc, #24]	; (8003954 <LL_EXTI_DisableIT_0_31+0x24>)
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	43db      	mvns	r3, r3
 8003940:	4904      	ldr	r1, [pc, #16]	; (8003954 <LL_EXTI_DisableIT_0_31+0x24>)
 8003942:	4013      	ands	r3, r2
 8003944:	600b      	str	r3, [r1, #0]
}
 8003946:	bf00      	nop
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	40010400 	.word	0x40010400

08003958 <LL_EXTI_DisableIT_32_63>:
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8003960:	4b06      	ldr	r3, [pc, #24]	; (800397c <LL_EXTI_DisableIT_32_63+0x24>)
 8003962:	6a1a      	ldr	r2, [r3, #32]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	43db      	mvns	r3, r3
 8003968:	4904      	ldr	r1, [pc, #16]	; (800397c <LL_EXTI_DisableIT_32_63+0x24>)
 800396a:	4013      	ands	r3, r2
 800396c:	620b      	str	r3, [r1, #32]
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	40010400 	.word	0x40010400

08003980 <LL_EXTI_EnableEvent_0_31>:
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003988:	4b05      	ldr	r3, [pc, #20]	; (80039a0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	4904      	ldr	r1, [pc, #16]	; (80039a0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4313      	orrs	r3, r2
 8003992:	604b      	str	r3, [r1, #4]
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	40010400 	.word	0x40010400

080039a4 <LL_EXTI_EnableEvent_32_63>:
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80039ac:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <LL_EXTI_EnableEvent_32_63+0x20>)
 80039ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039b0:	4904      	ldr	r1, [pc, #16]	; (80039c4 <LL_EXTI_EnableEvent_32_63+0x20>)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	40010400 	.word	0x40010400

080039c8 <LL_EXTI_DisableEvent_0_31>:
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80039d0:	4b06      	ldr	r3, [pc, #24]	; (80039ec <LL_EXTI_DisableEvent_0_31+0x24>)
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	43db      	mvns	r3, r3
 80039d8:	4904      	ldr	r1, [pc, #16]	; (80039ec <LL_EXTI_DisableEvent_0_31+0x24>)
 80039da:	4013      	ands	r3, r2
 80039dc:	604b      	str	r3, [r1, #4]
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	40010400 	.word	0x40010400

080039f0 <LL_EXTI_DisableEvent_32_63>:
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80039f8:	4b06      	ldr	r3, [pc, #24]	; (8003a14 <LL_EXTI_DisableEvent_32_63+0x24>)
 80039fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	43db      	mvns	r3, r3
 8003a00:	4904      	ldr	r1, [pc, #16]	; (8003a14 <LL_EXTI_DisableEvent_32_63+0x24>)
 8003a02:	4013      	ands	r3, r2
 8003a04:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	40010400 	.word	0x40010400

08003a18 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003a20:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	4904      	ldr	r1, [pc, #16]	; (8003a38 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	608b      	str	r3, [r1, #8]
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr
 8003a38:	40010400 	.word	0x40010400

08003a3c <LL_EXTI_EnableRisingTrig_32_63>:
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8003a44:	4b05      	ldr	r3, [pc, #20]	; (8003a5c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003a46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a48:	4904      	ldr	r1, [pc, #16]	; (8003a5c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	628b      	str	r3, [r1, #40]	; 0x28
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	40010400 	.word	0x40010400

08003a60 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003a68:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	4904      	ldr	r1, [pc, #16]	; (8003a84 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003a72:	4013      	ands	r3, r2
 8003a74:	608b      	str	r3, [r1, #8]
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	40010400 	.word	0x40010400

08003a88 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8003a90:	4b06      	ldr	r3, [pc, #24]	; (8003aac <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8003a92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	43db      	mvns	r3, r3
 8003a98:	4904      	ldr	r1, [pc, #16]	; (8003aac <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	628b      	str	r3, [r1, #40]	; 0x28
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	40010400 	.word	0x40010400

08003ab0 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8003ab8:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	4904      	ldr	r1, [pc, #16]	; (8003ad0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	60cb      	str	r3, [r1, #12]
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	40010400 	.word	0x40010400

08003ad4 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8003adc:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae0:	4904      	ldr	r1, [pc, #16]	; (8003af4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	40010400 	.word	0x40010400

08003af8 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003b00:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003b02:	68da      	ldr	r2, [r3, #12]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	43db      	mvns	r3, r3
 8003b08:	4904      	ldr	r1, [pc, #16]	; (8003b1c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	60cb      	str	r3, [r1, #12]
}
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	40010400 	.word	0x40010400

08003b20 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8003b28:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8003b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	43db      	mvns	r3, r3
 8003b30:	4904      	ldr	r1, [pc, #16]	; (8003b44 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8003b32:	4013      	ands	r3, r2
 8003b34:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8003b36:	bf00      	nop
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	40010400 	.word	0x40010400

08003b48 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8003b50:	2300      	movs	r3, #0
 8003b52:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	7a1b      	ldrb	r3, [r3, #8]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 80d3 	beq.w	8003d04 <LL_EXTI_Init+0x1bc>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d063      	beq.n	8003c2e <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	7a5b      	ldrb	r3, [r3, #9]
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d01c      	beq.n	8003ba8 <LL_EXTI_Init+0x60>
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	dc25      	bgt.n	8003bbe <LL_EXTI_Init+0x76>
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d002      	beq.n	8003b7c <LL_EXTI_Init+0x34>
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d00b      	beq.n	8003b92 <LL_EXTI_Init+0x4a>
 8003b7a:	e020      	b.n	8003bbe <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff ff21 	bl	80039c8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff feac 	bl	80038e8 <LL_EXTI_EnableIT_0_31>
          break;
 8003b90:	e018      	b.n	8003bc4 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7ff feca 	bl	8003930 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7ff feed 	bl	8003980 <LL_EXTI_EnableEvent_0_31>
          break;
 8003ba6:	e00d      	b.n	8003bc4 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff fe9b 	bl	80038e8 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7ff fee2 	bl	8003980 <LL_EXTI_EnableEvent_0_31>
          break;
 8003bbc:	e002      	b.n	8003bc4 <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	60fb      	str	r3, [r7, #12]
          break;
 8003bc2:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	7a9b      	ldrb	r3, [r3, #10]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d030      	beq.n	8003c2e <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	7a9b      	ldrb	r3, [r3, #10]
 8003bd0:	2b03      	cmp	r3, #3
 8003bd2:	d01c      	beq.n	8003c0e <LL_EXTI_Init+0xc6>
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	dc25      	bgt.n	8003c24 <LL_EXTI_Init+0xdc>
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d002      	beq.n	8003be2 <LL_EXTI_Init+0x9a>
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d00b      	beq.n	8003bf8 <LL_EXTI_Init+0xb0>
 8003be0:	e020      	b.n	8003c24 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7ff ff86 	bl	8003af8 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7ff ff11 	bl	8003a18 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8003bf6:	e01b      	b.n	8003c30 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7ff ff2f 	bl	8003a60 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7ff ff52 	bl	8003ab0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003c0c:	e010      	b.n	8003c30 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff ff00 	bl	8003a18 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff ff47 	bl	8003ab0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003c22:	e005      	b.n	8003c30 <LL_EXTI_Init+0xe8>
          default:
            status |= 0x02u;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f043 0302 	orr.w	r3, r3, #2
 8003c2a:	60fb      	str	r3, [r7, #12]
            break;
 8003c2c:	e000      	b.n	8003c30 <LL_EXTI_Init+0xe8>
        }
      }
 8003c2e:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d07a      	beq.n	8003d2e <LL_EXTI_Init+0x1e6>
    {
      switch (EXTI_InitStruct->Mode)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	7a5b      	ldrb	r3, [r3, #9]
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d01c      	beq.n	8003c7a <LL_EXTI_Init+0x132>
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	dc25      	bgt.n	8003c90 <LL_EXTI_Init+0x148>
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <LL_EXTI_Init+0x106>
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d00b      	beq.n	8003c64 <LL_EXTI_Init+0x11c>
 8003c4c:	e020      	b.n	8003c90 <LL_EXTI_Init+0x148>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7ff fecc 	bl	80039f0 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7ff fe55 	bl	800390c <LL_EXTI_EnableIT_32_63>
          break;
 8003c62:	e01a      	b.n	8003c9a <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff fe75 	bl	8003958 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7ff fe96 	bl	80039a4 <LL_EXTI_EnableEvent_32_63>
          break;
 8003c78:	e00f      	b.n	8003c9a <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7ff fe44 	bl	800390c <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7ff fe8b 	bl	80039a4 <LL_EXTI_EnableEvent_32_63>
          break;
 8003c8e:	e004      	b.n	8003c9a <LL_EXTI_Init+0x152>
        default:
          status |= 0x04u;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f043 0304 	orr.w	r3, r3, #4
 8003c96:	60fb      	str	r3, [r7, #12]
          break;
 8003c98:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	7a9b      	ldrb	r3, [r3, #10]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d045      	beq.n	8003d2e <LL_EXTI_Init+0x1e6>
      {
        switch (EXTI_InitStruct->Trigger)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	7a9b      	ldrb	r3, [r3, #10]
 8003ca6:	2b03      	cmp	r3, #3
 8003ca8:	d01c      	beq.n	8003ce4 <LL_EXTI_Init+0x19c>
 8003caa:	2b03      	cmp	r3, #3
 8003cac:	dc25      	bgt.n	8003cfa <LL_EXTI_Init+0x1b2>
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d002      	beq.n	8003cb8 <LL_EXTI_Init+0x170>
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d00b      	beq.n	8003cce <LL_EXTI_Init+0x186>
 8003cb6:	e020      	b.n	8003cfa <LL_EXTI_Init+0x1b2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7ff ff2f 	bl	8003b20 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7ff feb8 	bl	8003a3c <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8003ccc:	e030      	b.n	8003d30 <LL_EXTI_Init+0x1e8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7ff fed8 	bl	8003a88 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7ff fef9 	bl	8003ad4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8003ce2:	e025      	b.n	8003d30 <LL_EXTI_Init+0x1e8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff fea7 	bl	8003a3c <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7ff feee 	bl	8003ad4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8003cf8:	e01a      	b.n	8003d30 <LL_EXTI_Init+0x1e8>
          default:
            status |= 0x05u;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f043 0305 	orr.w	r3, r3, #5
 8003d00:	60fb      	str	r3, [r7, #12]
            break;
 8003d02:	e015      	b.n	8003d30 <LL_EXTI_Init+0x1e8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7ff fe11 	bl	8003930 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff fe58 	bl	80039c8 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7ff fe1b 	bl	8003958 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7ff fe62 	bl	80039f0 <LL_EXTI_DisableEvent_32_63>
 8003d2c:	e000      	b.n	8003d30 <LL_EXTI_Init+0x1e8>
      }
 8003d2e:	bf00      	nop
  }

  return status;
 8003d30:	68fb      	ldr	r3, [r7, #12]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <LL_GPIO_SetPinMode>:
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b08b      	sub	sp, #44	; 0x2c
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	60f8      	str	r0, [r7, #12]
 8003d42:	60b9      	str	r1, [r7, #8]
 8003d44:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	fa93 f3a3 	rbit	r3, r3
 8003d54:	613b      	str	r3, [r7, #16]
  return result;
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8003d60:	2320      	movs	r3, #32
 8003d62:	e003      	b.n	8003d6c <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	fab3 f383 	clz	r3, r3
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	2103      	movs	r1, #3
 8003d70:	fa01 f303 	lsl.w	r3, r1, r3
 8003d74:	43db      	mvns	r3, r3
 8003d76:	401a      	ands	r2, r3
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
 8003d7e:	fa93 f3a3 	rbit	r3, r3
 8003d82:	61fb      	str	r3, [r7, #28]
  return result;
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8003d8e:	2320      	movs	r3, #32
 8003d90:	e003      	b.n	8003d9a <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	fab3 f383 	clz	r3, r3
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003da2:	431a      	orrs	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	601a      	str	r2, [r3, #0]
}
 8003da8:	bf00      	nop
 8003daa:	372c      	adds	r7, #44	; 0x2c
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <LL_GPIO_SetPinOutputType>:
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	43db      	mvns	r3, r3
 8003dc8:	401a      	ands	r2, r3
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	6879      	ldr	r1, [r7, #4]
 8003dce:	fb01 f303 	mul.w	r3, r1, r3
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	605a      	str	r2, [r3, #4]
}
 8003dd8:	bf00      	nop
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <LL_GPIO_SetPinSpeed>:
{
 8003de4:	b480      	push	{r7}
 8003de6:	b08b      	sub	sp, #44	; 0x2c
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	fa93 f3a3 	rbit	r3, r3
 8003dfe:	613b      	str	r3, [r7, #16]
  return result;
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8003e0a:	2320      	movs	r3, #32
 8003e0c:	e003      	b.n	8003e16 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	fab3 f383 	clz	r3, r3
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	2103      	movs	r1, #3
 8003e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1e:	43db      	mvns	r3, r3
 8003e20:	401a      	ands	r2, r3
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e26:	6a3b      	ldr	r3, [r7, #32]
 8003e28:	fa93 f3a3 	rbit	r3, r3
 8003e2c:	61fb      	str	r3, [r7, #28]
  return result;
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d101      	bne.n	8003e3c <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8003e38:	2320      	movs	r3, #32
 8003e3a:	e003      	b.n	8003e44 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	fab3 f383 	clz	r3, r3
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	6879      	ldr	r1, [r7, #4]
 8003e48:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	609a      	str	r2, [r3, #8]
}
 8003e52:	bf00      	nop
 8003e54:	372c      	adds	r7, #44	; 0x2c
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <LL_GPIO_SetPinPull>:
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b08b      	sub	sp, #44	; 0x2c
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	60f8      	str	r0, [r7, #12]
 8003e66:	60b9      	str	r1, [r7, #8]
 8003e68:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	68da      	ldr	r2, [r3, #12]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	fa93 f3a3 	rbit	r3, r3
 8003e78:	613b      	str	r3, [r7, #16]
  return result;
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8003e84:	2320      	movs	r3, #32
 8003e86:	e003      	b.n	8003e90 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	fab3 f383 	clz	r3, r3
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	2103      	movs	r1, #3
 8003e94:	fa01 f303 	lsl.w	r3, r1, r3
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	401a      	ands	r2, r3
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
 8003ea2:	fa93 f3a3 	rbit	r3, r3
 8003ea6:	61fb      	str	r3, [r7, #28]
  return result;
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8003eb2:	2320      	movs	r3, #32
 8003eb4:	e003      	b.n	8003ebe <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	fab3 f383 	clz	r3, r3
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	60da      	str	r2, [r3, #12]
}
 8003ecc:	bf00      	nop
 8003ece:	372c      	adds	r7, #44	; 0x2c
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b08b      	sub	sp, #44	; 0x2c
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6a1a      	ldr	r2, [r3, #32]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	fa93 f3a3 	rbit	r3, r3
 8003ef2:	613b      	str	r3, [r7, #16]
  return result;
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8003efe:	2320      	movs	r3, #32
 8003f00:	e003      	b.n	8003f0a <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	fab3 f383 	clz	r3, r3
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	210f      	movs	r1, #15
 8003f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f12:	43db      	mvns	r3, r3
 8003f14:	401a      	ands	r2, r3
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1a:	6a3b      	ldr	r3, [r7, #32]
 8003f1c:	fa93 f3a3 	rbit	r3, r3
 8003f20:	61fb      	str	r3, [r7, #28]
  return result;
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8003f2c:	2320      	movs	r3, #32
 8003f2e:	e003      	b.n	8003f38 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8003f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f32:	fab3 f383 	clz	r3, r3
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f40:	431a      	orrs	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8003f46:	bf00      	nop
 8003f48:	372c      	adds	r7, #44	; 0x2c
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b08b      	sub	sp, #44	; 0x2c
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	60f8      	str	r0, [r7, #12]
 8003f5a:	60b9      	str	r1, [r7, #8]
 8003f5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	0a1b      	lsrs	r3, r3, #8
 8003f66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	fa93 f3a3 	rbit	r3, r3
 8003f6e:	613b      	str	r3, [r7, #16]
  return result;
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8003f7a:	2320      	movs	r3, #32
 8003f7c:	e003      	b.n	8003f86 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	fab3 f383 	clz	r3, r3
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	210f      	movs	r1, #15
 8003f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8e:	43db      	mvns	r3, r3
 8003f90:	401a      	ands	r2, r3
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	0a1b      	lsrs	r3, r3, #8
 8003f96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	fa93 f3a3 	rbit	r3, r3
 8003f9e:	61fb      	str	r3, [r7, #28]
  return result;
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8003faa:	2320      	movs	r3, #32
 8003fac:	e003      	b.n	8003fb6 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8003fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb0:	fab3 f383 	clz	r3, r3
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	6879      	ldr	r1, [r7, #4]
 8003fba:	fa01 f303 	lsl.w	r3, r1, r3
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8003fc4:	bf00      	nop
 8003fc6:	372c      	adds	r7, #44	; 0x2c
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b088      	sub	sp, #32
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	fa93 f3a3 	rbit	r3, r3
 8003fe6:	60fb      	str	r3, [r7, #12]
  return result;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <LL_GPIO_Init+0x26>
    return 32U;
 8003ff2:	2320      	movs	r3, #32
 8003ff4:	e003      	b.n	8003ffe <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	fab3 f383 	clz	r3, r3
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004000:	e048      	b.n	8004094 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	2101      	movs	r1, #1
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	fa01 f303 	lsl.w	r3, r1, r3
 800400e:	4013      	ands	r3, r2
 8004010:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d03a      	beq.n	800408e <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d003      	beq.n	8004028 <LL_GPIO_Init+0x58>
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2b02      	cmp	r3, #2
 8004026:	d10e      	bne.n	8004046 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	461a      	mov	r2, r3
 800402e:	69b9      	ldr	r1, [r7, #24]
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f7ff fed7 	bl	8003de4 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	6819      	ldr	r1, [r3, #0]
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	461a      	mov	r2, r3
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7ff feb7 	bl	8003db4 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	461a      	mov	r2, r3
 800404c:	69b9      	ldr	r1, [r7, #24]
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7ff ff05 	bl	8003e5e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	2b02      	cmp	r3, #2
 800405a:	d111      	bne.n	8004080 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	2bff      	cmp	r3, #255	; 0xff
 8004060:	d807      	bhi.n	8004072 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	461a      	mov	r2, r3
 8004068:	69b9      	ldr	r1, [r7, #24]
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7ff ff34 	bl	8003ed8 <LL_GPIO_SetAFPin_0_7>
 8004070:	e006      	b.n	8004080 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	461a      	mov	r2, r3
 8004078:	69b9      	ldr	r1, [r7, #24]
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7ff ff69 	bl	8003f52 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	461a      	mov	r2, r3
 8004086:	69b9      	ldr	r1, [r7, #24]
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f7ff fe56 	bl	8003d3a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	3301      	adds	r3, #1
 8004092:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	fa22 f303 	lsr.w	r3, r2, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1af      	bne.n	8004002 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3720      	adds	r7, #32
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <LL_TIM_SetPrescaler>:
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <LL_TIM_SetAutoReload>:
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <LL_TIM_SetRepetitionCounter>:
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <LL_TIM_OC_SetCompareCH1>:
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <LL_TIM_OC_SetCompareCH2>:
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <LL_TIM_OC_SetCompareCH3>:
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <LL_TIM_OC_SetCompareCH4>:
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <LL_TIM_OC_SetCompareCH5>:
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	649a      	str	r2, [r3, #72]	; 0x48
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <LL_TIM_OC_SetCompareCH6>:
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	f043 0201 	orr.w	r2, r3, #1
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	615a      	str	r2, [r3, #20]
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a39      	ldr	r2, [pc, #228]	; (80042c4 <LL_TIM_Init+0xf8>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d00f      	beq.n	8004204 <LL_TIM_Init+0x38>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ea:	d00b      	beq.n	8004204 <LL_TIM_Init+0x38>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a36      	ldr	r2, [pc, #216]	; (80042c8 <LL_TIM_Init+0xfc>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d007      	beq.n	8004204 <LL_TIM_Init+0x38>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a35      	ldr	r2, [pc, #212]	; (80042cc <LL_TIM_Init+0x100>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d003      	beq.n	8004204 <LL_TIM_Init+0x38>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a34      	ldr	r2, [pc, #208]	; (80042d0 <LL_TIM_Init+0x104>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d106      	bne.n	8004212 <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	4313      	orrs	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a2b      	ldr	r2, [pc, #172]	; (80042c4 <LL_TIM_Init+0xf8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d01b      	beq.n	8004252 <LL_TIM_Init+0x86>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004220:	d017      	beq.n	8004252 <LL_TIM_Init+0x86>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a28      	ldr	r2, [pc, #160]	; (80042c8 <LL_TIM_Init+0xfc>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d013      	beq.n	8004252 <LL_TIM_Init+0x86>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a27      	ldr	r2, [pc, #156]	; (80042cc <LL_TIM_Init+0x100>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d00f      	beq.n	8004252 <LL_TIM_Init+0x86>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a26      	ldr	r2, [pc, #152]	; (80042d0 <LL_TIM_Init+0x104>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d00b      	beq.n	8004252 <LL_TIM_Init+0x86>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a25      	ldr	r2, [pc, #148]	; (80042d4 <LL_TIM_Init+0x108>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d007      	beq.n	8004252 <LL_TIM_Init+0x86>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a24      	ldr	r2, [pc, #144]	; (80042d8 <LL_TIM_Init+0x10c>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d003      	beq.n	8004252 <LL_TIM_Init+0x86>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a23      	ldr	r2, [pc, #140]	; (80042dc <LL_TIM_Init+0x110>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d106      	bne.n	8004260 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	4313      	orrs	r3, r2
 800425e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	4619      	mov	r1, r3
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f7ff ff2b 	bl	80040c8 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	4619      	mov	r1, r3
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f7ff ff17 	bl	80040ac <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a10      	ldr	r2, [pc, #64]	; (80042c4 <LL_TIM_Init+0xf8>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d00f      	beq.n	80042a6 <LL_TIM_Init+0xda>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a11      	ldr	r2, [pc, #68]	; (80042d0 <LL_TIM_Init+0x104>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d00b      	beq.n	80042a6 <LL_TIM_Init+0xda>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a10      	ldr	r2, [pc, #64]	; (80042d4 <LL_TIM_Init+0x108>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d007      	beq.n	80042a6 <LL_TIM_Init+0xda>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a0f      	ldr	r2, [pc, #60]	; (80042d8 <LL_TIM_Init+0x10c>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d003      	beq.n	80042a6 <LL_TIM_Init+0xda>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a0e      	ldr	r2, [pc, #56]	; (80042dc <LL_TIM_Init+0x110>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d105      	bne.n	80042b2 <LL_TIM_Init+0xe6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	4619      	mov	r1, r3
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7ff ff19 	bl	80040e4 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7ff ff7a 	bl	80041ac <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	40012c00 	.word	0x40012c00
 80042c8:	40000400 	.word	0x40000400
 80042cc:	40000800 	.word	0x40000800
 80042d0:	40013400 	.word	0x40013400
 80042d4:	40014000 	.word	0x40014000
 80042d8:	40014400 	.word	0x40014400
 80042dc:	40014800 	.word	0x40014800

080042e0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042f6:	d045      	beq.n	8004384 <LL_TIM_OC_Init+0xa4>
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042fe:	d848      	bhi.n	8004392 <LL_TIM_OC_Init+0xb2>
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004306:	d036      	beq.n	8004376 <LL_TIM_OC_Init+0x96>
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800430e:	d840      	bhi.n	8004392 <LL_TIM_OC_Init+0xb2>
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004316:	d027      	beq.n	8004368 <LL_TIM_OC_Init+0x88>
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800431e:	d838      	bhi.n	8004392 <LL_TIM_OC_Init+0xb2>
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004326:	d018      	beq.n	800435a <LL_TIM_OC_Init+0x7a>
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800432e:	d830      	bhi.n	8004392 <LL_TIM_OC_Init+0xb2>
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d003      	beq.n	800433e <LL_TIM_OC_Init+0x5e>
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	2b10      	cmp	r3, #16
 800433a:	d007      	beq.n	800434c <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800433c:	e029      	b.n	8004392 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 f8b5 	bl	80044b0 <OC1Config>
 8004346:	4603      	mov	r3, r0
 8004348:	75fb      	strb	r3, [r7, #23]
      break;
 800434a:	e023      	b.n	8004394 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 f92e 	bl	80045b0 <OC2Config>
 8004354:	4603      	mov	r3, r0
 8004356:	75fb      	strb	r3, [r7, #23]
      break;
 8004358:	e01c      	b.n	8004394 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800435a:	6879      	ldr	r1, [r7, #4]
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f000 f9ab 	bl	80046b8 <OC3Config>
 8004362:	4603      	mov	r3, r0
 8004364:	75fb      	strb	r3, [r7, #23]
      break;
 8004366:	e015      	b.n	8004394 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8004368:	6879      	ldr	r1, [r7, #4]
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f000 fa28 	bl	80047c0 <OC4Config>
 8004370:	4603      	mov	r3, r0
 8004372:	75fb      	strb	r3, [r7, #23]
      break;
 8004374:	e00e      	b.n	8004394 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8004376:	6879      	ldr	r1, [r7, #4]
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f000 faa5 	bl	80048c8 <OC5Config>
 800437e:	4603      	mov	r3, r0
 8004380:	75fb      	strb	r3, [r7, #23]
      break;
 8004382:	e007      	b.n	8004394 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 fb02 	bl	8004990 <OC6Config>
 800438c:	4603      	mov	r3, r0
 800438e:	75fb      	strb	r3, [r7, #23]
      break;
 8004390:	e000      	b.n	8004394 <LL_TIM_OC_Init+0xb4>
      break;
 8004392:	bf00      	nop
  }

  return result;
 8004394:	7dfb      	ldrb	r3, [r7, #23]
}
 8004396:	4618      	mov	r0, r3
 8004398:	3718      	adds	r7, #24
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
	...

080043a0 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 80043aa:	2300      	movs	r3, #0
 80043ac:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	7b12      	ldrb	r2, [r2, #12]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	89d2      	ldrh	r2, [r2, #14]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	4313      	orrs	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440c:	4313      	orrs	r3, r2
 800440e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441a:	4313      	orrs	r3, r2
 800441c:	60fb      	str	r3, [r7, #12]
  if (IS_TIM_ADVANCED_INSTANCE(TIMx))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a21      	ldr	r2, [pc, #132]	; (80044a8 <LL_TIM_BDTR_Init+0x108>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d003      	beq.n	800442e <LL_TIM_BDTR_Init+0x8e>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a20      	ldr	r2, [pc, #128]	; (80044ac <LL_TIM_BDTR_Init+0x10c>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d10d      	bne.n	800444a <LL_TIM_BDTR_Init+0xaa>
  {
    assert_param(IS_LL_TIM_BREAK_FILTER(TIM_BDTRInitStruct->BreakFilter));
    assert_param(IS_LL_TIM_BREAK_AFMODE(TIM_BDTRInitStruct->BreakAFMode));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	4313      	orrs	r3, r2
 800443a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, TIM_BDTRInitStruct->BreakAFMode);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	4313      	orrs	r3, r2
 8004448:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a16      	ldr	r2, [pc, #88]	; (80044a8 <LL_TIM_BDTR_Init+0x108>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d003      	beq.n	800445a <LL_TIM_BDTR_Init+0xba>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a15      	ldr	r2, [pc, #84]	; (80044ac <LL_TIM_BDTR_Init+0x10c>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d11b      	bne.n	8004492 <LL_TIM_BDTR_Init+0xf2>
    assert_param(IS_LL_TIM_BREAK2_POLARITY(TIM_BDTRInitStruct->Break2Polarity));
    assert_param(IS_LL_TIM_BREAK2_FILTER(TIM_BDTRInitStruct->Break2Filter));
    assert_param(IS_LL_TIM_BREAK2_AFMODE(TIM_BDTRInitStruct->Break2AFMode));

    /* Set the BREAK2 input related BDTR bit-fields */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	4313      	orrs	r3, r2
 8004466:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	69db      	ldr	r3, [r3, #28]
 8004472:	4313      	orrs	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	4313      	orrs	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, TIM_BDTRInitStruct->Break2AFMode);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448e:	4313      	orrs	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	40012c00 	.word	0x40012c00
 80044ac:	40013400 	.word	0x40013400

080044b0 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	f023 0201 	bic.w	r2, r3, #1
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 0303 	bic.w	r3, r3, #3
 80044de:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	6812      	ldr	r2, [r2, #0]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f023 0202 	bic.w	r2, r3, #2
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	f023 0201 	bic.w	r2, r3, #1
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	4313      	orrs	r3, r2
 800450c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a22      	ldr	r2, [pc, #136]	; (800459c <OC1Config+0xec>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d00f      	beq.n	8004536 <OC1Config+0x86>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a21      	ldr	r2, [pc, #132]	; (80045a0 <OC1Config+0xf0>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d00b      	beq.n	8004536 <OC1Config+0x86>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a20      	ldr	r2, [pc, #128]	; (80045a4 <OC1Config+0xf4>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d007      	beq.n	8004536 <OC1Config+0x86>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a1f      	ldr	r2, [pc, #124]	; (80045a8 <OC1Config+0xf8>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d003      	beq.n	8004536 <OC1Config+0x86>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a1e      	ldr	r2, [pc, #120]	; (80045ac <OC1Config+0xfc>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d11e      	bne.n	8004574 <OC1Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f023 0208 	bic.w	r2, r3, #8
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4313      	orrs	r3, r2
 8004544:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f023 0204 	bic.w	r2, r3, #4
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	4313      	orrs	r3, r2
 8004554:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	4313      	orrs	r3, r2
 8004562:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	4313      	orrs	r3, r2
 8004572:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	4619      	mov	r1, r3
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7ff fdba 	bl	8004100 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3718      	adds	r7, #24
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	40012c00 	.word	0x40012c00
 80045a0:	40013400 	.word	0x40013400
 80045a4:	40014000 	.word	0x40014000
 80045a8:	40014400 	.word	0x40014400
 80045ac:	40014800 	.word	0x40014800

080045b0 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	f023 0210 	bic.w	r2, r3, #16
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	6812      	ldr	r2, [r2, #0]
 80045ee:	0212      	lsls	r2, r2, #8
 80045f0:	4313      	orrs	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f023 0220 	bic.w	r2, r3, #32
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	4313      	orrs	r3, r2
 8004602:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f023 0210 	bic.w	r2, r3, #16
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	4313      	orrs	r3, r2
 8004612:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a23      	ldr	r2, [pc, #140]	; (80046a4 <OC2Config+0xf4>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d00f      	beq.n	800463c <OC2Config+0x8c>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a22      	ldr	r2, [pc, #136]	; (80046a8 <OC2Config+0xf8>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d00b      	beq.n	800463c <OC2Config+0x8c>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a21      	ldr	r2, [pc, #132]	; (80046ac <OC2Config+0xfc>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d007      	beq.n	800463c <OC2Config+0x8c>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a20      	ldr	r2, [pc, #128]	; (80046b0 <OC2Config+0x100>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d003      	beq.n	800463c <OC2Config+0x8c>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a1f      	ldr	r2, [pc, #124]	; (80046b4 <OC2Config+0x104>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d11f      	bne.n	800467c <OC2Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	019b      	lsls	r3, r3, #6
 8004648:	4313      	orrs	r3, r2
 800464a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	019b      	lsls	r3, r3, #6
 8004658:	4313      	orrs	r3, r2
 800465a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4313      	orrs	r3, r2
 800466a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	00db      	lsls	r3, r3, #3
 8004678:	4313      	orrs	r3, r2
 800467a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	4619      	mov	r1, r3
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7ff fd44 	bl	800411c <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3718      	adds	r7, #24
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	40012c00 	.word	0x40012c00
 80046a8:	40013400 	.word	0x40013400
 80046ac:	40014000 	.word	0x40014000
 80046b0:	40014400 	.word	0x40014400
 80046b4:	40014800 	.word	0x40014800

080046b8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f023 0303 	bic.w	r3, r3, #3
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	6812      	ldr	r2, [r2, #0]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	021b      	lsls	r3, r3, #8
 8004706:	4313      	orrs	r3, r2
 8004708:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	021b      	lsls	r3, r3, #8
 8004716:	4313      	orrs	r3, r2
 8004718:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a23      	ldr	r2, [pc, #140]	; (80047ac <OC3Config+0xf4>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d00f      	beq.n	8004742 <OC3Config+0x8a>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a22      	ldr	r2, [pc, #136]	; (80047b0 <OC3Config+0xf8>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d00b      	beq.n	8004742 <OC3Config+0x8a>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a21      	ldr	r2, [pc, #132]	; (80047b4 <OC3Config+0xfc>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d007      	beq.n	8004742 <OC3Config+0x8a>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a20      	ldr	r2, [pc, #128]	; (80047b8 <OC3Config+0x100>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d003      	beq.n	8004742 <OC3Config+0x8a>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a1f      	ldr	r2, [pc, #124]	; (80047bc <OC3Config+0x104>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d11f      	bne.n	8004782 <OC3Config+0xca>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	029b      	lsls	r3, r3, #10
 800474e:	4313      	orrs	r3, r2
 8004750:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	029b      	lsls	r3, r3, #10
 800475e:	4313      	orrs	r3, r2
 8004760:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	011b      	lsls	r3, r3, #4
 800476e:	4313      	orrs	r3, r2
 8004770:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	015b      	lsls	r3, r3, #5
 800477e:	4313      	orrs	r3, r2
 8004780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	4619      	mov	r1, r3
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7ff fccf 	bl	8004138 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3718      	adds	r7, #24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	40012c00 	.word	0x40012c00
 80047b0:	40013400 	.word	0x40013400
 80047b4:	40014000 	.word	0x40014000
 80047b8:	40014400 	.word	0x40014400
 80047bc:	40014800 	.word	0x40014800

080047c0 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	6812      	ldr	r2, [r2, #0]
 80047fe:	0212      	lsls	r2, r2, #8
 8004800:	4313      	orrs	r3, r2
 8004802:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	031b      	lsls	r3, r3, #12
 8004810:	4313      	orrs	r3, r2
 8004812:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	031b      	lsls	r3, r3, #12
 8004820:	4313      	orrs	r3, r2
 8004822:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a23      	ldr	r2, [pc, #140]	; (80048b4 <OC4Config+0xf4>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d00f      	beq.n	800484c <OC4Config+0x8c>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a22      	ldr	r2, [pc, #136]	; (80048b8 <OC4Config+0xf8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d00b      	beq.n	800484c <OC4Config+0x8c>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a21      	ldr	r2, [pc, #132]	; (80048bc <OC4Config+0xfc>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d007      	beq.n	800484c <OC4Config+0x8c>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a20      	ldr	r2, [pc, #128]	; (80048c0 <OC4Config+0x100>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d003      	beq.n	800484c <OC4Config+0x8c>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a1f      	ldr	r2, [pc, #124]	; (80048c4 <OC4Config+0x104>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d11f      	bne.n	800488c <OC4Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NP, TIM_OCInitStruct->OCNPolarity << 14U);
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	039b      	lsls	r3, r3, #14
 8004858:	4313      	orrs	r3, r2
 800485a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NE, TIM_OCInitStruct->OCNState << 14U);
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	039b      	lsls	r3, r3, #14
 8004868:	4313      	orrs	r3, r2
 800486a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	019b      	lsls	r3, r3, #6
 8004878:	4313      	orrs	r3, r2
 800487a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4N, TIM_OCInitStruct->OCNIdleState << 7U);
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	01db      	lsls	r3, r3, #7
 8004888:	4313      	orrs	r3, r2
 800488a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	4619      	mov	r1, r3
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7ff fc58 	bl	8004154 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3718      	adds	r7, #24
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	40012c00 	.word	0x40012c00
 80048b8:	40013400 	.word	0x40013400
 80048bc:	40014000 	.word	0x40014000
 80048c0:	40014400 	.word	0x40014400
 80048c4:	40014800 	.word	0x40014800

080048c8 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e8:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	6812      	ldr	r2, [r2, #0]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	041b      	lsls	r3, r3, #16
 8004908:	4313      	orrs	r3, r2
 800490a:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	041b      	lsls	r3, r3, #16
 8004918:	4313      	orrs	r3, r2
 800491a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a17      	ldr	r2, [pc, #92]	; (800497c <OC5Config+0xb4>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d00f      	beq.n	8004944 <OC5Config+0x7c>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a16      	ldr	r2, [pc, #88]	; (8004980 <OC5Config+0xb8>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d00b      	beq.n	8004944 <OC5Config+0x7c>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a15      	ldr	r2, [pc, #84]	; (8004984 <OC5Config+0xbc>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d007      	beq.n	8004944 <OC5Config+0x7c>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a14      	ldr	r2, [pc, #80]	; (8004988 <OC5Config+0xc0>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d003      	beq.n	8004944 <OC5Config+0x7c>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a13      	ldr	r2, [pc, #76]	; (800498c <OC5Config+0xc4>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d109      	bne.n	8004958 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	021b      	lsls	r3, r3, #8
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	4619      	mov	r1, r3
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f7ff fc03 	bl	8004170 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	40012c00 	.word	0x40012c00
 8004980:	40013400 	.word	0x40013400
 8004984:	40014000 	.word	0x40014000
 8004988:	40014400 	.word	0x40014400
 800498c:	40014800 	.word	0x40014800

08004990 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049b0:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	6812      	ldr	r2, [r2, #0]
 80049c0:	0212      	lsls	r2, r2, #8
 80049c2:	4313      	orrs	r3, r2
 80049c4:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	051b      	lsls	r3, r3, #20
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	051b      	lsls	r3, r3, #20
 80049e2:	4313      	orrs	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a16      	ldr	r2, [pc, #88]	; (8004a44 <OC6Config+0xb4>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d00f      	beq.n	8004a0e <OC6Config+0x7e>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a15      	ldr	r2, [pc, #84]	; (8004a48 <OC6Config+0xb8>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d00b      	beq.n	8004a0e <OC6Config+0x7e>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a14      	ldr	r2, [pc, #80]	; (8004a4c <OC6Config+0xbc>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d007      	beq.n	8004a0e <OC6Config+0x7e>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a13      	ldr	r2, [pc, #76]	; (8004a50 <OC6Config+0xc0>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d003      	beq.n	8004a0e <OC6Config+0x7e>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a12      	ldr	r2, [pc, #72]	; (8004a54 <OC6Config+0xc4>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d109      	bne.n	8004a22 <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	029b      	lsls	r3, r3, #10
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7ff fbae 	bl	8004190 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	40012c00 	.word	0x40012c00
 8004a48:	40013400 	.word	0x40013400
 8004a4c:	40014000 	.word	0x40014000
 8004a50:	40014400 	.word	0x40014400
 8004a54:	40014800 	.word	0x40014800

08004a58 <__libc_init_array>:
 8004a58:	b570      	push	{r4, r5, r6, lr}
 8004a5a:	4d0d      	ldr	r5, [pc, #52]	; (8004a90 <__libc_init_array+0x38>)
 8004a5c:	4c0d      	ldr	r4, [pc, #52]	; (8004a94 <__libc_init_array+0x3c>)
 8004a5e:	1b64      	subs	r4, r4, r5
 8004a60:	10a4      	asrs	r4, r4, #2
 8004a62:	2600      	movs	r6, #0
 8004a64:	42a6      	cmp	r6, r4
 8004a66:	d109      	bne.n	8004a7c <__libc_init_array+0x24>
 8004a68:	4d0b      	ldr	r5, [pc, #44]	; (8004a98 <__libc_init_array+0x40>)
 8004a6a:	4c0c      	ldr	r4, [pc, #48]	; (8004a9c <__libc_init_array+0x44>)
 8004a6c:	f000 f820 	bl	8004ab0 <_init>
 8004a70:	1b64      	subs	r4, r4, r5
 8004a72:	10a4      	asrs	r4, r4, #2
 8004a74:	2600      	movs	r6, #0
 8004a76:	42a6      	cmp	r6, r4
 8004a78:	d105      	bne.n	8004a86 <__libc_init_array+0x2e>
 8004a7a:	bd70      	pop	{r4, r5, r6, pc}
 8004a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a80:	4798      	blx	r3
 8004a82:	3601      	adds	r6, #1
 8004a84:	e7ee      	b.n	8004a64 <__libc_init_array+0xc>
 8004a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a8a:	4798      	blx	r3
 8004a8c:	3601      	adds	r6, #1
 8004a8e:	e7f2      	b.n	8004a76 <__libc_init_array+0x1e>
 8004a90:	08004af0 	.word	0x08004af0
 8004a94:	08004af0 	.word	0x08004af0
 8004a98:	08004af0 	.word	0x08004af0
 8004a9c:	08004af4 	.word	0x08004af4

08004aa0 <memset>:
 8004aa0:	4402      	add	r2, r0
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d100      	bne.n	8004aaa <memset+0xa>
 8004aa8:	4770      	bx	lr
 8004aaa:	f803 1b01 	strb.w	r1, [r3], #1
 8004aae:	e7f9      	b.n	8004aa4 <memset+0x4>

08004ab0 <_init>:
 8004ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ab2:	bf00      	nop
 8004ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ab6:	bc08      	pop	{r3}
 8004ab8:	469e      	mov	lr, r3
 8004aba:	4770      	bx	lr

08004abc <_fini>:
 8004abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004abe:	bf00      	nop
 8004ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ac2:	bc08      	pop	{r3}
 8004ac4:	469e      	mov	lr, r3
 8004ac6:	4770      	bx	lr
