
Zoetrop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003228  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003400  08003400  00013400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003428  08003428  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003428  08003428  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003428  08003428  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003428  08003428  00013428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800342c  0800342c  0001342c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003430  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  0800343c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  0800343c  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a0fb  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ac9  00000000  00000000  0002a137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  0002bc00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000900  00000000  00000000  0002c5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003a67  00000000  00000000  0002ced8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000091a6  00000000  00000000  0003093f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce370  00000000  00000000  00039ae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00107e55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000278c  00000000  00000000  00107ea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080033e8 	.word	0x080033e8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080033e8 	.word	0x080033e8

08000218 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000228:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800022c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000230:	683a      	ldr	r2, [r7, #0]
 8000232:	431a      	orrs	r2, r3
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_CFGR2_GCOMP_Pos);
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	691b      	ldr	r3, [r3, #16]
 800023e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000242:	683a      	ldr	r2, [r7, #0]
 8000244:	2a00      	cmp	r2, #0
 8000246:	d002      	beq.n	800024e <LL_ADC_SetGainCompensation+0x36>
 8000248:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800024c:	e000      	b.n	8000250 <LL_ADC_SetGainCompensation+0x38>
 800024e:	2200      	movs	r2, #0
 8000250:	431a      	orrs	r2, r3
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	611a      	str	r2, [r3, #16]
}
 8000256:	bf00      	nop
 8000258:	370c      	adds	r7, #12
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr

08000262 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000262:	b480      	push	{r7}
 8000264:	b087      	sub	sp, #28
 8000266:	af00      	add	r7, sp, #0
 8000268:	60f8      	str	r0, [r7, #12]
 800026a:	60b9      	str	r1, [r7, #8]
 800026c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	3330      	adds	r3, #48	; 0x30
 8000272:	461a      	mov	r2, r3
 8000274:	68bb      	ldr	r3, [r7, #8]
 8000276:	0a1b      	lsrs	r3, r3, #8
 8000278:	009b      	lsls	r3, r3, #2
 800027a:	f003 030c 	and.w	r3, r3, #12
 800027e:	4413      	add	r3, r2
 8000280:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000282:	697b      	ldr	r3, [r7, #20]
 8000284:	681a      	ldr	r2, [r3, #0]
 8000286:	68bb      	ldr	r3, [r7, #8]
 8000288:	f003 031f 	and.w	r3, r3, #31
 800028c:	211f      	movs	r1, #31
 800028e:	fa01 f303 	lsl.w	r3, r1, r3
 8000292:	43db      	mvns	r3, r3
 8000294:	401a      	ands	r2, r3
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	0e9b      	lsrs	r3, r3, #26
 800029a:	f003 011f 	and.w	r1, r3, #31
 800029e:	68bb      	ldr	r3, [r7, #8]
 80002a0:	f003 031f 	and.w	r3, r3, #31
 80002a4:	fa01 f303 	lsl.w	r3, r1, r3
 80002a8:	431a      	orrs	r2, r3
 80002aa:	697b      	ldr	r3, [r7, #20]
 80002ac:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80002ae:	bf00      	nop
 80002b0:	371c      	adds	r7, #28
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr

080002ba <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80002ba:	b480      	push	{r7}
 80002bc:	b087      	sub	sp, #28
 80002be:	af00      	add	r7, sp, #0
 80002c0:	60f8      	str	r0, [r7, #12]
 80002c2:	60b9      	str	r1, [r7, #8]
 80002c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	3314      	adds	r3, #20
 80002ca:	461a      	mov	r2, r3
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	0e5b      	lsrs	r3, r3, #25
 80002d0:	009b      	lsls	r3, r3, #2
 80002d2:	f003 0304 	and.w	r3, r3, #4
 80002d6:	4413      	add	r3, r2
 80002d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80002da:	697b      	ldr	r3, [r7, #20]
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	68bb      	ldr	r3, [r7, #8]
 80002e0:	0d1b      	lsrs	r3, r3, #20
 80002e2:	f003 031f 	and.w	r3, r3, #31
 80002e6:	2107      	movs	r1, #7
 80002e8:	fa01 f303 	lsl.w	r3, r1, r3
 80002ec:	43db      	mvns	r3, r3
 80002ee:	401a      	ands	r2, r3
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	0d1b      	lsrs	r3, r3, #20
 80002f4:	f003 031f 	and.w	r3, r3, #31
 80002f8:	6879      	ldr	r1, [r7, #4]
 80002fa:	fa01 f303 	lsl.w	r3, r1, r3
 80002fe:	431a      	orrs	r2, r3
 8000300:	697b      	ldr	r3, [r7, #20]
 8000302:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000304:	bf00      	nop
 8000306:	371c      	adds	r7, #28
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr

08000310 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000310:	b480      	push	{r7}
 8000312:	b085      	sub	sp, #20
 8000314:	af00      	add	r7, sp, #0
 8000316:	60f8      	str	r0, [r7, #12]
 8000318:	60b9      	str	r1, [r7, #8]
 800031a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000328:	43db      	mvns	r3, r3
 800032a:	401a      	ands	r2, r3
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	f003 0318 	and.w	r3, r3, #24
 8000332:	4908      	ldr	r1, [pc, #32]	; (8000354 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000334:	40d9      	lsrs	r1, r3
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	400b      	ands	r3, r1
 800033a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800033e:	431a      	orrs	r2, r3
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000346:	bf00      	nop
 8000348:	3714      	adds	r7, #20
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	0007ffff 	.word	0x0007ffff

08000358 <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_GRP_INJECTED
  *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	691b      	ldr	r3, [r3, #16]
 8000366:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800036a:	f023 0303 	bic.w	r3, r3, #3
 800036e:	683a      	ldr	r2, [r7, #0]
 8000370:	431a      	orrs	r2, r3
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	611a      	str	r2, [r3, #16]
}
 8000376:	bf00      	nop
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr

08000382 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000382:	b480      	push	{r7}
 8000384:	b083      	sub	sp, #12
 8000386:	af00      	add	r7, sp, #0
 8000388:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	689b      	ldr	r3, [r3, #8]
 800038e:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000392:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000396:	687a      	ldr	r2, [r7, #4]
 8000398:	6093      	str	r3, [r2, #8]
}
 800039a:	bf00      	nop
 800039c:	370c      	adds	r7, #12
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr

080003a6 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80003a6:	b480      	push	{r7}
 80003a8:	b083      	sub	sp, #12
 80003aa:	af00      	add	r7, sp, #0
 80003ac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	689b      	ldr	r3, [r3, #8]
 80003b2:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80003b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80003ba:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80003c2:	bf00      	nop
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr

080003ce <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 80003ce:	b480      	push	{r7}
 80003d0:	b083      	sub	sp, #12
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	601a      	str	r2, [r3, #0]
}
 80003e2:	bf00      	nop
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
	...

080003f0 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b085      	sub	sp, #20
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
 80003f8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d02e      	beq.n	800045e <LL_TIM_OC_DisableFast+0x6e>
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	2b04      	cmp	r3, #4
 8000404:	d029      	beq.n	800045a <LL_TIM_OC_DisableFast+0x6a>
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	2b10      	cmp	r3, #16
 800040a:	d024      	beq.n	8000456 <LL_TIM_OC_DisableFast+0x66>
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	2b40      	cmp	r3, #64	; 0x40
 8000410:	d01f      	beq.n	8000452 <LL_TIM_OC_DisableFast+0x62>
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000418:	d019      	beq.n	800044e <LL_TIM_OC_DisableFast+0x5e>
 800041a:	683b      	ldr	r3, [r7, #0]
 800041c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000420:	d013      	beq.n	800044a <LL_TIM_OC_DisableFast+0x5a>
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000428:	d00d      	beq.n	8000446 <LL_TIM_OC_DisableFast+0x56>
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000430:	d007      	beq.n	8000442 <LL_TIM_OC_DisableFast+0x52>
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000438:	d101      	bne.n	800043e <LL_TIM_OC_DisableFast+0x4e>
 800043a:	2308      	movs	r3, #8
 800043c:	e010      	b.n	8000460 <LL_TIM_OC_DisableFast+0x70>
 800043e:	2309      	movs	r3, #9
 8000440:	e00e      	b.n	8000460 <LL_TIM_OC_DisableFast+0x70>
 8000442:	2307      	movs	r3, #7
 8000444:	e00c      	b.n	8000460 <LL_TIM_OC_DisableFast+0x70>
 8000446:	2306      	movs	r3, #6
 8000448:	e00a      	b.n	8000460 <LL_TIM_OC_DisableFast+0x70>
 800044a:	2305      	movs	r3, #5
 800044c:	e008      	b.n	8000460 <LL_TIM_OC_DisableFast+0x70>
 800044e:	2304      	movs	r3, #4
 8000450:	e006      	b.n	8000460 <LL_TIM_OC_DisableFast+0x70>
 8000452:	2303      	movs	r3, #3
 8000454:	e004      	b.n	8000460 <LL_TIM_OC_DisableFast+0x70>
 8000456:	2302      	movs	r3, #2
 8000458:	e002      	b.n	8000460 <LL_TIM_OC_DisableFast+0x70>
 800045a:	2301      	movs	r3, #1
 800045c:	e000      	b.n	8000460 <LL_TIM_OC_DisableFast+0x70>
 800045e:	2300      	movs	r3, #0
 8000460:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	3318      	adds	r3, #24
 8000466:	4619      	mov	r1, r3
 8000468:	7bfb      	ldrb	r3, [r7, #15]
 800046a:	4a0b      	ldr	r2, [pc, #44]	; (8000498 <LL_TIM_OC_DisableFast+0xa8>)
 800046c:	5cd3      	ldrb	r3, [r2, r3]
 800046e:	440b      	add	r3, r1
 8000470:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000472:	68bb      	ldr	r3, [r7, #8]
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	7bfb      	ldrb	r3, [r7, #15]
 8000478:	4908      	ldr	r1, [pc, #32]	; (800049c <LL_TIM_OC_DisableFast+0xac>)
 800047a:	5ccb      	ldrb	r3, [r1, r3]
 800047c:	4619      	mov	r1, r3
 800047e:	2304      	movs	r3, #4
 8000480:	408b      	lsls	r3, r1
 8000482:	43db      	mvns	r3, r3
 8000484:	401a      	ands	r2, r3
 8000486:	68bb      	ldr	r3, [r7, #8]
 8000488:	601a      	str	r2, [r3, #0]

}
 800048a:	bf00      	nop
 800048c:	3714      	adds	r7, #20
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	08003400 	.word	0x08003400
 800049c:	0800340c 	.word	0x0800340c

080004a0 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b085      	sub	sp, #20
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	2b01      	cmp	r3, #1
 80004ae:	d02e      	beq.n	800050e <LL_TIM_OC_EnablePreload+0x6e>
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	2b04      	cmp	r3, #4
 80004b4:	d029      	beq.n	800050a <LL_TIM_OC_EnablePreload+0x6a>
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	2b10      	cmp	r3, #16
 80004ba:	d024      	beq.n	8000506 <LL_TIM_OC_EnablePreload+0x66>
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	2b40      	cmp	r3, #64	; 0x40
 80004c0:	d01f      	beq.n	8000502 <LL_TIM_OC_EnablePreload+0x62>
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80004c8:	d019      	beq.n	80004fe <LL_TIM_OC_EnablePreload+0x5e>
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004d0:	d013      	beq.n	80004fa <LL_TIM_OC_EnablePreload+0x5a>
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80004d8:	d00d      	beq.n	80004f6 <LL_TIM_OC_EnablePreload+0x56>
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80004e0:	d007      	beq.n	80004f2 <LL_TIM_OC_EnablePreload+0x52>
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004e8:	d101      	bne.n	80004ee <LL_TIM_OC_EnablePreload+0x4e>
 80004ea:	2308      	movs	r3, #8
 80004ec:	e010      	b.n	8000510 <LL_TIM_OC_EnablePreload+0x70>
 80004ee:	2309      	movs	r3, #9
 80004f0:	e00e      	b.n	8000510 <LL_TIM_OC_EnablePreload+0x70>
 80004f2:	2307      	movs	r3, #7
 80004f4:	e00c      	b.n	8000510 <LL_TIM_OC_EnablePreload+0x70>
 80004f6:	2306      	movs	r3, #6
 80004f8:	e00a      	b.n	8000510 <LL_TIM_OC_EnablePreload+0x70>
 80004fa:	2305      	movs	r3, #5
 80004fc:	e008      	b.n	8000510 <LL_TIM_OC_EnablePreload+0x70>
 80004fe:	2304      	movs	r3, #4
 8000500:	e006      	b.n	8000510 <LL_TIM_OC_EnablePreload+0x70>
 8000502:	2303      	movs	r3, #3
 8000504:	e004      	b.n	8000510 <LL_TIM_OC_EnablePreload+0x70>
 8000506:	2302      	movs	r3, #2
 8000508:	e002      	b.n	8000510 <LL_TIM_OC_EnablePreload+0x70>
 800050a:	2301      	movs	r3, #1
 800050c:	e000      	b.n	8000510 <LL_TIM_OC_EnablePreload+0x70>
 800050e:	2300      	movs	r3, #0
 8000510:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	3318      	adds	r3, #24
 8000516:	4619      	mov	r1, r3
 8000518:	7bfb      	ldrb	r3, [r7, #15]
 800051a:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <LL_TIM_OC_EnablePreload+0xa4>)
 800051c:	5cd3      	ldrb	r3, [r2, r3]
 800051e:	440b      	add	r3, r1
 8000520:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	7bfb      	ldrb	r3, [r7, #15]
 8000528:	4907      	ldr	r1, [pc, #28]	; (8000548 <LL_TIM_OC_EnablePreload+0xa8>)
 800052a:	5ccb      	ldrb	r3, [r1, r3]
 800052c:	4619      	mov	r1, r3
 800052e:	2308      	movs	r3, #8
 8000530:	408b      	lsls	r3, r1
 8000532:	431a      	orrs	r2, r3
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	601a      	str	r2, [r3, #0]
}
 8000538:	bf00      	nop
 800053a:	3714      	adds	r7, #20
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	08003400 	.word	0x08003400
 8000548:	0800340c 	.word	0x0800340c

0800054c <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	689b      	ldr	r3, [r3, #8]
 800055a:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800055e:	f023 0307 	bic.w	r3, r3, #7
 8000562:	683a      	ldr	r2, [r7, #0]
 8000564:	431a      	orrs	r2, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	609a      	str	r2, [r3, #8]
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr

08000576 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC4REF
  *         @arg @ref LL_TIM_TRGO_ENCODERCLK
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000576:	b480      	push	{r7}
 8000578:	b083      	sub	sp, #12
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
 800057e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800058c:	683a      	ldr	r2, [r7, #0]
 800058e:	431a      	orrs	r2, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	605a      	str	r2, [r3, #4]
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <LL_TIM_SetTriggerOutput2>:
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_RISING
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	431a      	orrs	r2, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	605a      	str	r2, [r3, #4]
}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80005c6:	b480      	push	{r7}
 80005c8:	b083      	sub	sp, #12
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	689b      	ldr	r3, [r3, #8]
 80005d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	609a      	str	r2, [r3, #8]
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
	...

080005e8 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b087      	sub	sp, #28
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 80005f2:	4a18      	ldr	r2, [pc, #96]	; (8000654 <LL_SYSCFG_SetEXTISource+0x6c>)
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	f003 0303 	and.w	r3, r3, #3
 80005fa:	3302      	adds	r3, #2
 80005fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	0c1b      	lsrs	r3, r3, #16
 8000604:	43db      	mvns	r3, r3
 8000606:	ea02 0103 	and.w	r1, r2, r3
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	0c1b      	lsrs	r3, r3, #16
 800060e:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000610:	693b      	ldr	r3, [r7, #16]
 8000612:	fa93 f3a3 	rbit	r3, r3
 8000616:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d101      	bne.n	8000626 <LL_SYSCFG_SetEXTISource+0x3e>
  {
    return 32U;
 8000622:	2320      	movs	r3, #32
 8000624:	e003      	b.n	800062e <LL_SYSCFG_SetEXTISource+0x46>
  }
  return __builtin_clz(value);
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	fab3 f383 	clz	r3, r3
 800062c:	b2db      	uxtb	r3, r3
 800062e:	f003 031f 	and.w	r3, r3, #31
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	409a      	lsls	r2, r3
 8000636:	4807      	ldr	r0, [pc, #28]	; (8000654 <LL_SYSCFG_SetEXTISource+0x6c>)
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	f003 0303 	and.w	r3, r3, #3
 800063e:	430a      	orrs	r2, r1
 8000640:	3302      	adds	r3, #2
 8000642:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000646:	bf00      	nop
 8000648:	371c      	adds	r7, #28
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	40010000 	.word	0x40010000

08000658 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000658:	b480      	push	{r7}
 800065a:	b08b      	sub	sp, #44	; 0x2c
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	fa93 f3a3 	rbit	r3, r3
 8000672:	613b      	str	r3, [r7, #16]
  return result;
 8000674:	693b      	ldr	r3, [r7, #16]
 8000676:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000678:	69bb      	ldr	r3, [r7, #24]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d101      	bne.n	8000682 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800067e:	2320      	movs	r3, #32
 8000680:	e003      	b.n	800068a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000682:	69bb      	ldr	r3, [r7, #24]
 8000684:	fab3 f383 	clz	r3, r3
 8000688:	b2db      	uxtb	r3, r3
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	2103      	movs	r1, #3
 800068e:	fa01 f303 	lsl.w	r3, r1, r3
 8000692:	43db      	mvns	r3, r3
 8000694:	401a      	ands	r2, r3
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800069a:	6a3b      	ldr	r3, [r7, #32]
 800069c:	fa93 f3a3 	rbit	r3, r3
 80006a0:	61fb      	str	r3, [r7, #28]
  return result;
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80006a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d101      	bne.n	80006b0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80006ac:	2320      	movs	r3, #32
 80006ae:	e003      	b.n	80006b8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80006b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b2:	fab3 f383 	clz	r3, r3
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	005b      	lsls	r3, r3, #1
 80006ba:	6879      	ldr	r1, [r7, #4]
 80006bc:	fa01 f303 	lsl.w	r3, r1, r3
 80006c0:	431a      	orrs	r2, r3
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	601a      	str	r2, [r3, #0]
}
 80006c6:	bf00      	nop
 80006c8:	372c      	adds	r7, #44	; 0x2c
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80006d2:	b480      	push	{r7}
 80006d4:	b08b      	sub	sp, #44	; 0x2c
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	60f8      	str	r0, [r7, #12]
 80006da:	60b9      	str	r1, [r7, #8]
 80006dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	68da      	ldr	r2, [r3, #12]
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	fa93 f3a3 	rbit	r3, r3
 80006ec:	613b      	str	r3, [r7, #16]
  return result;
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80006f2:	69bb      	ldr	r3, [r7, #24]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d101      	bne.n	80006fc <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80006f8:	2320      	movs	r3, #32
 80006fa:	e003      	b.n	8000704 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80006fc:	69bb      	ldr	r3, [r7, #24]
 80006fe:	fab3 f383 	clz	r3, r3
 8000702:	b2db      	uxtb	r3, r3
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	2103      	movs	r1, #3
 8000708:	fa01 f303 	lsl.w	r3, r1, r3
 800070c:	43db      	mvns	r3, r3
 800070e:	401a      	ands	r2, r3
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000714:	6a3b      	ldr	r3, [r7, #32]
 8000716:	fa93 f3a3 	rbit	r3, r3
 800071a:	61fb      	str	r3, [r7, #28]
  return result;
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000722:	2b00      	cmp	r3, #0
 8000724:	d101      	bne.n	800072a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000726:	2320      	movs	r3, #32
 8000728:	e003      	b.n	8000732 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800072a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072c:	fab3 f383 	clz	r3, r3
 8000730:	b2db      	uxtb	r3, r3
 8000732:	005b      	lsls	r3, r3, #1
 8000734:	6879      	ldr	r1, [r7, #4]
 8000736:	fa01 f303 	lsl.w	r3, r1, r3
 800073a:	431a      	orrs	r2, r3
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	60da      	str	r2, [r3, #12]
}
 8000740:	bf00      	nop
 8000742:	372c      	adds	r7, #44	; 0x2c
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	683a      	ldr	r2, [r7, #0]
 800075a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000772:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000774:	4907      	ldr	r1, [pc, #28]	; (8000794 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4313      	orrs	r3, r2
 800077a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800077e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4013      	ands	r3, r2
 8000784:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000786:	68fb      	ldr	r3, [r7, #12]
}
 8000788:	bf00      	nop
 800078a:	3714      	adds	r7, #20
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	40021000 	.word	0x40021000

08000798 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80007a0:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80007a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80007a4:	4907      	ldr	r1, [pc, #28]	; (80007c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	4313      	orrs	r3, r2
 80007aa:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80007ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4013      	ands	r3, r2
 80007b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007b6:	68fb      	ldr	r3, [r7, #12]
}
 80007b8:	bf00      	nop
 80007ba:	3714      	adds	r7, #20
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	40021000 	.word	0x40021000

080007c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007cc:	f000 fb61 	bl	8000e92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d0:	f000 f809 	bl	80007e6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d4:	f000 fa4c 	bl	8000c70 <MX_GPIO_Init>
  MX_ADC1_Init();
 80007d8:	f000 f86a 	bl	80008b0 <MX_ADC1_Init>
  MX_ADC2_Init();
 80007dc:	f000 f912 	bl	8000a04 <MX_ADC2_Init>
  MX_TIM1_Init();
 80007e0:	f000 f99e 	bl	8000b20 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <main+0x1c>

080007e6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b0a4      	sub	sp, #144	; 0x90
 80007ea:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007f0:	2238      	movs	r2, #56	; 0x38
 80007f2:	2100      	movs	r1, #0
 80007f4:	4618      	mov	r0, r3
 80007f6:	f002 fdef 	bl	80033d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800080a:	463b      	mov	r3, r7
 800080c:	2244      	movs	r2, #68	; 0x44
 800080e:	2100      	movs	r1, #0
 8000810:	4618      	mov	r0, r3
 8000812:	f002 fde1 	bl	80033d8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000816:	2000      	movs	r0, #0
 8000818:	f000 fc90 	bl	800113c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800081c:	2301      	movs	r3, #1
 800081e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000820:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000824:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000826:	2302      	movs	r3, #2
 8000828:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800082a:	2303      	movs	r3, #3
 800082c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800082e:	2301      	movs	r3, #1
 8000830:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000832:	2314      	movs	r3, #20
 8000834:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000838:	2302      	movs	r3, #2
 800083a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800083e:	2302      	movs	r3, #2
 8000840:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000844:	2302      	movs	r3, #2
 8000846:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800084e:	4618      	mov	r0, r3
 8000850:	f000 fd28 	bl	80012a4 <HAL_RCC_OscConfig>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0x78>
  {
    Error_Handler();
 800085a:	f000 fa8b 	bl	8000d74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085e:	230f      	movs	r3, #15
 8000860:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000862:	2303      	movs	r3, #3
 8000864:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000872:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000876:	2104      	movs	r1, #4
 8000878:	4618      	mov	r0, r3
 800087a:	f001 f82b 	bl	80018d4 <HAL_RCC_ClockConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000884:	f000 fa76 	bl	8000d74 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000888:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800088c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800088e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000892:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000894:	463b      	mov	r3, r7
 8000896:	4618      	mov	r0, r3
 8000898:	f001 f9fc 	bl	8001c94 <HAL_RCCEx_PeriphCLKConfig>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008a2:	f000 fa67 	bl	8000d74 <Error_Handler>
  }
}
 80008a6:	bf00      	nop
 80008a8:	3790      	adds	r7, #144	; 0x90
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b094      	sub	sp, #80	; 0x50
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80008b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80008c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]
 80008d2:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80008d4:	f107 0318 	add.w	r3, r7, #24
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	463b      	mov	r3, r7
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
 80008f0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC12);
 80008f2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80008f6:	f7ff ff37 	bl	8000768 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80008fa:	2001      	movs	r0, #1
 80008fc:	f7ff ff34 	bl	8000768 <LL_AHB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA0   ------> ADC1_IN1
  */
  GPIO_InitStruct.Pin = POT_1_Pin;
 8000900:	2301      	movs	r3, #1
 8000902:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000904:	2303      	movs	r3, #3
 8000906:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000908:	2300      	movs	r3, #0
 800090a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(POT_1_GPIO_Port, &GPIO_InitStruct);
 800090c:	463b      	mov	r3, r7
 800090e:	4619      	mov	r1, r3
 8000910:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000914:	f001 fff8 	bl	8002908 <LL_GPIO_Init>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000918:	2300      	movs	r3, #0
 800091a:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800091c:	2300      	movs	r3, #0
 800091e:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000920:	2300      	movs	r3, #0
 8000922:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000924:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000928:	4619      	mov	r1, r3
 800092a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800092e:	f001 fc07 	bl	8002140 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000932:	2300      	movs	r3, #0
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000936:	2300      	movs	r3, #0
 8000938:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800093a:	2300      	movs	r3, #0
 800093c:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 800093e:	2300      	movs	r3, #0
 8000940:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000942:	2300      	movs	r3, #0
 8000944:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000946:	2300      	movs	r3, #0
 8000948:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 800094a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800094e:	4619      	mov	r1, r3
 8000950:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000954:	f001 fc1a 	bl	800218c <LL_ADC_REG_Init>
  LL_ADC_SetGainCompensation(ADC1, 0);
 8000958:	2100      	movs	r1, #0
 800095a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800095e:	f7ff fc5b 	bl	8000218 <LL_ADC_SetGainCompensation>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 8000962:	2100      	movs	r1, #0
 8000964:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000968:	f7ff fcf6 	bl	8000358 <LL_ADC_SetOverSamplingScope>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 800096c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000970:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8000972:	2300      	movs	r3, #0
 8000974:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8000976:	f107 0318 	add.w	r3, r7, #24
 800097a:	4619      	mov	r1, r3
 800097c:	481c      	ldr	r0, [pc, #112]	; (80009f0 <MX_ADC1_Init+0x140>)
 800097e:	f001 fb9f 	bl	80020c0 <LL_ADC_CommonInit>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 8000982:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000986:	f7ff fcfc 	bl	8000382 <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 800098a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800098e:	f7ff fd0a 	bl	80003a6 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000992:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <MX_ADC1_Init+0x144>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	099b      	lsrs	r3, r3, #6
 8000998:	4a17      	ldr	r2, [pc, #92]	; (80009f8 <MX_ADC1_Init+0x148>)
 800099a:	fba2 2303 	umull	r2, r3, r2, r3
 800099e:	099a      	lsrs	r2, r3, #6
 80009a0:	4613      	mov	r3, r2
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	4413      	add	r3, r2
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	461a      	mov	r2, r3
 80009aa:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_ADC1_Init+0x14c>)
 80009ac:	fba3 2302 	umull	r2, r3, r3, r2
 80009b0:	08db      	lsrs	r3, r3, #3
 80009b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 80009b4:	e002      	b.n	80009bc <MX_ADC1_Init+0x10c>
  {
    wait_loop_index--;
 80009b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009b8:	3b01      	subs	r3, #1
 80009ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  while(wait_loop_index != 0)
 80009bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d1f9      	bne.n	80009b6 <MX_ADC1_Init+0x106>
  }
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 80009c2:	4a0f      	ldr	r2, [pc, #60]	; (8000a00 <MX_ADC1_Init+0x150>)
 80009c4:	2106      	movs	r1, #6
 80009c6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80009ca:	f7ff fc4a 	bl	8000262 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80009ce:	2200      	movs	r2, #0
 80009d0:	490b      	ldr	r1, [pc, #44]	; (8000a00 <MX_ADC1_Init+0x150>)
 80009d2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80009d6:	f7ff fc70 	bl	80002ba <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SINGLE_ENDED);
 80009da:	227f      	movs	r2, #127	; 0x7f
 80009dc:	4908      	ldr	r1, [pc, #32]	; (8000a00 <MX_ADC1_Init+0x150>)
 80009de:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80009e2:	f7ff fc95 	bl	8000310 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	3750      	adds	r7, #80	; 0x50
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	50000300 	.word	0x50000300
 80009f4:	20000000 	.word	0x20000000
 80009f8:	053e2d63 	.word	0x053e2d63
 80009fc:	cccccccd 	.word	0xcccccccd
 8000a00:	04300002 	.word	0x04300002

08000a04 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b090      	sub	sp, #64	; 0x40
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000a0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000a16:	f107 0318 	add.w	r3, r7, #24
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
 8000a24:	611a      	str	r2, [r3, #16]
 8000a26:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	463b      	mov	r3, r7
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
 8000a34:	611a      	str	r2, [r3, #16]
 8000a36:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC12);
 8000a38:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a3c:	f7ff fe94 	bl	8000768 <LL_AHB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000a40:	2001      	movs	r0, #1
 8000a42:	f7ff fe91 	bl	8000768 <LL_AHB2_GRP1_EnableClock>
  /**ADC2 GPIO Configuration
  PA1   ------> ADC2_IN2
  */
  GPIO_InitStruct.Pin = POT_2_Pin;
 8000a46:	2302      	movs	r3, #2
 8000a48:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(POT_2_GPIO_Port, &GPIO_InitStruct);
 8000a52:	463b      	mov	r3, r7
 8000a54:	4619      	mov	r1, r3
 8000a56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5a:	f001 ff55 	bl	8002908 <LL_GPIO_Init>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000a62:	2300      	movs	r3, #0
 8000a64:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000a66:	2300      	movs	r3, #0
 8000a68:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8000a6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4826      	ldr	r0, [pc, #152]	; (8000b0c <MX_ADC2_Init+0x108>)
 8000a72:	f001 fb65 	bl	8002140 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8000a8e:	f107 0318 	add.w	r3, r7, #24
 8000a92:	4619      	mov	r1, r3
 8000a94:	481d      	ldr	r0, [pc, #116]	; (8000b0c <MX_ADC2_Init+0x108>)
 8000a96:	f001 fb79 	bl	800218c <LL_ADC_REG_Init>
  LL_ADC_SetGainCompensation(ADC2, 0);
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	481b      	ldr	r0, [pc, #108]	; (8000b0c <MX_ADC2_Init+0x108>)
 8000a9e:	f7ff fbbb 	bl	8000218 <LL_ADC_SetGainCompensation>
  LL_ADC_SetOverSamplingScope(ADC2, LL_ADC_OVS_DISABLE);
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4819      	ldr	r0, [pc, #100]	; (8000b0c <MX_ADC2_Init+0x108>)
 8000aa6:	f7ff fc57 	bl	8000358 <LL_ADC_SetOverSamplingScope>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC2);
 8000aaa:	4818      	ldr	r0, [pc, #96]	; (8000b0c <MX_ADC2_Init+0x108>)
 8000aac:	f7ff fc69 	bl	8000382 <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC2);
 8000ab0:	4816      	ldr	r0, [pc, #88]	; (8000b0c <MX_ADC2_Init+0x108>)
 8000ab2:	f7ff fc78 	bl	80003a6 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000ab6:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <MX_ADC2_Init+0x10c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	099b      	lsrs	r3, r3, #6
 8000abc:	4a15      	ldr	r2, [pc, #84]	; (8000b14 <MX_ADC2_Init+0x110>)
 8000abe:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac2:	099a      	lsrs	r2, r3, #6
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	4413      	add	r3, r2
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <MX_ADC2_Init+0x114>)
 8000ad0:	fba3 2302 	umull	r2, r3, r3, r2
 8000ad4:	08db      	lsrs	r3, r3, #3
 8000ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
  while(wait_loop_index != 0)
 8000ad8:	e002      	b.n	8000ae0 <MX_ADC2_Init+0xdc>
  {
    wait_loop_index--;
 8000ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000adc:	3b01      	subs	r3, #1
 8000ade:	63fb      	str	r3, [r7, #60]	; 0x3c
  while(wait_loop_index != 0)
 8000ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d1f9      	bne.n	8000ada <MX_ADC2_Init+0xd6>
  }
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_2);
 8000ae6:	4a0d      	ldr	r2, [pc, #52]	; (8000b1c <MX_ADC2_Init+0x118>)
 8000ae8:	2106      	movs	r1, #6
 8000aea:	4808      	ldr	r0, [pc, #32]	; (8000b0c <MX_ADC2_Init+0x108>)
 8000aec:	f7ff fbb9 	bl	8000262 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000af0:	2200      	movs	r2, #0
 8000af2:	490a      	ldr	r1, [pc, #40]	; (8000b1c <MX_ADC2_Init+0x118>)
 8000af4:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_ADC2_Init+0x108>)
 8000af6:	f7ff fbe0 	bl	80002ba <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_2, LL_ADC_SINGLE_ENDED);
 8000afa:	227f      	movs	r2, #127	; 0x7f
 8000afc:	4907      	ldr	r1, [pc, #28]	; (8000b1c <MX_ADC2_Init+0x118>)
 8000afe:	4803      	ldr	r0, [pc, #12]	; (8000b0c <MX_ADC2_Init+0x108>)
 8000b00:	f7ff fc06 	bl	8000310 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b04:	bf00      	nop
 8000b06:	3740      	adds	r7, #64	; 0x40
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	50000100 	.word	0x50000100
 8000b10:	20000000 	.word	0x20000000
 8000b14:	053e2d63 	.word	0x053e2d63
 8000b18:	cccccccd 	.word	0xcccccccd
 8000b1c:	08600004 	.word	0x08600004

08000b20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b0a0      	sub	sp, #128	; 0x80
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000b26:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000b36:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b3a:	2220      	movs	r2, #32
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f002 fc4a 	bl	80033d8 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8000b44:	f107 031c 	add.w	r3, r7, #28
 8000b48:	2230      	movs	r2, #48	; 0x30
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f002 fc43 	bl	80033d8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
 8000b60:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8000b62:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000b66:	f7ff fe17 	bl	8000798 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000b70:	2300      	movs	r3, #0
 8000b72:	673b      	str	r3, [r7, #112]	; 0x70
  TIM_InitStruct.Autoreload = 8000;
 8000b74:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8000b78:	677b      	str	r3, [r7, #116]	; 0x74
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	67bb      	str	r3, [r7, #120]	; 0x78
  TIM_InitStruct.RepetitionCounter = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	67fb      	str	r3, [r7, #124]	; 0x7c
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000b82:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b86:	4619      	mov	r1, r3
 8000b88:	4838      	ldr	r0, [pc, #224]	; (8000c6c <MX_TIM1_Init+0x14c>)
 8000b8a:	f001 ffbb 	bl	8002b04 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8000b8e:	4837      	ldr	r0, [pc, #220]	; (8000c6c <MX_TIM1_Init+0x14c>)
 8000b90:	f7ff fc1d 	bl	80003ce <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000b94:	2100      	movs	r1, #0
 8000b96:	4835      	ldr	r0, [pc, #212]	; (8000c6c <MX_TIM1_Init+0x14c>)
 8000b98:	f7ff fcd8 	bl	800054c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	4833      	ldr	r0, [pc, #204]	; (8000c6c <MX_TIM1_Init+0x14c>)
 8000ba0:	f7ff fc7e 	bl	80004a0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000ba4:	2360      	movs	r3, #96	; 0x60
 8000ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_OC_InitStruct.CompareValue = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	663b      	str	r3, [r7, #96]	; 0x60
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	667b      	str	r3, [r7, #100]	; 0x64
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	66bb      	str	r3, [r7, #104]	; 0x68
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000bc4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000bc8:	461a      	mov	r2, r3
 8000bca:	2101      	movs	r1, #1
 8000bcc:	4827      	ldr	r0, [pc, #156]	; (8000c6c <MX_TIM1_Init+0x14c>)
 8000bce:	f002 f823 	bl	8002c18 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	4825      	ldr	r0, [pc, #148]	; (8000c6c <MX_TIM1_Init+0x14c>)
 8000bd6:	f7ff fc0b 	bl	80003f0 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4823      	ldr	r0, [pc, #140]	; (8000c6c <MX_TIM1_Init+0x14c>)
 8000bde:	f7ff fcca 	bl	8000576 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 8000be2:	2100      	movs	r1, #0
 8000be4:	4821      	ldr	r0, [pc, #132]	; (8000c6c <MX_TIM1_Init+0x14c>)
 8000be6:	f7ff fcdb 	bl	80005a0 <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8000bea:	4820      	ldr	r0, [pc, #128]	; (8000c6c <MX_TIM1_Init+0x14c>)
 8000bec:	f7ff fceb 	bl	80005c6 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8000c06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_BDTRInitStruct.BreakAFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8000c10:	2300      	movs	r3, #0
 8000c12:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 8000c14:	2300      	movs	r3, #0
 8000c16:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 8000c18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_BDTRInitStruct.Break2AFMode = LL_TIM_BREAK_AFMODE_INPUT;
 8000c22:	2300      	movs	r3, #0
 8000c24:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	480e      	ldr	r0, [pc, #56]	; (8000c6c <MX_TIM1_Init+0x14c>)
 8000c32:	f002 f851 	bl	8002cd8 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000c36:	2001      	movs	r0, #1
 8000c38:	f7ff fd96 	bl	8000768 <LL_AHB2_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PA8   ------> TIM1_CH1
  */
  GPIO_InitStruct.Pin = SILNIK_PWM_Pin;
 8000c3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c42:	2302      	movs	r3, #2
 8000c44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8000c52:	2306      	movs	r3, #6
 8000c54:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(SILNIK_PWM_GPIO_Port, &GPIO_InitStruct);
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5e:	f001 fe53 	bl	8002908 <LL_GPIO_Init>

}
 8000c62:	bf00      	nop
 8000c64:	3780      	adds	r7, #128	; 0x80
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40012c00 	.word	0x40012c00

08000c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	; 0x28
 8000c74:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000c76:	f107 031c 	add.w	r3, r7, #28
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
 8000c90:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8000c92:	2020      	movs	r0, #32
 8000c94:	f7ff fd68 	bl	8000768 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f7ff fd65 	bl	8000768 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000c9e:	2002      	movs	r0, #2
 8000ca0:	f7ff fd62 	bl	8000768 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_EN_GPIO_Port, LED_EN_Pin);
 8000ca4:	2110      	movs	r1, #16
 8000ca6:	4832      	ldr	r0, [pc, #200]	; (8000d70 <MX_GPIO_Init+0x100>)
 8000ca8:	f7ff fd50 	bl	800074c <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE2);
 8000cac:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f7ff fc99 	bl	80005e8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE3);
 8000cb6:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f7ff fc94 	bl	80005e8 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8000cc0:	2304      	movs	r3, #4
 8000cc2:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000cd6:	f107 031c 	add.w	r3, r7, #28
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f001 fbd0 	bl	8002480 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8000ce0:	2308      	movs	r3, #8
 8000ce2:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000cea:	2300      	movs	r3, #0
 8000cec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000cf6:	f107 031c 	add.w	r3, r7, #28
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f001 fbc0 	bl	8002480 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(ENC_GPIO_Port, ENC_Pin, LL_GPIO_PULL_NO);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2104      	movs	r1, #4
 8000d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d08:	f7ff fce3 	bl	80006d2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_3, LL_GPIO_PULL_NO);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2108      	movs	r1, #8
 8000d10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d14:	f7ff fcdd 	bl	80006d2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(ENC_GPIO_Port, ENC_Pin, LL_GPIO_MODE_INPUT);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2104      	movs	r1, #4
 8000d1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d20:	f7ff fc9a 	bl	8000658 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_3, LL_GPIO_MODE_INPUT);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2108      	movs	r1, #8
 8000d28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d2c:	f7ff fc94 	bl	8000658 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = ON_OFF_Pin;
 8000d30:	2310      	movs	r3, #16
 8000d32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000d34:	2300      	movs	r3, #0
 8000d36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	4619      	mov	r1, r3
 8000d40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d44:	f001 fde0 	bl	8002908 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_EN_Pin;
 8000d48:	2310      	movs	r3, #16
 8000d4a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LED_EN_GPIO_Port, &GPIO_InitStruct);
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4803      	ldr	r0, [pc, #12]	; (8000d70 <MX_GPIO_Init+0x100>)
 8000d62:	f001 fdd1 	bl	8002908 <LL_GPIO_Init>

}
 8000d66:	bf00      	nop
 8000d68:	3728      	adds	r7, #40	; 0x28
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	48000400 	.word	0x48000400

08000d74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d78:	b672      	cpsid	i
}
 8000d7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <Error_Handler+0x8>
	...

08000d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d86:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <HAL_MspInit+0x44>)
 8000d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d8a:	4a0e      	ldr	r2, [pc, #56]	; (8000dc4 <HAL_MspInit+0x44>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6613      	str	r3, [r2, #96]	; 0x60
 8000d92:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <HAL_MspInit+0x44>)
 8000d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <HAL_MspInit+0x44>)
 8000da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da2:	4a08      	ldr	r2, [pc, #32]	; (8000dc4 <HAL_MspInit+0x44>)
 8000da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da8:	6593      	str	r3, [r2, #88]	; 0x58
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_MspInit+0x44>)
 8000dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000db6:	f000 fa65 	bl	8001284 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <NMI_Handler+0x4>

08000dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <HardFault_Handler+0x4>

08000dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <MemManage_Handler+0x4>

08000dda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dde:	e7fe      	b.n	8000dde <BusFault_Handler+0x4>

08000de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <UsageFault_Handler+0x4>

08000de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e14:	f000 f890 	bl	8000f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <SystemInit+0x20>)
 8000e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e26:	4a05      	ldr	r2, [pc, #20]	; (8000e3c <SystemInit+0x20>)
 8000e28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e40:	480d      	ldr	r0, [pc, #52]	; (8000e78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e42:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e44:	480d      	ldr	r0, [pc, #52]	; (8000e7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e46:	490e      	ldr	r1, [pc, #56]	; (8000e80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e48:	4a0e      	ldr	r2, [pc, #56]	; (8000e84 <LoopForever+0xe>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e4c:	e002      	b.n	8000e54 <LoopCopyDataInit>

08000e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e52:	3304      	adds	r3, #4

08000e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e58:	d3f9      	bcc.n	8000e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5a:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e5c:	4c0b      	ldr	r4, [pc, #44]	; (8000e8c <LoopForever+0x16>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e60:	e001      	b.n	8000e66 <LoopFillZerobss>

08000e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e64:	3204      	adds	r2, #4

08000e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e68:	d3fb      	bcc.n	8000e62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e6a:	f7ff ffd7 	bl	8000e1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e6e:	f002 fa8f 	bl	8003390 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e72:	f7ff fca9 	bl	80007c8 <main>

08000e76 <LoopForever>:

LoopForever:
    b LoopForever
 8000e76:	e7fe      	b.n	8000e76 <LoopForever>
  ldr   r0, =_estack
 8000e78:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e80:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e84:	08003430 	.word	0x08003430
  ldr r2, =_sbss
 8000e88:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e8c:	2000002c 	.word	0x2000002c

08000e90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e90:	e7fe      	b.n	8000e90 <ADC1_2_IRQHandler>

08000e92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	f000 f91b 	bl	80010d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ea2:	200f      	movs	r0, #15
 8000ea4:	f000 f80e 	bl	8000ec4 <HAL_InitTick>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d002      	beq.n	8000eb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	71fb      	strb	r3, [r7, #7]
 8000eb2:	e001      	b.n	8000eb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000eb4:	f7ff ff64 	bl	8000d80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eb8:	79fb      	ldrb	r3, [r7, #7]

}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ed0:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <HAL_InitTick+0x68>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d022      	beq.n	8000f1e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ed8:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <HAL_InitTick+0x6c>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <HAL_InitTick+0x68>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ee4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eec:	4618      	mov	r0, r3
 8000eee:	f000 f918 	bl	8001122 <HAL_SYSTICK_Config>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d10f      	bne.n	8000f18 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2b0f      	cmp	r3, #15
 8000efc:	d809      	bhi.n	8000f12 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efe:	2200      	movs	r2, #0
 8000f00:	6879      	ldr	r1, [r7, #4]
 8000f02:	f04f 30ff 	mov.w	r0, #4294967295
 8000f06:	f000 f8f2 	bl	80010ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <HAL_InitTick+0x70>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6013      	str	r3, [r2, #0]
 8000f10:	e007      	b.n	8000f22 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	73fb      	strb	r3, [r7, #15]
 8000f16:	e004      	b.n	8000f22 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	73fb      	strb	r3, [r7, #15]
 8000f1c:	e001      	b.n	8000f22 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000008 	.word	0x20000008
 8000f30:	20000000 	.word	0x20000000
 8000f34:	20000004 	.word	0x20000004

08000f38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <HAL_IncTick+0x1c>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <HAL_IncTick+0x20>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4413      	add	r3, r2
 8000f46:	4a03      	ldr	r2, [pc, #12]	; (8000f54 <HAL_IncTick+0x1c>)
 8000f48:	6013      	str	r3, [r2, #0]
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	20000028 	.word	0x20000028
 8000f58:	20000008 	.word	0x20000008

08000f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f60:	4b03      	ldr	r3, [pc, #12]	; (8000f70 <HAL_GetTick+0x14>)
 8000f62:	681b      	ldr	r3, [r3, #0]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000028 	.word	0x20000028

08000f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f90:	4013      	ands	r3, r2
 8000f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa6:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	60d3      	str	r3, [r2, #12]
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	0a1b      	lsrs	r3, r3, #8
 8000fc6:	f003 0307 	and.w	r3, r3, #7
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	db0a      	blt.n	8001002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	490c      	ldr	r1, [pc, #48]	; (8001024 <__NVIC_SetPriority+0x4c>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	0112      	lsls	r2, r2, #4
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001000:	e00a      	b.n	8001018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4908      	ldr	r1, [pc, #32]	; (8001028 <__NVIC_SetPriority+0x50>)
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	f003 030f 	and.w	r3, r3, #15
 800100e:	3b04      	subs	r3, #4
 8001010:	0112      	lsls	r2, r2, #4
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	440b      	add	r3, r1
 8001016:	761a      	strb	r2, [r3, #24]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000e100 	.word	0xe000e100
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800102c:	b480      	push	{r7}
 800102e:	b089      	sub	sp, #36	; 0x24
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f1c3 0307 	rsb	r3, r3, #7
 8001046:	2b04      	cmp	r3, #4
 8001048:	bf28      	it	cs
 800104a:	2304      	movcs	r3, #4
 800104c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3304      	adds	r3, #4
 8001052:	2b06      	cmp	r3, #6
 8001054:	d902      	bls.n	800105c <NVIC_EncodePriority+0x30>
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3b03      	subs	r3, #3
 800105a:	e000      	b.n	800105e <NVIC_EncodePriority+0x32>
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	f04f 32ff 	mov.w	r2, #4294967295
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43da      	mvns	r2, r3
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	401a      	ands	r2, r3
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001074:	f04f 31ff 	mov.w	r1, #4294967295
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	fa01 f303 	lsl.w	r3, r1, r3
 800107e:	43d9      	mvns	r1, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	4313      	orrs	r3, r2
         );
}
 8001086:	4618      	mov	r0, r3
 8001088:	3724      	adds	r7, #36	; 0x24
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a4:	d301      	bcc.n	80010aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010a6:	2301      	movs	r3, #1
 80010a8:	e00f      	b.n	80010ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010aa:	4a0a      	ldr	r2, [pc, #40]	; (80010d4 <SysTick_Config+0x40>)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b2:	210f      	movs	r1, #15
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295
 80010b8:	f7ff ff8e 	bl	8000fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <SysTick_Config+0x40>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c2:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <SysTick_Config+0x40>)
 80010c4:	2207      	movs	r2, #7
 80010c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	e000e010 	.word	0xe000e010

080010d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ff47 	bl	8000f74 <__NVIC_SetPriorityGrouping>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b086      	sub	sp, #24
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4603      	mov	r3, r0
 80010f6:	60b9      	str	r1, [r7, #8]
 80010f8:	607a      	str	r2, [r7, #4]
 80010fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010fc:	f7ff ff5e 	bl	8000fbc <__NVIC_GetPriorityGrouping>
 8001100:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	68b9      	ldr	r1, [r7, #8]
 8001106:	6978      	ldr	r0, [r7, #20]
 8001108:	f7ff ff90 	bl	800102c <NVIC_EncodePriority>
 800110c:	4602      	mov	r2, r0
 800110e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff5f 	bl	8000fd8 <__NVIC_SetPriority>
}
 800111a:	bf00      	nop
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ffb2 	bl	8001094 <SysTick_Config>
 8001130:	4603      	mov	r3, r0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d141      	bne.n	80011ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800114a:	4b4b      	ldr	r3, [pc, #300]	; (8001278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001156:	d131      	bne.n	80011bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001158:	4b47      	ldr	r3, [pc, #284]	; (8001278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800115a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800115e:	4a46      	ldr	r2, [pc, #280]	; (8001278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001160:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001164:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001168:	4b43      	ldr	r3, [pc, #268]	; (8001278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001170:	4a41      	ldr	r2, [pc, #260]	; (8001278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001172:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001176:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001178:	4b40      	ldr	r3, [pc, #256]	; (800127c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2232      	movs	r2, #50	; 0x32
 800117e:	fb02 f303 	mul.w	r3, r2, r3
 8001182:	4a3f      	ldr	r2, [pc, #252]	; (8001280 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001184:	fba2 2303 	umull	r2, r3, r2, r3
 8001188:	0c9b      	lsrs	r3, r3, #18
 800118a:	3301      	adds	r3, #1
 800118c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800118e:	e002      	b.n	8001196 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	3b01      	subs	r3, #1
 8001194:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001196:	4b38      	ldr	r3, [pc, #224]	; (8001278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800119e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011a2:	d102      	bne.n	80011aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1f2      	bne.n	8001190 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011aa:	4b33      	ldr	r3, [pc, #204]	; (8001278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011b6:	d158      	bne.n	800126a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e057      	b.n	800126c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011bc:	4b2e      	ldr	r3, [pc, #184]	; (8001278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011c2:	4a2d      	ldr	r2, [pc, #180]	; (8001278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80011cc:	e04d      	b.n	800126a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011d4:	d141      	bne.n	800125a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80011d6:	4b28      	ldr	r3, [pc, #160]	; (8001278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011e2:	d131      	bne.n	8001248 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011e4:	4b24      	ldr	r3, [pc, #144]	; (8001278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011ea:	4a23      	ldr	r2, [pc, #140]	; (8001278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011f4:	4b20      	ldr	r3, [pc, #128]	; (8001278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011fc:	4a1e      	ldr	r2, [pc, #120]	; (8001278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001202:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001204:	4b1d      	ldr	r3, [pc, #116]	; (800127c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2232      	movs	r2, #50	; 0x32
 800120a:	fb02 f303 	mul.w	r3, r2, r3
 800120e:	4a1c      	ldr	r2, [pc, #112]	; (8001280 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001210:	fba2 2303 	umull	r2, r3, r2, r3
 8001214:	0c9b      	lsrs	r3, r3, #18
 8001216:	3301      	adds	r3, #1
 8001218:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800121a:	e002      	b.n	8001222 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	3b01      	subs	r3, #1
 8001220:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001222:	4b15      	ldr	r3, [pc, #84]	; (8001278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800122a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800122e:	d102      	bne.n	8001236 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1f2      	bne.n	800121c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800123e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001242:	d112      	bne.n	800126a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e011      	b.n	800126c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001248:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800124a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800124e:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001254:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001258:	e007      	b.n	800126a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800125a:	4b07      	ldr	r3, [pc, #28]	; (8001278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001262:	4a05      	ldr	r2, [pc, #20]	; (8001278 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001264:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001268:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	40007000 	.word	0x40007000
 800127c:	20000000 	.word	0x20000000
 8001280:	431bde83 	.word	0x431bde83

08001284 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800128e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001292:	6093      	str	r3, [r2, #8]
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	40007000 	.word	0x40007000

080012a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b088      	sub	sp, #32
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e308      	b.n	80018c8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d075      	beq.n	80013ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012c2:	4ba3      	ldr	r3, [pc, #652]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 030c 	and.w	r3, r3, #12
 80012ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012cc:	4ba0      	ldr	r3, [pc, #640]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	2b0c      	cmp	r3, #12
 80012da:	d102      	bne.n	80012e2 <HAL_RCC_OscConfig+0x3e>
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d002      	beq.n	80012e8 <HAL_RCC_OscConfig+0x44>
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	2b08      	cmp	r3, #8
 80012e6:	d10b      	bne.n	8001300 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e8:	4b99      	ldr	r3, [pc, #612]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d05b      	beq.n	80013ac <HAL_RCC_OscConfig+0x108>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d157      	bne.n	80013ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e2e3      	b.n	80018c8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001308:	d106      	bne.n	8001318 <HAL_RCC_OscConfig+0x74>
 800130a:	4b91      	ldr	r3, [pc, #580]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a90      	ldr	r2, [pc, #576]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	e01d      	b.n	8001354 <HAL_RCC_OscConfig+0xb0>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001320:	d10c      	bne.n	800133c <HAL_RCC_OscConfig+0x98>
 8001322:	4b8b      	ldr	r3, [pc, #556]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a8a      	ldr	r2, [pc, #552]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001328:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	4b88      	ldr	r3, [pc, #544]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a87      	ldr	r2, [pc, #540]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	e00b      	b.n	8001354 <HAL_RCC_OscConfig+0xb0>
 800133c:	4b84      	ldr	r3, [pc, #528]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a83      	ldr	r2, [pc, #524]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	4b81      	ldr	r3, [pc, #516]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a80      	ldr	r2, [pc, #512]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 800134e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001352:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d013      	beq.n	8001384 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800135c:	f7ff fdfe 	bl	8000f5c <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001364:	f7ff fdfa 	bl	8000f5c <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b64      	cmp	r3, #100	; 0x64
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e2a8      	b.n	80018c8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001376:	4b76      	ldr	r3, [pc, #472]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0f0      	beq.n	8001364 <HAL_RCC_OscConfig+0xc0>
 8001382:	e014      	b.n	80013ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001384:	f7ff fdea 	bl	8000f5c <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800138c:	f7ff fde6 	bl	8000f5c <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b64      	cmp	r3, #100	; 0x64
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e294      	b.n	80018c8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800139e:	4b6c      	ldr	r3, [pc, #432]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f0      	bne.n	800138c <HAL_RCC_OscConfig+0xe8>
 80013aa:	e000      	b.n	80013ae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d075      	beq.n	80014a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013ba:	4b65      	ldr	r3, [pc, #404]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013c4:	4b62      	ldr	r3, [pc, #392]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	f003 0303 	and.w	r3, r3, #3
 80013cc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	2b0c      	cmp	r3, #12
 80013d2:	d102      	bne.n	80013da <HAL_RCC_OscConfig+0x136>
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d002      	beq.n	80013e0 <HAL_RCC_OscConfig+0x13c>
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	2b04      	cmp	r3, #4
 80013de:	d11f      	bne.n	8001420 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013e0:	4b5b      	ldr	r3, [pc, #364]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d005      	beq.n	80013f8 <HAL_RCC_OscConfig+0x154>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d101      	bne.n	80013f8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e267      	b.n	80018c8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f8:	4b55      	ldr	r3, [pc, #340]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	061b      	lsls	r3, r3, #24
 8001406:	4952      	ldr	r1, [pc, #328]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001408:	4313      	orrs	r3, r2
 800140a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800140c:	4b51      	ldr	r3, [pc, #324]	; (8001554 <HAL_RCC_OscConfig+0x2b0>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fd57 	bl	8000ec4 <HAL_InitTick>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d043      	beq.n	80014a4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e253      	b.n	80018c8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d023      	beq.n	8001470 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001428:	4b49      	ldr	r3, [pc, #292]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a48      	ldr	r2, [pc, #288]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 800142e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001432:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001434:	f7ff fd92 	bl	8000f5c <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800143c:	f7ff fd8e 	bl	8000f5c <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e23c      	b.n	80018c8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800144e:	4b40      	ldr	r3, [pc, #256]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145a:	4b3d      	ldr	r3, [pc, #244]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	061b      	lsls	r3, r3, #24
 8001468:	4939      	ldr	r1, [pc, #228]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 800146a:	4313      	orrs	r3, r2
 800146c:	604b      	str	r3, [r1, #4]
 800146e:	e01a      	b.n	80014a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001470:	4b37      	ldr	r3, [pc, #220]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a36      	ldr	r2, [pc, #216]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001476:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800147a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147c:	f7ff fd6e 	bl	8000f5c <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001484:	f7ff fd6a 	bl	8000f5c <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e218      	b.n	80018c8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001496:	4b2e      	ldr	r3, [pc, #184]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0x1e0>
 80014a2:	e000      	b.n	80014a6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d03c      	beq.n	800152c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d01c      	beq.n	80014f4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ba:	4b25      	ldr	r3, [pc, #148]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80014bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014c0:	4a23      	ldr	r2, [pc, #140]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ca:	f7ff fd47 	bl	8000f5c <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014d2:	f7ff fd43 	bl	8000f5c <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e1f1      	b.n	80018c8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014e4:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80014e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0ef      	beq.n	80014d2 <HAL_RCC_OscConfig+0x22e>
 80014f2:	e01b      	b.n	800152c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014f4:	4b16      	ldr	r3, [pc, #88]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80014f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014fa:	4a15      	ldr	r2, [pc, #84]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 80014fc:	f023 0301 	bic.w	r3, r3, #1
 8001500:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001504:	f7ff fd2a 	bl	8000f5c <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800150c:	f7ff fd26 	bl	8000f5c <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e1d4      	b.n	80018c8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001520:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1ef      	bne.n	800150c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b00      	cmp	r3, #0
 8001536:	f000 80ab 	beq.w	8001690 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800153a:	2300      	movs	r3, #0
 800153c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800153e:	4b04      	ldr	r3, [pc, #16]	; (8001550 <HAL_RCC_OscConfig+0x2ac>)
 8001540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d106      	bne.n	8001558 <HAL_RCC_OscConfig+0x2b4>
 800154a:	2301      	movs	r3, #1
 800154c:	e005      	b.n	800155a <HAL_RCC_OscConfig+0x2b6>
 800154e:	bf00      	nop
 8001550:	40021000 	.word	0x40021000
 8001554:	20000004 	.word	0x20000004
 8001558:	2300      	movs	r3, #0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d00d      	beq.n	800157a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	4baf      	ldr	r3, [pc, #700]	; (800181c <HAL_RCC_OscConfig+0x578>)
 8001560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001562:	4aae      	ldr	r2, [pc, #696]	; (800181c <HAL_RCC_OscConfig+0x578>)
 8001564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001568:	6593      	str	r3, [r2, #88]	; 0x58
 800156a:	4bac      	ldr	r3, [pc, #688]	; (800181c <HAL_RCC_OscConfig+0x578>)
 800156c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001576:	2301      	movs	r3, #1
 8001578:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800157a:	4ba9      	ldr	r3, [pc, #676]	; (8001820 <HAL_RCC_OscConfig+0x57c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001582:	2b00      	cmp	r3, #0
 8001584:	d118      	bne.n	80015b8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001586:	4ba6      	ldr	r3, [pc, #664]	; (8001820 <HAL_RCC_OscConfig+0x57c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4aa5      	ldr	r2, [pc, #660]	; (8001820 <HAL_RCC_OscConfig+0x57c>)
 800158c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001592:	f7ff fce3 	bl	8000f5c <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800159a:	f7ff fcdf 	bl	8000f5c <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e18d      	b.n	80018c8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015ac:	4b9c      	ldr	r3, [pc, #624]	; (8001820 <HAL_RCC_OscConfig+0x57c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0f0      	beq.n	800159a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d108      	bne.n	80015d2 <HAL_RCC_OscConfig+0x32e>
 80015c0:	4b96      	ldr	r3, [pc, #600]	; (800181c <HAL_RCC_OscConfig+0x578>)
 80015c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015c6:	4a95      	ldr	r2, [pc, #596]	; (800181c <HAL_RCC_OscConfig+0x578>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015d0:	e024      	b.n	800161c <HAL_RCC_OscConfig+0x378>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	2b05      	cmp	r3, #5
 80015d8:	d110      	bne.n	80015fc <HAL_RCC_OscConfig+0x358>
 80015da:	4b90      	ldr	r3, [pc, #576]	; (800181c <HAL_RCC_OscConfig+0x578>)
 80015dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015e0:	4a8e      	ldr	r2, [pc, #568]	; (800181c <HAL_RCC_OscConfig+0x578>)
 80015e2:	f043 0304 	orr.w	r3, r3, #4
 80015e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015ea:	4b8c      	ldr	r3, [pc, #560]	; (800181c <HAL_RCC_OscConfig+0x578>)
 80015ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015f0:	4a8a      	ldr	r2, [pc, #552]	; (800181c <HAL_RCC_OscConfig+0x578>)
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015fa:	e00f      	b.n	800161c <HAL_RCC_OscConfig+0x378>
 80015fc:	4b87      	ldr	r3, [pc, #540]	; (800181c <HAL_RCC_OscConfig+0x578>)
 80015fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001602:	4a86      	ldr	r2, [pc, #536]	; (800181c <HAL_RCC_OscConfig+0x578>)
 8001604:	f023 0301 	bic.w	r3, r3, #1
 8001608:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800160c:	4b83      	ldr	r3, [pc, #524]	; (800181c <HAL_RCC_OscConfig+0x578>)
 800160e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001612:	4a82      	ldr	r2, [pc, #520]	; (800181c <HAL_RCC_OscConfig+0x578>)
 8001614:	f023 0304 	bic.w	r3, r3, #4
 8001618:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d016      	beq.n	8001652 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001624:	f7ff fc9a 	bl	8000f5c <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800162a:	e00a      	b.n	8001642 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800162c:	f7ff fc96 	bl	8000f5c <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	f241 3288 	movw	r2, #5000	; 0x1388
 800163a:	4293      	cmp	r3, r2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e142      	b.n	80018c8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001642:	4b76      	ldr	r3, [pc, #472]	; (800181c <HAL_RCC_OscConfig+0x578>)
 8001644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0ed      	beq.n	800162c <HAL_RCC_OscConfig+0x388>
 8001650:	e015      	b.n	800167e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001652:	f7ff fc83 	bl	8000f5c <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001658:	e00a      	b.n	8001670 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800165a:	f7ff fc7f 	bl	8000f5c <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	f241 3288 	movw	r2, #5000	; 0x1388
 8001668:	4293      	cmp	r3, r2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e12b      	b.n	80018c8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001670:	4b6a      	ldr	r3, [pc, #424]	; (800181c <HAL_RCC_OscConfig+0x578>)
 8001672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1ed      	bne.n	800165a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800167e:	7ffb      	ldrb	r3, [r7, #31]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d105      	bne.n	8001690 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001684:	4b65      	ldr	r3, [pc, #404]	; (800181c <HAL_RCC_OscConfig+0x578>)
 8001686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001688:	4a64      	ldr	r2, [pc, #400]	; (800181c <HAL_RCC_OscConfig+0x578>)
 800168a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800168e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0320 	and.w	r3, r3, #32
 8001698:	2b00      	cmp	r3, #0
 800169a:	d03c      	beq.n	8001716 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d01c      	beq.n	80016de <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016a4:	4b5d      	ldr	r3, [pc, #372]	; (800181c <HAL_RCC_OscConfig+0x578>)
 80016a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016aa:	4a5c      	ldr	r2, [pc, #368]	; (800181c <HAL_RCC_OscConfig+0x578>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b4:	f7ff fc52 	bl	8000f5c <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016bc:	f7ff fc4e 	bl	8000f5c <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e0fc      	b.n	80018c8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016ce:	4b53      	ldr	r3, [pc, #332]	; (800181c <HAL_RCC_OscConfig+0x578>)
 80016d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0ef      	beq.n	80016bc <HAL_RCC_OscConfig+0x418>
 80016dc:	e01b      	b.n	8001716 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016de:	4b4f      	ldr	r3, [pc, #316]	; (800181c <HAL_RCC_OscConfig+0x578>)
 80016e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016e4:	4a4d      	ldr	r2, [pc, #308]	; (800181c <HAL_RCC_OscConfig+0x578>)
 80016e6:	f023 0301 	bic.w	r3, r3, #1
 80016ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ee:	f7ff fc35 	bl	8000f5c <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016f6:	f7ff fc31 	bl	8000f5c <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e0df      	b.n	80018c8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001708:	4b44      	ldr	r3, [pc, #272]	; (800181c <HAL_RCC_OscConfig+0x578>)
 800170a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1ef      	bne.n	80016f6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 80d3 	beq.w	80018c6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001720:	4b3e      	ldr	r3, [pc, #248]	; (800181c <HAL_RCC_OscConfig+0x578>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f003 030c 	and.w	r3, r3, #12
 8001728:	2b0c      	cmp	r3, #12
 800172a:	f000 808d 	beq.w	8001848 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	2b02      	cmp	r3, #2
 8001734:	d15a      	bne.n	80017ec <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001736:	4b39      	ldr	r3, [pc, #228]	; (800181c <HAL_RCC_OscConfig+0x578>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a38      	ldr	r2, [pc, #224]	; (800181c <HAL_RCC_OscConfig+0x578>)
 800173c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001742:	f7ff fc0b 	bl	8000f5c <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800174a:	f7ff fc07 	bl	8000f5c <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e0b5      	b.n	80018c8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800175c:	4b2f      	ldr	r3, [pc, #188]	; (800181c <HAL_RCC_OscConfig+0x578>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1f0      	bne.n	800174a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001768:	4b2c      	ldr	r3, [pc, #176]	; (800181c <HAL_RCC_OscConfig+0x578>)
 800176a:	68da      	ldr	r2, [r3, #12]
 800176c:	4b2d      	ldr	r3, [pc, #180]	; (8001824 <HAL_RCC_OscConfig+0x580>)
 800176e:	4013      	ands	r3, r2
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6a11      	ldr	r1, [r2, #32]
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001778:	3a01      	subs	r2, #1
 800177a:	0112      	lsls	r2, r2, #4
 800177c:	4311      	orrs	r1, r2
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001782:	0212      	lsls	r2, r2, #8
 8001784:	4311      	orrs	r1, r2
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800178a:	0852      	lsrs	r2, r2, #1
 800178c:	3a01      	subs	r2, #1
 800178e:	0552      	lsls	r2, r2, #21
 8001790:	4311      	orrs	r1, r2
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001796:	0852      	lsrs	r2, r2, #1
 8001798:	3a01      	subs	r2, #1
 800179a:	0652      	lsls	r2, r2, #25
 800179c:	4311      	orrs	r1, r2
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80017a2:	06d2      	lsls	r2, r2, #27
 80017a4:	430a      	orrs	r2, r1
 80017a6:	491d      	ldr	r1, [pc, #116]	; (800181c <HAL_RCC_OscConfig+0x578>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017ac:	4b1b      	ldr	r3, [pc, #108]	; (800181c <HAL_RCC_OscConfig+0x578>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a1a      	ldr	r2, [pc, #104]	; (800181c <HAL_RCC_OscConfig+0x578>)
 80017b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017b6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017b8:	4b18      	ldr	r3, [pc, #96]	; (800181c <HAL_RCC_OscConfig+0x578>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	4a17      	ldr	r2, [pc, #92]	; (800181c <HAL_RCC_OscConfig+0x578>)
 80017be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c4:	f7ff fbca 	bl	8000f5c <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017cc:	f7ff fbc6 	bl	8000f5c <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e074      	b.n	80018c8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017de:	4b0f      	ldr	r3, [pc, #60]	; (800181c <HAL_RCC_OscConfig+0x578>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f0      	beq.n	80017cc <HAL_RCC_OscConfig+0x528>
 80017ea:	e06c      	b.n	80018c6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ec:	4b0b      	ldr	r3, [pc, #44]	; (800181c <HAL_RCC_OscConfig+0x578>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a0a      	ldr	r2, [pc, #40]	; (800181c <HAL_RCC_OscConfig+0x578>)
 80017f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017f6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <HAL_RCC_OscConfig+0x578>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	4a07      	ldr	r2, [pc, #28]	; (800181c <HAL_RCC_OscConfig+0x578>)
 80017fe:	f023 0303 	bic.w	r3, r3, #3
 8001802:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <HAL_RCC_OscConfig+0x578>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	4a04      	ldr	r2, [pc, #16]	; (800181c <HAL_RCC_OscConfig+0x578>)
 800180a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800180e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001812:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001814:	f7ff fba2 	bl	8000f5c <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800181a:	e00e      	b.n	800183a <HAL_RCC_OscConfig+0x596>
 800181c:	40021000 	.word	0x40021000
 8001820:	40007000 	.word	0x40007000
 8001824:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001828:	f7ff fb98 	bl	8000f5c <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e046      	b.n	80018c8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800183a:	4b25      	ldr	r3, [pc, #148]	; (80018d0 <HAL_RCC_OscConfig+0x62c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f0      	bne.n	8001828 <HAL_RCC_OscConfig+0x584>
 8001846:	e03e      	b.n	80018c6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	69db      	ldr	r3, [r3, #28]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d101      	bne.n	8001854 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e039      	b.n	80018c8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001854:	4b1e      	ldr	r3, [pc, #120]	; (80018d0 <HAL_RCC_OscConfig+0x62c>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f003 0203 	and.w	r2, r3, #3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	429a      	cmp	r2, r3
 8001866:	d12c      	bne.n	80018c2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001872:	3b01      	subs	r3, #1
 8001874:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001876:	429a      	cmp	r2, r3
 8001878:	d123      	bne.n	80018c2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001884:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001886:	429a      	cmp	r2, r3
 8001888:	d11b      	bne.n	80018c2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001894:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001896:	429a      	cmp	r2, r3
 8001898:	d113      	bne.n	80018c2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a4:	085b      	lsrs	r3, r3, #1
 80018a6:	3b01      	subs	r3, #1
 80018a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d109      	bne.n	80018c2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b8:	085b      	lsrs	r3, r3, #1
 80018ba:	3b01      	subs	r3, #1
 80018bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018be:	429a      	cmp	r2, r3
 80018c0:	d001      	beq.n	80018c6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e000      	b.n	80018c8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3720      	adds	r7, #32
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40021000 	.word	0x40021000

080018d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e11e      	b.n	8001b2a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018ec:	4b91      	ldr	r3, [pc, #580]	; (8001b34 <HAL_RCC_ClockConfig+0x260>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 030f 	and.w	r3, r3, #15
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d910      	bls.n	800191c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fa:	4b8e      	ldr	r3, [pc, #568]	; (8001b34 <HAL_RCC_ClockConfig+0x260>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f023 020f 	bic.w	r2, r3, #15
 8001902:	498c      	ldr	r1, [pc, #560]	; (8001b34 <HAL_RCC_ClockConfig+0x260>)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	4313      	orrs	r3, r2
 8001908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800190a:	4b8a      	ldr	r3, [pc, #552]	; (8001b34 <HAL_RCC_ClockConfig+0x260>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	429a      	cmp	r2, r3
 8001916:	d001      	beq.n	800191c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e106      	b.n	8001b2a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b00      	cmp	r3, #0
 8001926:	d073      	beq.n	8001a10 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2b03      	cmp	r3, #3
 800192e:	d129      	bne.n	8001984 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001930:	4b81      	ldr	r3, [pc, #516]	; (8001b38 <HAL_RCC_ClockConfig+0x264>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e0f4      	b.n	8001b2a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001940:	f000 f964 	bl	8001c0c <RCC_GetSysClockFreqFromPLLSource>
 8001944:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	4a7c      	ldr	r2, [pc, #496]	; (8001b3c <HAL_RCC_ClockConfig+0x268>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d93f      	bls.n	80019ce <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800194e:	4b7a      	ldr	r3, [pc, #488]	; (8001b38 <HAL_RCC_ClockConfig+0x264>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d009      	beq.n	800196e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001962:	2b00      	cmp	r3, #0
 8001964:	d033      	beq.n	80019ce <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800196a:	2b00      	cmp	r3, #0
 800196c:	d12f      	bne.n	80019ce <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800196e:	4b72      	ldr	r3, [pc, #456]	; (8001b38 <HAL_RCC_ClockConfig+0x264>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001976:	4a70      	ldr	r2, [pc, #448]	; (8001b38 <HAL_RCC_ClockConfig+0x264>)
 8001978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800197c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800197e:	2380      	movs	r3, #128	; 0x80
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	e024      	b.n	80019ce <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b02      	cmp	r3, #2
 800198a:	d107      	bne.n	800199c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800198c:	4b6a      	ldr	r3, [pc, #424]	; (8001b38 <HAL_RCC_ClockConfig+0x264>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d109      	bne.n	80019ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e0c6      	b.n	8001b2a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800199c:	4b66      	ldr	r3, [pc, #408]	; (8001b38 <HAL_RCC_ClockConfig+0x264>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e0be      	b.n	8001b2a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80019ac:	f000 f8ce 	bl	8001b4c <HAL_RCC_GetSysClockFreq>
 80019b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	4a61      	ldr	r2, [pc, #388]	; (8001b3c <HAL_RCC_ClockConfig+0x268>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d909      	bls.n	80019ce <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80019ba:	4b5f      	ldr	r3, [pc, #380]	; (8001b38 <HAL_RCC_ClockConfig+0x264>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019c2:	4a5d      	ldr	r2, [pc, #372]	; (8001b38 <HAL_RCC_ClockConfig+0x264>)
 80019c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019c8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80019ca:	2380      	movs	r3, #128	; 0x80
 80019cc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019ce:	4b5a      	ldr	r3, [pc, #360]	; (8001b38 <HAL_RCC_ClockConfig+0x264>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f023 0203 	bic.w	r2, r3, #3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	4957      	ldr	r1, [pc, #348]	; (8001b38 <HAL_RCC_ClockConfig+0x264>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019e0:	f7ff fabc 	bl	8000f5c <HAL_GetTick>
 80019e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019e6:	e00a      	b.n	80019fe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019e8:	f7ff fab8 	bl	8000f5c <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e095      	b.n	8001b2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fe:	4b4e      	ldr	r3, [pc, #312]	; (8001b38 <HAL_RCC_ClockConfig+0x264>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f003 020c 	and.w	r2, r3, #12
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d1eb      	bne.n	80019e8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d023      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d005      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a28:	4b43      	ldr	r3, [pc, #268]	; (8001b38 <HAL_RCC_ClockConfig+0x264>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	4a42      	ldr	r2, [pc, #264]	; (8001b38 <HAL_RCC_ClockConfig+0x264>)
 8001a2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a32:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0308 	and.w	r3, r3, #8
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d007      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001a40:	4b3d      	ldr	r3, [pc, #244]	; (8001b38 <HAL_RCC_ClockConfig+0x264>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001a48:	4a3b      	ldr	r2, [pc, #236]	; (8001b38 <HAL_RCC_ClockConfig+0x264>)
 8001a4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a50:	4b39      	ldr	r3, [pc, #228]	; (8001b38 <HAL_RCC_ClockConfig+0x264>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	4936      	ldr	r1, [pc, #216]	; (8001b38 <HAL_RCC_ClockConfig+0x264>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	608b      	str	r3, [r1, #8]
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	2b80      	cmp	r3, #128	; 0x80
 8001a68:	d105      	bne.n	8001a76 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001a6a:	4b33      	ldr	r3, [pc, #204]	; (8001b38 <HAL_RCC_ClockConfig+0x264>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	4a32      	ldr	r2, [pc, #200]	; (8001b38 <HAL_RCC_ClockConfig+0x264>)
 8001a70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a74:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a76:	4b2f      	ldr	r3, [pc, #188]	; (8001b34 <HAL_RCC_ClockConfig+0x260>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d21d      	bcs.n	8001ac0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a84:	4b2b      	ldr	r3, [pc, #172]	; (8001b34 <HAL_RCC_ClockConfig+0x260>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f023 020f 	bic.w	r2, r3, #15
 8001a8c:	4929      	ldr	r1, [pc, #164]	; (8001b34 <HAL_RCC_ClockConfig+0x260>)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a94:	f7ff fa62 	bl	8000f5c <HAL_GetTick>
 8001a98:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9a:	e00a      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a9c:	f7ff fa5e 	bl	8000f5c <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e03b      	b.n	8001b2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab2:	4b20      	ldr	r3, [pc, #128]	; (8001b34 <HAL_RCC_ClockConfig+0x260>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d1ed      	bne.n	8001a9c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d008      	beq.n	8001ade <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001acc:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <HAL_RCC_ClockConfig+0x264>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	4917      	ldr	r1, [pc, #92]	; (8001b38 <HAL_RCC_ClockConfig+0x264>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d009      	beq.n	8001afe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aea:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <HAL_RCC_ClockConfig+0x264>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	490f      	ldr	r1, [pc, #60]	; (8001b38 <HAL_RCC_ClockConfig+0x264>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001afe:	f000 f825 	bl	8001b4c <HAL_RCC_GetSysClockFreq>
 8001b02:	4602      	mov	r2, r0
 8001b04:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <HAL_RCC_ClockConfig+0x264>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	091b      	lsrs	r3, r3, #4
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	490c      	ldr	r1, [pc, #48]	; (8001b40 <HAL_RCC_ClockConfig+0x26c>)
 8001b10:	5ccb      	ldrb	r3, [r1, r3]
 8001b12:	f003 031f 	and.w	r3, r3, #31
 8001b16:	fa22 f303 	lsr.w	r3, r2, r3
 8001b1a:	4a0a      	ldr	r2, [pc, #40]	; (8001b44 <HAL_RCC_ClockConfig+0x270>)
 8001b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b1e:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <HAL_RCC_ClockConfig+0x274>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff f9ce 	bl	8000ec4 <HAL_InitTick>
 8001b28:	4603      	mov	r3, r0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40022000 	.word	0x40022000
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	04c4b400 	.word	0x04c4b400
 8001b40:	08003418 	.word	0x08003418
 8001b44:	20000000 	.word	0x20000000
 8001b48:	20000004 	.word	0x20000004

08001b4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b087      	sub	sp, #28
 8001b50:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b52:	4b2c      	ldr	r3, [pc, #176]	; (8001c04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 030c 	and.w	r3, r3, #12
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	d102      	bne.n	8001b64 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b5e:	4b2a      	ldr	r3, [pc, #168]	; (8001c08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	e047      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001b64:	4b27      	ldr	r3, [pc, #156]	; (8001c04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 030c 	and.w	r3, r3, #12
 8001b6c:	2b08      	cmp	r3, #8
 8001b6e:	d102      	bne.n	8001b76 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b70:	4b25      	ldr	r3, [pc, #148]	; (8001c08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	e03e      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001b76:	4b23      	ldr	r3, [pc, #140]	; (8001c04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
 8001b7e:	2b0c      	cmp	r3, #12
 8001b80:	d136      	bne.n	8001bf0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b82:	4b20      	ldr	r3, [pc, #128]	; (8001c04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b8c:	4b1d      	ldr	r3, [pc, #116]	; (8001c04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	091b      	lsrs	r3, r3, #4
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	3301      	adds	r3, #1
 8001b98:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2b03      	cmp	r3, #3
 8001b9e:	d10c      	bne.n	8001bba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ba0:	4a19      	ldr	r2, [pc, #100]	; (8001c08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba8:	4a16      	ldr	r2, [pc, #88]	; (8001c04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001baa:	68d2      	ldr	r2, [r2, #12]
 8001bac:	0a12      	lsrs	r2, r2, #8
 8001bae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bb2:	fb02 f303 	mul.w	r3, r2, r3
 8001bb6:	617b      	str	r3, [r7, #20]
      break;
 8001bb8:	e00c      	b.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bba:	4a13      	ldr	r2, [pc, #76]	; (8001c08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc2:	4a10      	ldr	r2, [pc, #64]	; (8001c04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bc4:	68d2      	ldr	r2, [r2, #12]
 8001bc6:	0a12      	lsrs	r2, r2, #8
 8001bc8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bcc:	fb02 f303 	mul.w	r3, r2, r3
 8001bd0:	617b      	str	r3, [r7, #20]
      break;
 8001bd2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	0e5b      	lsrs	r3, r3, #25
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	3301      	adds	r3, #1
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	e001      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001bf4:	693b      	ldr	r3, [r7, #16]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	371c      	adds	r7, #28
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	40021000 	.word	0x40021000
 8001c08:	00f42400 	.word	0x00f42400

08001c0c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b087      	sub	sp, #28
 8001c10:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c12:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	091b      	lsrs	r3, r3, #4
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	3301      	adds	r3, #1
 8001c28:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	2b03      	cmp	r3, #3
 8001c2e:	d10c      	bne.n	8001c4a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c30:	4a17      	ldr	r2, [pc, #92]	; (8001c90 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c38:	4a14      	ldr	r2, [pc, #80]	; (8001c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c3a:	68d2      	ldr	r2, [r2, #12]
 8001c3c:	0a12      	lsrs	r2, r2, #8
 8001c3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c42:	fb02 f303 	mul.w	r3, r2, r3
 8001c46:	617b      	str	r3, [r7, #20]
    break;
 8001c48:	e00c      	b.n	8001c64 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c4a:	4a11      	ldr	r2, [pc, #68]	; (8001c90 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c52:	4a0e      	ldr	r2, [pc, #56]	; (8001c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c54:	68d2      	ldr	r2, [r2, #12]
 8001c56:	0a12      	lsrs	r2, r2, #8
 8001c58:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c5c:	fb02 f303 	mul.w	r3, r2, r3
 8001c60:	617b      	str	r3, [r7, #20]
    break;
 8001c62:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	0e5b      	lsrs	r3, r3, #25
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	3301      	adds	r3, #1
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001c7e:	687b      	ldr	r3, [r7, #4]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	371c      	adds	r7, #28
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	00f42400 	.word	0x00f42400

08001c94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 8098 	beq.w	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cb6:	4b43      	ldr	r3, [pc, #268]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10d      	bne.n	8001cde <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cc2:	4b40      	ldr	r3, [pc, #256]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc6:	4a3f      	ldr	r2, [pc, #252]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ccc:	6593      	str	r3, [r2, #88]	; 0x58
 8001cce:	4b3d      	ldr	r3, [pc, #244]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cde:	4b3a      	ldr	r3, [pc, #232]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a39      	ldr	r2, [pc, #228]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001cea:	f7ff f937 	bl	8000f5c <HAL_GetTick>
 8001cee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cf0:	e009      	b.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf2:	f7ff f933 	bl	8000f5c <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d902      	bls.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	74fb      	strb	r3, [r7, #19]
        break;
 8001d04:	e005      	b.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d06:	4b30      	ldr	r3, [pc, #192]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0ef      	beq.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001d12:	7cfb      	ldrb	r3, [r7, #19]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d159      	bne.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d18:	4b2a      	ldr	r3, [pc, #168]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d22:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d01e      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d019      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d34:	4b23      	ldr	r3, [pc, #140]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d40:	4b20      	ldr	r3, [pc, #128]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d46:	4a1f      	ldr	r2, [pc, #124]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d50:	4b1c      	ldr	r3, [pc, #112]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d56:	4a1b      	ldr	r2, [pc, #108]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d60:	4a18      	ldr	r2, [pc, #96]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d016      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d72:	f7ff f8f3 	bl	8000f5c <HAL_GetTick>
 8001d76:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d78:	e00b      	b.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d7a:	f7ff f8ef 	bl	8000f5c <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d902      	bls.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	74fb      	strb	r3, [r7, #19]
            break;
 8001d90:	e006      	b.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d92:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0ec      	beq.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001da0:	7cfb      	ldrb	r3, [r7, #19]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10b      	bne.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001da6:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	4903      	ldr	r1, [pc, #12]	; (8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001dbe:	7cfb      	ldrb	r3, [r7, #19]
 8001dc0:	74bb      	strb	r3, [r7, #18]
 8001dc2:	e005      	b.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001dcc:	7cfb      	ldrb	r3, [r7, #19]
 8001dce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dd0:	7c7b      	ldrb	r3, [r7, #17]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d105      	bne.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dd6:	4ba6      	ldr	r3, [pc, #664]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dda:	4aa5      	ldr	r2, [pc, #660]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ddc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001de0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00a      	beq.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001dee:	4ba0      	ldr	r3, [pc, #640]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001df4:	f023 0203 	bic.w	r2, r3, #3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	499c      	ldr	r1, [pc, #624]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d00a      	beq.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e10:	4b97      	ldr	r3, [pc, #604]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e16:	f023 020c 	bic.w	r2, r3, #12
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	4994      	ldr	r1, [pc, #592]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0304 	and.w	r3, r3, #4
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00a      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e32:	4b8f      	ldr	r3, [pc, #572]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e38:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	498b      	ldr	r1, [pc, #556]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0308 	and.w	r3, r3, #8
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00a      	beq.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e54:	4b86      	ldr	r3, [pc, #536]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	4983      	ldr	r1, [pc, #524]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0320 	and.w	r3, r3, #32
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00a      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e76:	4b7e      	ldr	r3, [pc, #504]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e7c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	497a      	ldr	r1, [pc, #488]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00a      	beq.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e98:	4b75      	ldr	r3, [pc, #468]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e9e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	4972      	ldr	r1, [pc, #456]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00a      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001eba:	4b6d      	ldr	r3, [pc, #436]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ec0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69db      	ldr	r3, [r3, #28]
 8001ec8:	4969      	ldr	r1, [pc, #420]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00a      	beq.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001edc:	4b64      	ldr	r3, [pc, #400]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	4961      	ldr	r1, [pc, #388]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00a      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001efe:	4b5c      	ldr	r3, [pc, #368]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	4958      	ldr	r1, [pc, #352]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d015      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f20:	4b53      	ldr	r3, [pc, #332]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2e:	4950      	ldr	r1, [pc, #320]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f3e:	d105      	bne.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f40:	4b4b      	ldr	r3, [pc, #300]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	4a4a      	ldr	r2, [pc, #296]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f4a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d015      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001f58:	4b45      	ldr	r3, [pc, #276]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f66:	4942      	ldr	r1, [pc, #264]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f76:	d105      	bne.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f78:	4b3d      	ldr	r3, [pc, #244]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	4a3c      	ldr	r2, [pc, #240]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f82:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d015      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001f90:	4b37      	ldr	r3, [pc, #220]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f96:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	4934      	ldr	r1, [pc, #208]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fae:	d105      	bne.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fb0:	4b2f      	ldr	r3, [pc, #188]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	4a2e      	ldr	r2, [pc, #184]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d015      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001fc8:	4b29      	ldr	r3, [pc, #164]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd6:	4926      	ldr	r1, [pc, #152]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fe6:	d105      	bne.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fe8:	4b21      	ldr	r3, [pc, #132]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	4a20      	ldr	r2, [pc, #128]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ff2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d015      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002000:	4b1b      	ldr	r3, [pc, #108]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002006:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200e:	4918      	ldr	r1, [pc, #96]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002010:	4313      	orrs	r3, r2
 8002012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800201e:	d105      	bne.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002020:	4b13      	ldr	r3, [pc, #76]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	4a12      	ldr	r2, [pc, #72]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002026:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800202a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d015      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002038:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800203a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800203e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002046:	490a      	ldr	r1, [pc, #40]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002048:	4313      	orrs	r3, r2
 800204a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002052:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002056:	d105      	bne.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002058:	4b05      	ldr	r3, [pc, #20]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	4a04      	ldr	r2, [pc, #16]	; (8002070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800205e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002062:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002064:	7cbb      	ldrb	r3, [r7, #18]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40021000 	.word	0x40021000

08002074 <LL_ADC_REG_SetSequencerLength>:
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	f023 020f 	bic.w	r2, r3, #15
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	431a      	orrs	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d101      	bne.n	80020b2 <LL_ADC_IsEnabled+0x18>
 80020ae:	2301      	movs	r3, #1
 80020b0:	e000      	b.n	80020b4 <LL_ADC_IsEnabled+0x1a>
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 80020c0:	b590      	push	{r4, r7, lr}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80020ca:	2300      	movs	r3, #0
 80020cc:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 80020ce:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80020d2:	f7ff ffe2 	bl	800209a <LL_ADC_IsEnabled>
 80020d6:	4604      	mov	r4, r0
 80020d8:	4817      	ldr	r0, [pc, #92]	; (8002138 <LL_ADC_CommonInit+0x78>)
 80020da:	f7ff ffde 	bl	800209a <LL_ADC_IsEnabled>
 80020de:	4603      	mov	r3, r0
 80020e0:	4323      	orrs	r3, r4
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d120      	bne.n	8002128 <LL_ADC_CommonInit+0x68>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d012      	beq.n	8002114 <LL_ADC_CommonInit+0x54>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	4b12      	ldr	r3, [pc, #72]	; (800213c <LL_ADC_CommonInit+0x7c>)
 80020f4:	4013      	ands	r3, r2
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	6811      	ldr	r1, [r2, #0]
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	6852      	ldr	r2, [r2, #4]
 80020fe:	4311      	orrs	r1, r2
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	6892      	ldr	r2, [r2, #8]
 8002104:	4311      	orrs	r1, r2
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	68d2      	ldr	r2, [r2, #12]
 800210a:	430a      	orrs	r2, r1
 800210c:	431a      	orrs	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	609a      	str	r2, [r3, #8]
 8002112:	e00b      	b.n	800212c <LL_ADC_CommonInit+0x6c>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	4b08      	ldr	r3, [pc, #32]	; (800213c <LL_ADC_CommonInit+0x7c>)
 800211a:	4013      	ands	r3, r2
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	6812      	ldr	r2, [r2, #0]
 8002120:	431a      	orrs	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	609a      	str	r2, [r3, #8]
 8002126:	e001      	b.n	800212c <LL_ADC_CommonInit+0x6c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800212c:	7bfb      	ldrb	r3, [r7, #15]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	bd90      	pop	{r4, r7, pc}
 8002136:	bf00      	nop
 8002138:	50000100 	.word	0x50000100
 800213c:	ffc030e0 	.word	0xffc030e0

08002140 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800214a:	2300      	movs	r3, #0
 800214c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff ffa3 	bl	800209a <LL_ADC_IsEnabled>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d111      	bne.n	800217e <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002162:	f023 0318 	bic.w	r3, r3, #24
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	6811      	ldr	r1, [r2, #0]
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	6852      	ldr	r2, [r2, #4]
 800216e:	4311      	orrs	r1, r2
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	6892      	ldr	r2, [r2, #8]
 8002174:	430a      	orrs	r2, r1
 8002176:	431a      	orrs	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	60da      	str	r2, [r3, #12]
 800217c:	e001      	b.n	8002182 <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002182:	7bfb      	ldrb	r3, [r7, #15]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002196:	2300      	movs	r3, #0
 8002198:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff ff7d 	bl	800209a <LL_ADC_IsEnabled>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d132      	bne.n	800220c <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d015      	beq.n	80021da <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	4b1a      	ldr	r3, [pc, #104]	; (800221c <LL_ADC_REG_Init+0x90>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	6811      	ldr	r1, [r2, #0]
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	6892      	ldr	r2, [r2, #8]
 80021be:	4311      	orrs	r1, r2
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	68d2      	ldr	r2, [r2, #12]
 80021c4:	4311      	orrs	r1, r2
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	6912      	ldr	r2, [r2, #16]
 80021ca:	4311      	orrs	r1, r2
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	6952      	ldr	r2, [r2, #20]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	60da      	str	r2, [r3, #12]
 80021d8:	e011      	b.n	80021fe <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	4b0f      	ldr	r3, [pc, #60]	; (800221c <LL_ADC_REG_Init+0x90>)
 80021e0:	4013      	ands	r3, r2
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	6811      	ldr	r1, [r2, #0]
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	68d2      	ldr	r2, [r2, #12]
 80021ea:	4311      	orrs	r1, r2
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	6912      	ldr	r2, [r2, #16]
 80021f0:	4311      	orrs	r1, r2
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	6952      	ldr	r2, [r2, #20]
 80021f6:	430a      	orrs	r2, r1
 80021f8:	431a      	orrs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	4619      	mov	r1, r3
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7ff ff35 	bl	8002074 <LL_ADC_REG_SetSequencerLength>
 800220a:	e001      	b.n	8002210 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002210:	7bfb      	ldrb	r3, [r7, #15]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	fff0c01c 	.word	0xfff0c01c

08002220 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002228:	4b05      	ldr	r3, [pc, #20]	; (8002240 <LL_EXTI_EnableIT_0_31+0x20>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	4904      	ldr	r1, [pc, #16]	; (8002240 <LL_EXTI_EnableIT_0_31+0x20>)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4313      	orrs	r3, r2
 8002232:	600b      	str	r3, [r1, #0]
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	40010400 	.word	0x40010400

08002244 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800224c:	4b05      	ldr	r3, [pc, #20]	; (8002264 <LL_EXTI_EnableIT_32_63+0x20>)
 800224e:	6a1a      	ldr	r2, [r3, #32]
 8002250:	4904      	ldr	r1, [pc, #16]	; (8002264 <LL_EXTI_EnableIT_32_63+0x20>)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4313      	orrs	r3, r2
 8002256:	620b      	str	r3, [r1, #32]
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	40010400 	.word	0x40010400

08002268 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002270:	4b06      	ldr	r3, [pc, #24]	; (800228c <LL_EXTI_DisableIT_0_31+0x24>)
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	43db      	mvns	r3, r3
 8002278:	4904      	ldr	r1, [pc, #16]	; (800228c <LL_EXTI_DisableIT_0_31+0x24>)
 800227a:	4013      	ands	r3, r2
 800227c:	600b      	str	r3, [r1, #0]
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	40010400 	.word	0x40010400

08002290 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002298:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <LL_EXTI_DisableIT_32_63+0x24>)
 800229a:	6a1a      	ldr	r2, [r3, #32]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	43db      	mvns	r3, r3
 80022a0:	4904      	ldr	r1, [pc, #16]	; (80022b4 <LL_EXTI_DisableIT_32_63+0x24>)
 80022a2:	4013      	ands	r3, r2
 80022a4:	620b      	str	r3, [r1, #32]
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	40010400 	.word	0x40010400

080022b8 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80022c0:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	4904      	ldr	r1, [pc, #16]	; (80022d8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	604b      	str	r3, [r1, #4]

}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	40010400 	.word	0x40010400

080022dc <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80022e4:	4b05      	ldr	r3, [pc, #20]	; (80022fc <LL_EXTI_EnableEvent_32_63+0x20>)
 80022e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022e8:	4904      	ldr	r1, [pc, #16]	; (80022fc <LL_EXTI_EnableEvent_32_63+0x20>)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	624b      	str	r3, [r1, #36]	; 0x24
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	40010400 	.word	0x40010400

08002300 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <LL_EXTI_DisableEvent_0_31+0x24>)
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	43db      	mvns	r3, r3
 8002310:	4904      	ldr	r1, [pc, #16]	; (8002324 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002312:	4013      	ands	r3, r2
 8002314:	604b      	str	r3, [r1, #4]
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40010400 	.word	0x40010400

08002328 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <LL_EXTI_DisableEvent_32_63+0x24>)
 8002332:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	43db      	mvns	r3, r3
 8002338:	4904      	ldr	r1, [pc, #16]	; (800234c <LL_EXTI_DisableEvent_32_63+0x24>)
 800233a:	4013      	ands	r3, r2
 800233c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	40010400 	.word	0x40010400

08002350 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002358:	4b05      	ldr	r3, [pc, #20]	; (8002370 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	4904      	ldr	r1, [pc, #16]	; (8002370 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4313      	orrs	r3, r2
 8002362:	608b      	str	r3, [r1, #8]

}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	40010400 	.word	0x40010400

08002374 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800237e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002380:	4904      	ldr	r1, [pc, #16]	; (8002394 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4313      	orrs	r3, r2
 8002386:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	40010400 	.word	0x40010400

08002398 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	43db      	mvns	r3, r3
 80023a8:	4904      	ldr	r1, [pc, #16]	; (80023bc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	608b      	str	r3, [r1, #8]

}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	40010400 	.word	0x40010400

080023c0 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80023c8:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80023ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	43db      	mvns	r3, r3
 80023d0:	4904      	ldr	r1, [pc, #16]	; (80023e4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80023d2:	4013      	ands	r3, r2
 80023d4:	628b      	str	r3, [r1, #40]	; 0x28
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	40010400 	.word	0x40010400

080023e8 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80023f0:	4b05      	ldr	r3, [pc, #20]	; (8002408 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80023f2:	68da      	ldr	r2, [r3, #12]
 80023f4:	4904      	ldr	r1, [pc, #16]	; (8002408 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	60cb      	str	r3, [r1, #12]
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	40010400 	.word	0x40010400

0800240c <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8002414:	4b05      	ldr	r3, [pc, #20]	; (800242c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002418:	4904      	ldr	r1, [pc, #16]	; (800242c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4313      	orrs	r3, r2
 800241e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	40010400 	.word	0x40010400

08002430 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8002438:	4b06      	ldr	r3, [pc, #24]	; (8002454 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800243a:	68da      	ldr	r2, [r3, #12]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	43db      	mvns	r3, r3
 8002440:	4904      	ldr	r1, [pc, #16]	; (8002454 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002442:	4013      	ands	r3, r2
 8002444:	60cb      	str	r3, [r1, #12]
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40010400 	.word	0x40010400

08002458 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8002460:	4b06      	ldr	r3, [pc, #24]	; (800247c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	43db      	mvns	r3, r3
 8002468:	4904      	ldr	r1, [pc, #16]	; (800247c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800246a:	4013      	ands	r3, r2
 800246c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	40010400 	.word	0x40010400

08002480 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8002488:	2300      	movs	r3, #0
 800248a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	7a1b      	ldrb	r3, [r3, #8]
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 80d3 	beq.w	800263c <LL_EXTI_Init+0x1bc>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d063      	beq.n	8002566 <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	7a5b      	ldrb	r3, [r3, #9]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d01c      	beq.n	80024e0 <LL_EXTI_Init+0x60>
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	dc25      	bgt.n	80024f6 <LL_EXTI_Init+0x76>
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d002      	beq.n	80024b4 <LL_EXTI_Init+0x34>
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d00b      	beq.n	80024ca <LL_EXTI_Init+0x4a>
 80024b2:	e020      	b.n	80024f6 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ff21 	bl	8002300 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff feac 	bl	8002220 <LL_EXTI_EnableIT_0_31>
          break;
 80024c8:	e018      	b.n	80024fc <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff feca 	bl	8002268 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff feed 	bl	80022b8 <LL_EXTI_EnableEvent_0_31>
          break;
 80024de:	e00d      	b.n	80024fc <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff fe9b 	bl	8002220 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff fee2 	bl	80022b8 <LL_EXTI_EnableEvent_0_31>
          break;
 80024f4:	e002      	b.n	80024fc <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 80024f6:	2301      	movs	r3, #1
 80024f8:	60fb      	str	r3, [r7, #12]
          break;
 80024fa:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	7a9b      	ldrb	r3, [r3, #10]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d030      	beq.n	8002566 <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	7a9b      	ldrb	r3, [r3, #10]
 8002508:	2b03      	cmp	r3, #3
 800250a:	d01c      	beq.n	8002546 <LL_EXTI_Init+0xc6>
 800250c:	2b03      	cmp	r3, #3
 800250e:	dc25      	bgt.n	800255c <LL_EXTI_Init+0xdc>
 8002510:	2b01      	cmp	r3, #1
 8002512:	d002      	beq.n	800251a <LL_EXTI_Init+0x9a>
 8002514:	2b02      	cmp	r3, #2
 8002516:	d00b      	beq.n	8002530 <LL_EXTI_Init+0xb0>
 8002518:	e020      	b.n	800255c <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff ff86 	bl	8002430 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ff11 	bl	8002350 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800252e:	e01b      	b.n	8002568 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff ff2f 	bl	8002398 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff ff52 	bl	80023e8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002544:	e010      	b.n	8002568 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff ff00 	bl	8002350 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff ff47 	bl	80023e8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800255a:	e005      	b.n	8002568 <LL_EXTI_Init+0xe8>
          default:
            status |= 0x02u;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f043 0302 	orr.w	r3, r3, #2
 8002562:	60fb      	str	r3, [r7, #12]
            break;
 8002564:	e000      	b.n	8002568 <LL_EXTI_Init+0xe8>
        }
      }
 8002566:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d07a      	beq.n	8002666 <LL_EXTI_Init+0x1e6>
    {
      switch (EXTI_InitStruct->Mode)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	7a5b      	ldrb	r3, [r3, #9]
 8002574:	2b02      	cmp	r3, #2
 8002576:	d01c      	beq.n	80025b2 <LL_EXTI_Init+0x132>
 8002578:	2b02      	cmp	r3, #2
 800257a:	dc25      	bgt.n	80025c8 <LL_EXTI_Init+0x148>
 800257c:	2b00      	cmp	r3, #0
 800257e:	d002      	beq.n	8002586 <LL_EXTI_Init+0x106>
 8002580:	2b01      	cmp	r3, #1
 8002582:	d00b      	beq.n	800259c <LL_EXTI_Init+0x11c>
 8002584:	e020      	b.n	80025c8 <LL_EXTI_Init+0x148>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff fecc 	bl	8002328 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff fe55 	bl	8002244 <LL_EXTI_EnableIT_32_63>
          break;
 800259a:	e01a      	b.n	80025d2 <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff fe75 	bl	8002290 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff fe96 	bl	80022dc <LL_EXTI_EnableEvent_32_63>
          break;
 80025b0:	e00f      	b.n	80025d2 <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff fe44 	bl	8002244 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fe8b 	bl	80022dc <LL_EXTI_EnableEvent_32_63>
          break;
 80025c6:	e004      	b.n	80025d2 <LL_EXTI_Init+0x152>
        default:
          status |= 0x04u;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f043 0304 	orr.w	r3, r3, #4
 80025ce:	60fb      	str	r3, [r7, #12]
          break;
 80025d0:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	7a9b      	ldrb	r3, [r3, #10]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d045      	beq.n	8002666 <LL_EXTI_Init+0x1e6>
      {
        switch (EXTI_InitStruct->Trigger)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	7a9b      	ldrb	r3, [r3, #10]
 80025de:	2b03      	cmp	r3, #3
 80025e0:	d01c      	beq.n	800261c <LL_EXTI_Init+0x19c>
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	dc25      	bgt.n	8002632 <LL_EXTI_Init+0x1b2>
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d002      	beq.n	80025f0 <LL_EXTI_Init+0x170>
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d00b      	beq.n	8002606 <LL_EXTI_Init+0x186>
 80025ee:	e020      	b.n	8002632 <LL_EXTI_Init+0x1b2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff ff2f 	bl	8002458 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff feb8 	bl	8002374 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8002604:	e030      	b.n	8002668 <LL_EXTI_Init+0x1e8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff fed8 	bl	80023c0 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff fef9 	bl	800240c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800261a:	e025      	b.n	8002668 <LL_EXTI_Init+0x1e8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff fea7 	bl	8002374 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff feee 	bl	800240c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8002630:	e01a      	b.n	8002668 <LL_EXTI_Init+0x1e8>
          default:
            status |= 0x05u;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f043 0305 	orr.w	r3, r3, #5
 8002638:	60fb      	str	r3, [r7, #12]
            break;
 800263a:	e015      	b.n	8002668 <LL_EXTI_Init+0x1e8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff fe11 	bl	8002268 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff fe58 	bl	8002300 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff fe1b 	bl	8002290 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff fe62 	bl	8002328 <LL_EXTI_DisableEvent_32_63>
 8002664:	e000      	b.n	8002668 <LL_EXTI_Init+0x1e8>
      }
 8002666:	bf00      	nop
  }

  return status;
 8002668:	68fb      	ldr	r3, [r7, #12]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <LL_GPIO_SetPinMode>:
{
 8002672:	b480      	push	{r7}
 8002674:	b08b      	sub	sp, #44	; 0x2c
 8002676:	af00      	add	r7, sp, #0
 8002678:	60f8      	str	r0, [r7, #12]
 800267a:	60b9      	str	r1, [r7, #8]
 800267c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	fa93 f3a3 	rbit	r3, r3
 800268c:	613b      	str	r3, [r7, #16]
  return result;
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8002698:	2320      	movs	r3, #32
 800269a:	e003      	b.n	80026a4 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	fab3 f383 	clz	r3, r3
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	2103      	movs	r1, #3
 80026a8:	fa01 f303 	lsl.w	r3, r1, r3
 80026ac:	43db      	mvns	r3, r3
 80026ae:	401a      	ands	r2, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b4:	6a3b      	ldr	r3, [r7, #32]
 80026b6:	fa93 f3a3 	rbit	r3, r3
 80026ba:	61fb      	str	r3, [r7, #28]
  return result;
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80026c6:	2320      	movs	r3, #32
 80026c8:	e003      	b.n	80026d2 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	fab3 f383 	clz	r3, r3
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	fa01 f303 	lsl.w	r3, r1, r3
 80026da:	431a      	orrs	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	601a      	str	r2, [r3, #0]
}
 80026e0:	bf00      	nop
 80026e2:	372c      	adds	r7, #44	; 0x2c
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <LL_GPIO_SetPinOutputType>:
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	43db      	mvns	r3, r3
 8002700:	401a      	ands	r2, r3
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	fb01 f303 	mul.w	r3, r1, r3
 800270a:	431a      	orrs	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	605a      	str	r2, [r3, #4]
}
 8002710:	bf00      	nop
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <LL_GPIO_SetPinSpeed>:
{
 800271c:	b480      	push	{r7}
 800271e:	b08b      	sub	sp, #44	; 0x2c
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	fa93 f3a3 	rbit	r3, r3
 8002736:	613b      	str	r3, [r7, #16]
  return result;
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002742:	2320      	movs	r3, #32
 8002744:	e003      	b.n	800274e <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	fab3 f383 	clz	r3, r3
 800274c:	b2db      	uxtb	r3, r3
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	2103      	movs	r1, #3
 8002752:	fa01 f303 	lsl.w	r3, r1, r3
 8002756:	43db      	mvns	r3, r3
 8002758:	401a      	ands	r2, r3
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	fa93 f3a3 	rbit	r3, r3
 8002764:	61fb      	str	r3, [r7, #28]
  return result;
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002770:	2320      	movs	r3, #32
 8002772:	e003      	b.n	800277c <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	fab3 f383 	clz	r3, r3
 800277a:	b2db      	uxtb	r3, r3
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	fa01 f303 	lsl.w	r3, r1, r3
 8002784:	431a      	orrs	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	609a      	str	r2, [r3, #8]
}
 800278a:	bf00      	nop
 800278c:	372c      	adds	r7, #44	; 0x2c
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <LL_GPIO_SetPinPull>:
{
 8002796:	b480      	push	{r7}
 8002798:	b08b      	sub	sp, #44	; 0x2c
 800279a:	af00      	add	r7, sp, #0
 800279c:	60f8      	str	r0, [r7, #12]
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	68da      	ldr	r2, [r3, #12]
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	fa93 f3a3 	rbit	r3, r3
 80027b0:	613b      	str	r3, [r7, #16]
  return result;
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80027bc:	2320      	movs	r3, #32
 80027be:	e003      	b.n	80027c8 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	fab3 f383 	clz	r3, r3
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	2103      	movs	r1, #3
 80027cc:	fa01 f303 	lsl.w	r3, r1, r3
 80027d0:	43db      	mvns	r3, r3
 80027d2:	401a      	ands	r2, r3
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d8:	6a3b      	ldr	r3, [r7, #32]
 80027da:	fa93 f3a3 	rbit	r3, r3
 80027de:	61fb      	str	r3, [r7, #28]
  return result;
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80027ea:	2320      	movs	r3, #32
 80027ec:	e003      	b.n	80027f6 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	fab3 f383 	clz	r3, r3
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	fa01 f303 	lsl.w	r3, r1, r3
 80027fe:	431a      	orrs	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	60da      	str	r2, [r3, #12]
}
 8002804:	bf00      	nop
 8002806:	372c      	adds	r7, #44	; 0x2c
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <LL_GPIO_SetAFPin_0_7>:
{
 8002810:	b480      	push	{r7}
 8002812:	b08b      	sub	sp, #44	; 0x2c
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6a1a      	ldr	r2, [r3, #32]
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	fa93 f3a3 	rbit	r3, r3
 800282a:	613b      	str	r3, [r7, #16]
  return result;
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002836:	2320      	movs	r3, #32
 8002838:	e003      	b.n	8002842 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	fab3 f383 	clz	r3, r3
 8002840:	b2db      	uxtb	r3, r3
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	210f      	movs	r1, #15
 8002846:	fa01 f303 	lsl.w	r3, r1, r3
 800284a:	43db      	mvns	r3, r3
 800284c:	401a      	ands	r2, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	fa93 f3a3 	rbit	r3, r3
 8002858:	61fb      	str	r3, [r7, #28]
  return result;
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002864:	2320      	movs	r3, #32
 8002866:	e003      	b.n	8002870 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	fab3 f383 	clz	r3, r3
 800286e:	b2db      	uxtb	r3, r3
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	fa01 f303 	lsl.w	r3, r1, r3
 8002878:	431a      	orrs	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	621a      	str	r2, [r3, #32]
}
 800287e:	bf00      	nop
 8002880:	372c      	adds	r7, #44	; 0x2c
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <LL_GPIO_SetAFPin_8_15>:
{
 800288a:	b480      	push	{r7}
 800288c:	b08b      	sub	sp, #44	; 0x2c
 800288e:	af00      	add	r7, sp, #0
 8002890:	60f8      	str	r0, [r7, #12]
 8002892:	60b9      	str	r1, [r7, #8]
 8002894:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	0a1b      	lsrs	r3, r3, #8
 800289e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	fa93 f3a3 	rbit	r3, r3
 80028a6:	613b      	str	r3, [r7, #16]
  return result;
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80028b2:	2320      	movs	r3, #32
 80028b4:	e003      	b.n	80028be <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	fab3 f383 	clz	r3, r3
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	210f      	movs	r1, #15
 80028c2:	fa01 f303 	lsl.w	r3, r1, r3
 80028c6:	43db      	mvns	r3, r3
 80028c8:	401a      	ands	r2, r3
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	0a1b      	lsrs	r3, r3, #8
 80028ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d0:	6a3b      	ldr	r3, [r7, #32]
 80028d2:	fa93 f3a3 	rbit	r3, r3
 80028d6:	61fb      	str	r3, [r7, #28]
  return result;
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80028e2:	2320      	movs	r3, #32
 80028e4:	e003      	b.n	80028ee <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	fab3 f383 	clz	r3, r3
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	6879      	ldr	r1, [r7, #4]
 80028f2:	fa01 f303 	lsl.w	r3, r1, r3
 80028f6:	431a      	orrs	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	625a      	str	r2, [r3, #36]	; 0x24
}
 80028fc:	bf00      	nop
 80028fe:	372c      	adds	r7, #44	; 0x2c
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b088      	sub	sp, #32
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	fa93 f3a3 	rbit	r3, r3
 800291e:	60fb      	str	r3, [r7, #12]
  return result;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <LL_GPIO_Init+0x26>
    return 32U;
 800292a:	2320      	movs	r3, #32
 800292c:	e003      	b.n	8002936 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	fab3 f383 	clz	r3, r3
 8002934:	b2db      	uxtb	r3, r3
 8002936:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002938:	e048      	b.n	80029cc <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	2101      	movs	r1, #1
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	fa01 f303 	lsl.w	r3, r1, r3
 8002946:	4013      	ands	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d03a      	beq.n	80029c6 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d003      	beq.n	8002960 <LL_GPIO_Init+0x58>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b02      	cmp	r3, #2
 800295e:	d10e      	bne.n	800297e <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	461a      	mov	r2, r3
 8002966:	69b9      	ldr	r1, [r7, #24]
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7ff fed7 	bl	800271c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	6819      	ldr	r1, [r3, #0]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	461a      	mov	r2, r3
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f7ff feb7 	bl	80026ec <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	461a      	mov	r2, r3
 8002984:	69b9      	ldr	r1, [r7, #24]
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7ff ff05 	bl	8002796 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	2b02      	cmp	r3, #2
 8002992:	d111      	bne.n	80029b8 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	2bff      	cmp	r3, #255	; 0xff
 8002998:	d807      	bhi.n	80029aa <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	461a      	mov	r2, r3
 80029a0:	69b9      	ldr	r1, [r7, #24]
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff ff34 	bl	8002810 <LL_GPIO_SetAFPin_0_7>
 80029a8:	e006      	b.n	80029b8 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	461a      	mov	r2, r3
 80029b0:	69b9      	ldr	r1, [r7, #24]
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7ff ff69 	bl	800288a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	461a      	mov	r2, r3
 80029be:	69b9      	ldr	r1, [r7, #24]
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff fe56 	bl	8002672 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	3301      	adds	r3, #1
 80029ca:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	fa22 f303 	lsr.w	r3, r2, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1af      	bne.n	800293a <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3720      	adds	r7, #32
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <LL_TIM_SetPrescaler>:
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <LL_TIM_SetAutoReload>:
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <LL_TIM_SetRepetitionCounter>:
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <LL_TIM_OC_SetCompareCH1>:
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <LL_TIM_OC_SetCompareCH2>:
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <LL_TIM_OC_SetCompareCH3>:
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <LL_TIM_OC_SetCompareCH4>:
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <LL_TIM_OC_SetCompareCH5>:
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	649a      	str	r2, [r3, #72]	; 0x48
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <LL_TIM_OC_SetCompareCH6>:
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	f043 0201 	orr.w	r2, r3, #1
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	615a      	str	r2, [r3, #20]
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a39      	ldr	r2, [pc, #228]	; (8002bfc <LL_TIM_Init+0xf8>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d00f      	beq.n	8002b3c <LL_TIM_Init+0x38>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b22:	d00b      	beq.n	8002b3c <LL_TIM_Init+0x38>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a36      	ldr	r2, [pc, #216]	; (8002c00 <LL_TIM_Init+0xfc>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d007      	beq.n	8002b3c <LL_TIM_Init+0x38>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a35      	ldr	r2, [pc, #212]	; (8002c04 <LL_TIM_Init+0x100>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d003      	beq.n	8002b3c <LL_TIM_Init+0x38>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a34      	ldr	r2, [pc, #208]	; (8002c08 <LL_TIM_Init+0x104>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d106      	bne.n	8002b4a <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a2b      	ldr	r2, [pc, #172]	; (8002bfc <LL_TIM_Init+0xf8>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d01b      	beq.n	8002b8a <LL_TIM_Init+0x86>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b58:	d017      	beq.n	8002b8a <LL_TIM_Init+0x86>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a28      	ldr	r2, [pc, #160]	; (8002c00 <LL_TIM_Init+0xfc>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d013      	beq.n	8002b8a <LL_TIM_Init+0x86>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a27      	ldr	r2, [pc, #156]	; (8002c04 <LL_TIM_Init+0x100>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d00f      	beq.n	8002b8a <LL_TIM_Init+0x86>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a26      	ldr	r2, [pc, #152]	; (8002c08 <LL_TIM_Init+0x104>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d00b      	beq.n	8002b8a <LL_TIM_Init+0x86>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a25      	ldr	r2, [pc, #148]	; (8002c0c <LL_TIM_Init+0x108>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d007      	beq.n	8002b8a <LL_TIM_Init+0x86>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a24      	ldr	r2, [pc, #144]	; (8002c10 <LL_TIM_Init+0x10c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d003      	beq.n	8002b8a <LL_TIM_Init+0x86>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a23      	ldr	r2, [pc, #140]	; (8002c14 <LL_TIM_Init+0x110>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d106      	bne.n	8002b98 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7ff ff2b 	bl	8002a00 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	4619      	mov	r1, r3
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f7ff ff17 	bl	80029e4 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a10      	ldr	r2, [pc, #64]	; (8002bfc <LL_TIM_Init+0xf8>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d00f      	beq.n	8002bde <LL_TIM_Init+0xda>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a11      	ldr	r2, [pc, #68]	; (8002c08 <LL_TIM_Init+0x104>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d00b      	beq.n	8002bde <LL_TIM_Init+0xda>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a10      	ldr	r2, [pc, #64]	; (8002c0c <LL_TIM_Init+0x108>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d007      	beq.n	8002bde <LL_TIM_Init+0xda>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a0f      	ldr	r2, [pc, #60]	; (8002c10 <LL_TIM_Init+0x10c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d003      	beq.n	8002bde <LL_TIM_Init+0xda>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a0e      	ldr	r2, [pc, #56]	; (8002c14 <LL_TIM_Init+0x110>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d105      	bne.n	8002bea <LL_TIM_Init+0xe6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	4619      	mov	r1, r3
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7ff ff19 	bl	8002a1c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7ff ff7a 	bl	8002ae4 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40012c00 	.word	0x40012c00
 8002c00:	40000400 	.word	0x40000400
 8002c04:	40000800 	.word	0x40000800
 8002c08:	40013400 	.word	0x40013400
 8002c0c:	40014000 	.word	0x40014000
 8002c10:	40014400 	.word	0x40014400
 8002c14:	40014800 	.word	0x40014800

08002c18 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c2e:	d045      	beq.n	8002cbc <LL_TIM_OC_Init+0xa4>
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c36:	d848      	bhi.n	8002cca <LL_TIM_OC_Init+0xb2>
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c3e:	d036      	beq.n	8002cae <LL_TIM_OC_Init+0x96>
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c46:	d840      	bhi.n	8002cca <LL_TIM_OC_Init+0xb2>
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c4e:	d027      	beq.n	8002ca0 <LL_TIM_OC_Init+0x88>
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c56:	d838      	bhi.n	8002cca <LL_TIM_OC_Init+0xb2>
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c5e:	d018      	beq.n	8002c92 <LL_TIM_OC_Init+0x7a>
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c66:	d830      	bhi.n	8002cca <LL_TIM_OC_Init+0xb2>
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d003      	beq.n	8002c76 <LL_TIM_OC_Init+0x5e>
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2b10      	cmp	r3, #16
 8002c72:	d007      	beq.n	8002c84 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002c74:	e029      	b.n	8002cca <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f000 f8b5 	bl	8002de8 <OC1Config>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	75fb      	strb	r3, [r7, #23]
      break;
 8002c82:	e023      	b.n	8002ccc <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 f92e 	bl	8002ee8 <OC2Config>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	75fb      	strb	r3, [r7, #23]
      break;
 8002c90:	e01c      	b.n	8002ccc <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 f9ab 	bl	8002ff0 <OC3Config>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	75fb      	strb	r3, [r7, #23]
      break;
 8002c9e:	e015      	b.n	8002ccc <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f000 fa28 	bl	80030f8 <OC4Config>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	75fb      	strb	r3, [r7, #23]
      break;
 8002cac:	e00e      	b.n	8002ccc <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f000 faa5 	bl	8003200 <OC5Config>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	75fb      	strb	r3, [r7, #23]
      break;
 8002cba:	e007      	b.n	8002ccc <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 fb02 	bl	80032c8 <OC6Config>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	75fb      	strb	r3, [r7, #23]
      break;
 8002cc8:	e000      	b.n	8002ccc <LL_TIM_OC_Init+0xb4>
      break;
 8002cca:	bf00      	nop
  }

  return result;
 8002ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
	...

08002cd8 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	7b12      	ldrb	r2, [r2, #12]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	89d2      	ldrh	r2, [r2, #14]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	4313      	orrs	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d52:	4313      	orrs	r3, r2
 8002d54:	60fb      	str	r3, [r7, #12]
  if (IS_TIM_ADVANCED_INSTANCE(TIMx))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a21      	ldr	r2, [pc, #132]	; (8002de0 <LL_TIM_BDTR_Init+0x108>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d003      	beq.n	8002d66 <LL_TIM_BDTR_Init+0x8e>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a20      	ldr	r2, [pc, #128]	; (8002de4 <LL_TIM_BDTR_Init+0x10c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d10d      	bne.n	8002d82 <LL_TIM_BDTR_Init+0xaa>
  {
    assert_param(IS_LL_TIM_BREAK_FILTER(TIM_BDTRInitStruct->BreakFilter));
    assert_param(IS_LL_TIM_BREAK_AFMODE(TIM_BDTRInitStruct->BreakAFMode));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, TIM_BDTRInitStruct->BreakAFMode);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a16      	ldr	r2, [pc, #88]	; (8002de0 <LL_TIM_BDTR_Init+0x108>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d003      	beq.n	8002d92 <LL_TIM_BDTR_Init+0xba>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a15      	ldr	r2, [pc, #84]	; (8002de4 <LL_TIM_BDTR_Init+0x10c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d11b      	bne.n	8002dca <LL_TIM_BDTR_Init+0xf2>
    assert_param(IS_LL_TIM_BREAK2_POLARITY(TIM_BDTRInitStruct->Break2Polarity));
    assert_param(IS_LL_TIM_BREAK2_FILTER(TIM_BDTRInitStruct->Break2Filter));
    assert_param(IS_LL_TIM_BREAK2_AFMODE(TIM_BDTRInitStruct->Break2AFMode));

    /* Set the BREAK2 input related BDTR bit-fields */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, TIM_BDTRInitStruct->Break2AFMode);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40012c00 	.word	0x40012c00
 8002de4:	40013400 	.word	0x40013400

08002de8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	f023 0201 	bic.w	r2, r3, #1
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f023 0303 	bic.w	r3, r3, #3
 8002e16:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	6812      	ldr	r2, [r2, #0]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f023 0202 	bic.w	r2, r3, #2
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f023 0201 	bic.w	r2, r3, #1
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a22      	ldr	r2, [pc, #136]	; (8002ed4 <OC1Config+0xec>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d00f      	beq.n	8002e6e <OC1Config+0x86>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a21      	ldr	r2, [pc, #132]	; (8002ed8 <OC1Config+0xf0>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d00b      	beq.n	8002e6e <OC1Config+0x86>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a20      	ldr	r2, [pc, #128]	; (8002edc <OC1Config+0xf4>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d007      	beq.n	8002e6e <OC1Config+0x86>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a1f      	ldr	r2, [pc, #124]	; (8002ee0 <OC1Config+0xf8>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d003      	beq.n	8002e6e <OC1Config+0x86>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a1e      	ldr	r2, [pc, #120]	; (8002ee4 <OC1Config+0xfc>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d11e      	bne.n	8002eac <OC1Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f023 0208 	bic.w	r2, r3, #8
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f023 0204 	bic.w	r2, r3, #4
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7ff fdba 	bl	8002a38 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40012c00 	.word	0x40012c00
 8002ed8:	40013400 	.word	0x40013400
 8002edc:	40014000 	.word	0x40014000
 8002ee0:	40014400 	.word	0x40014400
 8002ee4:	40014800 	.word	0x40014800

08002ee8 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	f023 0210 	bic.w	r2, r3, #16
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	6812      	ldr	r2, [r2, #0]
 8002f26:	0212      	lsls	r2, r2, #8
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f023 0220 	bic.w	r2, r3, #32
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	011b      	lsls	r3, r3, #4
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f023 0210 	bic.w	r2, r3, #16
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a23      	ldr	r2, [pc, #140]	; (8002fdc <OC2Config+0xf4>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d00f      	beq.n	8002f74 <OC2Config+0x8c>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a22      	ldr	r2, [pc, #136]	; (8002fe0 <OC2Config+0xf8>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d00b      	beq.n	8002f74 <OC2Config+0x8c>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a21      	ldr	r2, [pc, #132]	; (8002fe4 <OC2Config+0xfc>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d007      	beq.n	8002f74 <OC2Config+0x8c>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a20      	ldr	r2, [pc, #128]	; (8002fe8 <OC2Config+0x100>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d003      	beq.n	8002f74 <OC2Config+0x8c>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a1f      	ldr	r2, [pc, #124]	; (8002fec <OC2Config+0x104>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d11f      	bne.n	8002fb4 <OC2Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	019b      	lsls	r3, r3, #6
 8002f80:	4313      	orrs	r3, r2
 8002f82:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	019b      	lsls	r3, r3, #6
 8002f90:	4313      	orrs	r3, r2
 8002f92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7ff fd44 	bl	8002a54 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40012c00 	.word	0x40012c00
 8002fe0:	40013400 	.word	0x40013400
 8002fe4:	40014000 	.word	0x40014000
 8002fe8:	40014400 	.word	0x40014400
 8002fec:	40014800 	.word	0x40014800

08002ff0 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f023 0303 	bic.w	r3, r3, #3
 800301e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	6812      	ldr	r2, [r2, #0]
 800302e:	4313      	orrs	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	021b      	lsls	r3, r3, #8
 800303e:	4313      	orrs	r3, r2
 8003040:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	021b      	lsls	r3, r3, #8
 800304e:	4313      	orrs	r3, r2
 8003050:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a23      	ldr	r2, [pc, #140]	; (80030e4 <OC3Config+0xf4>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d00f      	beq.n	800307a <OC3Config+0x8a>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a22      	ldr	r2, [pc, #136]	; (80030e8 <OC3Config+0xf8>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d00b      	beq.n	800307a <OC3Config+0x8a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a21      	ldr	r2, [pc, #132]	; (80030ec <OC3Config+0xfc>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d007      	beq.n	800307a <OC3Config+0x8a>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a20      	ldr	r2, [pc, #128]	; (80030f0 <OC3Config+0x100>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d003      	beq.n	800307a <OC3Config+0x8a>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a1f      	ldr	r2, [pc, #124]	; (80030f4 <OC3Config+0x104>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d11f      	bne.n	80030ba <OC3Config+0xca>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	029b      	lsls	r3, r3, #10
 8003086:	4313      	orrs	r3, r2
 8003088:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	029b      	lsls	r3, r3, #10
 8003096:	4313      	orrs	r3, r2
 8003098:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	4313      	orrs	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	015b      	lsls	r3, r3, #5
 80030b6:	4313      	orrs	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	4619      	mov	r1, r3
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7ff fccf 	bl	8002a70 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40012c00 	.word	0x40012c00
 80030e8:	40013400 	.word	0x40013400
 80030ec:	40014000 	.word	0x40014000
 80030f0:	40014400 	.word	0x40014400
 80030f4:	40014800 	.word	0x40014800

080030f8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003126:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800312e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	6812      	ldr	r2, [r2, #0]
 8003136:	0212      	lsls	r2, r2, #8
 8003138:	4313      	orrs	r3, r2
 800313a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	031b      	lsls	r3, r3, #12
 8003148:	4313      	orrs	r3, r2
 800314a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	031b      	lsls	r3, r3, #12
 8003158:	4313      	orrs	r3, r2
 800315a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a23      	ldr	r2, [pc, #140]	; (80031ec <OC4Config+0xf4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d00f      	beq.n	8003184 <OC4Config+0x8c>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a22      	ldr	r2, [pc, #136]	; (80031f0 <OC4Config+0xf8>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d00b      	beq.n	8003184 <OC4Config+0x8c>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a21      	ldr	r2, [pc, #132]	; (80031f4 <OC4Config+0xfc>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d007      	beq.n	8003184 <OC4Config+0x8c>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a20      	ldr	r2, [pc, #128]	; (80031f8 <OC4Config+0x100>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d003      	beq.n	8003184 <OC4Config+0x8c>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a1f      	ldr	r2, [pc, #124]	; (80031fc <OC4Config+0x104>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d11f      	bne.n	80031c4 <OC4Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NP, TIM_OCInitStruct->OCNPolarity << 14U);
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	039b      	lsls	r3, r3, #14
 8003190:	4313      	orrs	r3, r2
 8003192:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NE, TIM_OCInitStruct->OCNState << 14U);
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	039b      	lsls	r3, r3, #14
 80031a0:	4313      	orrs	r3, r2
 80031a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	019b      	lsls	r3, r3, #6
 80031b0:	4313      	orrs	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4N, TIM_OCInitStruct->OCNIdleState << 7U);
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	01db      	lsls	r3, r3, #7
 80031c0:	4313      	orrs	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	4619      	mov	r1, r3
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7ff fc58 	bl	8002a8c <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3718      	adds	r7, #24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40012c00 	.word	0x40012c00
 80031f0:	40013400 	.word	0x40013400
 80031f4:	40014000 	.word	0x40014000
 80031f8:	40014400 	.word	0x40014400
 80031fc:	40014800 	.word	0x40014800

08003200 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003220:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	6812      	ldr	r2, [r2, #0]
 8003230:	4313      	orrs	r3, r2
 8003232:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	041b      	lsls	r3, r3, #16
 8003240:	4313      	orrs	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	041b      	lsls	r3, r3, #16
 8003250:	4313      	orrs	r3, r2
 8003252:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a17      	ldr	r2, [pc, #92]	; (80032b4 <OC5Config+0xb4>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d00f      	beq.n	800327c <OC5Config+0x7c>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a16      	ldr	r2, [pc, #88]	; (80032b8 <OC5Config+0xb8>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d00b      	beq.n	800327c <OC5Config+0x7c>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a15      	ldr	r2, [pc, #84]	; (80032bc <OC5Config+0xbc>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d007      	beq.n	800327c <OC5Config+0x7c>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a14      	ldr	r2, [pc, #80]	; (80032c0 <OC5Config+0xc0>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d003      	beq.n	800327c <OC5Config+0x7c>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a13      	ldr	r2, [pc, #76]	; (80032c4 <OC5Config+0xc4>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d109      	bne.n	8003290 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	021b      	lsls	r3, r3, #8
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	4619      	mov	r1, r3
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f7ff fc03 	bl	8002aa8 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	40012c00 	.word	0x40012c00
 80032b8:	40013400 	.word	0x40013400
 80032bc:	40014000 	.word	0x40014000
 80032c0:	40014400 	.word	0x40014400
 80032c4:	40014800 	.word	0x40014800

080032c8 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032e8:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	6812      	ldr	r2, [r2, #0]
 80032f8:	0212      	lsls	r2, r2, #8
 80032fa:	4313      	orrs	r3, r2
 80032fc:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	051b      	lsls	r3, r3, #20
 800330a:	4313      	orrs	r3, r2
 800330c:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	051b      	lsls	r3, r3, #20
 800331a:	4313      	orrs	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a16      	ldr	r2, [pc, #88]	; (800337c <OC6Config+0xb4>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d00f      	beq.n	8003346 <OC6Config+0x7e>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a15      	ldr	r2, [pc, #84]	; (8003380 <OC6Config+0xb8>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d00b      	beq.n	8003346 <OC6Config+0x7e>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a14      	ldr	r2, [pc, #80]	; (8003384 <OC6Config+0xbc>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d007      	beq.n	8003346 <OC6Config+0x7e>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a13      	ldr	r2, [pc, #76]	; (8003388 <OC6Config+0xc0>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d003      	beq.n	8003346 <OC6Config+0x7e>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a12      	ldr	r2, [pc, #72]	; (800338c <OC6Config+0xc4>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d109      	bne.n	800335a <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	029b      	lsls	r3, r3, #10
 8003354:	431a      	orrs	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	4619      	mov	r1, r3
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7ff fbae 	bl	8002ac8 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40012c00 	.word	0x40012c00
 8003380:	40013400 	.word	0x40013400
 8003384:	40014000 	.word	0x40014000
 8003388:	40014400 	.word	0x40014400
 800338c:	40014800 	.word	0x40014800

08003390 <__libc_init_array>:
 8003390:	b570      	push	{r4, r5, r6, lr}
 8003392:	4d0d      	ldr	r5, [pc, #52]	; (80033c8 <__libc_init_array+0x38>)
 8003394:	4c0d      	ldr	r4, [pc, #52]	; (80033cc <__libc_init_array+0x3c>)
 8003396:	1b64      	subs	r4, r4, r5
 8003398:	10a4      	asrs	r4, r4, #2
 800339a:	2600      	movs	r6, #0
 800339c:	42a6      	cmp	r6, r4
 800339e:	d109      	bne.n	80033b4 <__libc_init_array+0x24>
 80033a0:	4d0b      	ldr	r5, [pc, #44]	; (80033d0 <__libc_init_array+0x40>)
 80033a2:	4c0c      	ldr	r4, [pc, #48]	; (80033d4 <__libc_init_array+0x44>)
 80033a4:	f000 f820 	bl	80033e8 <_init>
 80033a8:	1b64      	subs	r4, r4, r5
 80033aa:	10a4      	asrs	r4, r4, #2
 80033ac:	2600      	movs	r6, #0
 80033ae:	42a6      	cmp	r6, r4
 80033b0:	d105      	bne.n	80033be <__libc_init_array+0x2e>
 80033b2:	bd70      	pop	{r4, r5, r6, pc}
 80033b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80033b8:	4798      	blx	r3
 80033ba:	3601      	adds	r6, #1
 80033bc:	e7ee      	b.n	800339c <__libc_init_array+0xc>
 80033be:	f855 3b04 	ldr.w	r3, [r5], #4
 80033c2:	4798      	blx	r3
 80033c4:	3601      	adds	r6, #1
 80033c6:	e7f2      	b.n	80033ae <__libc_init_array+0x1e>
 80033c8:	08003428 	.word	0x08003428
 80033cc:	08003428 	.word	0x08003428
 80033d0:	08003428 	.word	0x08003428
 80033d4:	0800342c 	.word	0x0800342c

080033d8 <memset>:
 80033d8:	4402      	add	r2, r0
 80033da:	4603      	mov	r3, r0
 80033dc:	4293      	cmp	r3, r2
 80033de:	d100      	bne.n	80033e2 <memset+0xa>
 80033e0:	4770      	bx	lr
 80033e2:	f803 1b01 	strb.w	r1, [r3], #1
 80033e6:	e7f9      	b.n	80033dc <memset+0x4>

080033e8 <_init>:
 80033e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ea:	bf00      	nop
 80033ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ee:	bc08      	pop	{r3}
 80033f0:	469e      	mov	lr, r3
 80033f2:	4770      	bx	lr

080033f4 <_fini>:
 80033f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033f6:	bf00      	nop
 80033f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033fa:	bc08      	pop	{r3}
 80033fc:	469e      	mov	lr, r3
 80033fe:	4770      	bx	lr
